{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/concise/source/css/app.less","path":"css/app.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/archive.less","path":"css/archive.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/article.less","path":"css/article.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/aside.less","path":"css/aside.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/category.less","path":"css/category.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/footer.less","path":"css/footer.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/icons.less","path":"css/icons.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/markdown.less","path":"css/markdown.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/mixin.less","path":"css/mixin.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/monokai-sublime.less","path":"css/monokai-sublime.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/nav.less","path":"css/nav.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/page.less","path":"css/page.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/reset.less","path":"css/reset.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/tags.less","path":"css/tags.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/vars.less","path":"css/vars.less","modified":1,"renderable":1},{"_id":"themes/concise/source/css/widget.less","path":"css/widget.less","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/concise/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/concise/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/concise/source/js/scrollspy.min.js","path":"js/scrollspy.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/concise/.gitignore","hash":"fdaed0efe3b13878965b76ef9489b74d20bccbe6","modified":1531404422634},{"_id":"themes/concise/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1531404422634},{"_id":"themes/concise/_config.yml","hash":"5b883175d8f2905fbfc737f1b891f7391c093faa","modified":1531487476090},{"_id":"source/_posts/SpringMVC笔记（10）.md","hash":"fccd0223acd3b5ebdfdade40cc0fa0b7ccabb5f2","modified":1531487968888},{"_id":"source/_posts/SpringMVC笔记（2）.md","hash":"04d1d72a3676e01b26ab990901a4e2cdf1306a33","modified":1531486016579},{"_id":"source/_posts/SpringMVC笔记（3）.md","hash":"535ec39605b27950d743724505cad870203b43ec","modified":1531486016743},{"_id":"source/_posts/SpringMVC笔记（4）.md","hash":"92883d1b39663453ec7d0b366690834f375a3ea4","modified":1531486016898},{"_id":"source/_posts/SpringMVC笔记（5）.md","hash":"456885bfadb30b875a41f8c4ee0d5a7b048764dd","modified":1531486017062},{"_id":"source/_posts/SpringMVC笔记（6）.md","hash":"a5b473de7131f5655564ccf1a889877a945534dd","modified":1531486017231},{"_id":"source/_posts/SpringMVC笔记（7）.md","hash":"7c1952544e2251de0379192f761f4869e5f8eece","modified":1531486048582},{"_id":"source/_posts/SpringMVC笔记（8）.md","hash":"f98b92a29a103ce9c4c01644378921a1c4bcc52f","modified":1531486048893},{"_id":"source/_posts/SpringMVC笔记（9）.md","hash":"b75b48701779c3ab43a2872a4fc4575f1f7e86cd","modified":1531486049058},{"_id":"themes/concise/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1531404422608},{"_id":"themes/concise/.git/config","hash":"0c433f56da139b56f9f4f5cc6b07150f04ad1e31","modified":1531404422619},{"_id":"themes/concise/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1531404408695},{"_id":"themes/concise/.git/index","hash":"d2d4dc4d9f5d781eb1ddc7086b68a977bc4133a4","modified":1531474907582},{"_id":"themes/concise/.git/packed-refs","hash":"82099c15488da6e130f835cd5858ba2e05615913","modified":1531404422583},{"_id":"source/_posts/SpringMVC笔记（1）.md","hash":"97848d85832cbe32c298d165f3a08dcf7e7a5e16","modified":1531486016270},{"_id":"themes/concise/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1531404422638},{"_id":"themes/concise/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1531404422638},{"_id":"themes/concise/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1531404422639},{"_id":"themes/concise/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1531404422639},{"_id":"themes/concise/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1531404422640},{"_id":"themes/concise/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1531404422641},{"_id":"themes/concise/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1531404422642},{"_id":"themes/concise/layout/archive.ejs","hash":"3e4d0c3fa27aacb7ecf7c7d93b3c603087caf3a8","modified":1531404422653},{"_id":"themes/concise/layout/categories.ejs","hash":"453ec20e5985487dd2eaa0a32003e2ec4495c391","modified":1531404422654},{"_id":"themes/concise/layout/category.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1531404422655},{"_id":"themes/concise/layout/index.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1531404422655},{"_id":"themes/concise/layout/layout.ejs","hash":"20f3e6e680b21af31b734af40ec6eb2b71d47dfd","modified":1531404422656},{"_id":"themes/concise/layout/page.ejs","hash":"6dd88cbbef23b32a7769f5ae0bb8b8dd5c580f98","modified":1531404422656},{"_id":"themes/concise/layout/post.ejs","hash":"df2a2fe6a17bec6a99c6494148517e5610e76e93","modified":1531404422657},{"_id":"themes/concise/layout/tag.ejs","hash":"e29542322fe798281a40eed476468aa8afba7d50","modified":1531404422657},{"_id":"themes/concise/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1531404408696},{"_id":"themes/concise/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1531404408696},{"_id":"themes/concise/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1531404408709},{"_id":"themes/concise/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1531404408710},{"_id":"themes/concise/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1531404408711},{"_id":"themes/concise/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1531404408711},{"_id":"themes/concise/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1531404408711},{"_id":"themes/concise/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1531404408712},{"_id":"themes/concise/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1531404408712},{"_id":"themes/concise/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1531404408713},{"_id":"themes/concise/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1531404408713},{"_id":"themes/concise/.git/logs/HEAD","hash":"d2f7b886935e0c6602d98edd85e426b895f41ca6","modified":1531404422612},{"_id":"themes/concise/layout/_partial/archive.ejs","hash":"4f3cdb19da78ac7d42d37fb4d152988f99ea74f4","modified":1531404422643},{"_id":"themes/concise/layout/_partial/article.ejs","hash":"40cff2943bda22e0ad6ffc5b4a24917d1a797bea","modified":1531404422644},{"_id":"themes/concise/layout/_partial/articles.ejs","hash":"3ca4869df35f85c39997a99ea32b3366e02de34a","modified":1531404422645},{"_id":"themes/concise/layout/_partial/aside.ejs","hash":"5853faca1936c7edcd690f60a902a1b0d8a57a70","modified":1531404422645},{"_id":"themes/concise/layout/_partial/comments.ejs","hash":"6355210889daa8bb27f7d091459925aad2d9bd78","modified":1531404422646},{"_id":"themes/concise/layout/_partial/footer.ejs","hash":"f5a4e78a78091cd220e1cc366394be494d214d45","modified":1531476037061},{"_id":"themes/concise/layout/_partial/header.ejs","hash":"4b3a9262654ef3bc91fd9067e0db20866bb18da8","modified":1531404422647},{"_id":"themes/concise/layout/_partial/nav.ejs","hash":"3176b3f4c3dd4a774d0863ba81b7d059400c43f8","modified":1531404422648},{"_id":"themes/concise/layout/_widget/archive.ejs","hash":"e1bdddeaada31c00aa67278fcc50ad845ecf1722","modified":1531404422651},{"_id":"themes/concise/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1531404422651},{"_id":"themes/concise/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1531404422652},{"_id":"themes/concise/layout/_widget/tag.ejs","hash":"c000ec9f1479f74ec8d0e9378ba61f23f3778431","modified":1531404422652},{"_id":"themes/concise/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1531404422653},{"_id":"themes/concise/source/css/app.less","hash":"048c0c1bfc8034d6f4a824d6c06fe0bfdb5c09d9","modified":1531404422662},{"_id":"themes/concise/source/css/archive.less","hash":"acf97e6d82c7bce8591cde5730fcecdc70c9c6c6","modified":1531404422663},{"_id":"themes/concise/source/css/article.less","hash":"daf705d35db007d1d0504a07b95ce9cacc425657","modified":1531404422663},{"_id":"themes/concise/source/css/aside.less","hash":"7c1a25e887ba25174b3854384cce97d0e70f089e","modified":1531404422664},{"_id":"themes/concise/source/css/category.less","hash":"9288664fef128c5527078d6c742611c370de08bd","modified":1531404422664},{"_id":"themes/concise/source/css/footer.less","hash":"9798524e6235b96cc0235c77c436c38c41e9b6f7","modified":1531404422665},{"_id":"themes/concise/source/css/icons.less","hash":"7d4f4c543ab1a777ec2eb5156f9e25b19063fedc","modified":1531404422665},{"_id":"themes/concise/source/css/markdown.less","hash":"56adc0573ebe6708fae370ade0411124df317c20","modified":1531404422666},{"_id":"themes/concise/source/css/mixin.less","hash":"d3d7673330e60d0294ac8a806ef697fa89e906f0","modified":1531404422667},{"_id":"themes/concise/source/css/monokai-sublime.less","hash":"9b36b183a224d784dcb4655be909368cd68ba1f0","modified":1531404422667},{"_id":"themes/concise/source/css/nav.less","hash":"4b3ad7ae1abd7af55083f0c99585a27797bd8c8b","modified":1531404422668},{"_id":"themes/concise/source/css/page.less","hash":"2c10c522627d8a486ab8a7ad91614a5a3a2b0c66","modified":1531404422668},{"_id":"themes/concise/source/css/reset.less","hash":"9e203ece4c9678a746d7d75237167510a7a002c5","modified":1531404422669},{"_id":"themes/concise/source/css/style.less","hash":"fc58e1f9298dfaf148c451e55e1fbda3e7b21598","modified":1531404422669},{"_id":"themes/concise/source/css/tags.less","hash":"92edb713370078cf4757e8546555f91ab7632614","modified":1531404422670},{"_id":"themes/concise/source/css/vars.less","hash":"4a90364bbc67fc2c4c01d757f1e026f7ef69a389","modified":1531404422671},{"_id":"themes/concise/source/css/widget.less","hash":"8373c2246dfb0261278003f1985a53707494e0b9","modified":1531404422672},{"_id":"themes/concise/source/fonts/icomoon.eot","hash":"8300564edcd12262c6b8b97ba225bc00b72f5984","modified":1531404422673},{"_id":"themes/concise/source/fonts/icomoon.svg","hash":"821f98d8cdec4dbef208ed6f66c54e7b718fdd6a","modified":1531404422674},{"_id":"themes/concise/source/fonts/icomoon.ttf","hash":"6b577c657ccb5de7c321e51942a52922a4e95ec1","modified":1531404422675},{"_id":"themes/concise/source/fonts/icomoon.woff","hash":"5a3b86fa1122f78d9b285fbd390bf142721c51ed","modified":1531404422676},{"_id":"themes/concise/source/images/avatar.jpg","hash":"100da8e5486f72b1c5917b5812291644575f47b0","modified":1531405311163},{"_id":"themes/concise/source/js/scrollspy.min.js","hash":"50fee51d681739bbaf0dd65fddc36d64d951ece9","modified":1531404422680},{"_id":"themes/concise/.git/objects/pack/pack-6d62da9f370274f25caf19e4c4a35a28a1757337.idx","hash":"f53f3e304cf88d85011c6848456243d0962a7b9a","modified":1531404422520},{"_id":"themes/concise/.git/refs/heads/master","hash":"c39ebb754be13c1eaa7a3dc7d7db7622956cfc8e","modified":1531404422611},{"_id":"themes/concise/layout/_partial/post/date.ejs","hash":"891db6745bac06df4be5a0f1cd69da1c0f90596a","modified":1531404422649},{"_id":"themes/concise/layout/_partial/post/tags.ejs","hash":"24abef606b55a9dda97dca79bb8ab46968919423","modified":1531404422649},{"_id":"themes/concise/.git/logs/refs/heads/master","hash":"d2f7b886935e0c6602d98edd85e426b895f41ca6","modified":1531404422613},{"_id":"themes/concise/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1531404422606},{"_id":"themes/concise/.git/logs/refs/remotes/origin/HEAD","hash":"d2f7b886935e0c6602d98edd85e426b895f41ca6","modified":1531404422606},{"_id":"themes/concise/.git/objects/pack/pack-6d62da9f370274f25caf19e4c4a35a28a1757337.pack","hash":"2e74601f02a12bfc577993ab81b3a89feaf82865","modified":1531404422521},{"_id":"public/2018/07/12/SpringMVC笔记（4）/index.html","hash":"ae6b3ebc53d100ade595b16b2214e6360b0ecbb2","modified":1531487999578},{"_id":"public/2018/07/12/SpringMVC笔记（5）/index.html","hash":"8c5bb204219df16cbccb20dae049c3b173f402f9","modified":1531487999578},{"_id":"public/2018/07/12/SpringMVC笔记（1）/index.html","hash":"31c676bedca96d7bdfc040c1e00ee3f6a02f27b6","modified":1531487999579},{"_id":"public/archives/index.html","hash":"a565e5e6aff8c1c7d0ec5a7e9ae8bc344c609951","modified":1531487999579},{"_id":"public/archives/2018/index.html","hash":"96d1b5deffd21ea254b6c7d45a313aaa12d9cdb9","modified":1531487999579},{"_id":"public/archives/2018/07/index.html","hash":"e0c3f33ce4c56fddf01ded4cf20f5884d7863a2d","modified":1531487999579},{"_id":"public/2018/07/12/SpringMVC笔记（10）/index.html","hash":"03dac3f44a83506610fc1d8ff37bdece6e1a3b24","modified":1531487999579},{"_id":"public/2018/07/12/SpringMVC笔记（2）/index.html","hash":"615f827c8be64efee2d1334efed5d21f06ef5bdd","modified":1531487999579},{"_id":"public/2018/07/12/SpringMVC笔记（3）/index.html","hash":"f91c320c628be19868d03f7cd04b15fbf39c8a05","modified":1531487999579},{"_id":"public/2018/07/12/SpringMVC笔记（6）/index.html","hash":"cebe7f676e4cc843e97ee409e3895f75fe582eb5","modified":1531487999579},{"_id":"public/2018/07/12/SpringMVC笔记（7）/index.html","hash":"3dfce5fa0beaa2084d6953b5c9631fb0bb9ef7fc","modified":1531487999579},{"_id":"public/2018/07/12/SpringMVC笔记（8）/index.html","hash":"a86fc8457b50f12e1e4c438c2154c52a9a138f3e","modified":1531487999579},{"_id":"public/2018/07/12/SpringMVC笔记（9）/index.html","hash":"af4bcde75a881efbaca0a3430fd27cf64def2206","modified":1531487999579},{"_id":"public/tags/SpringMVC笔记/index.html","hash":"df309e103480e812387f1804f58df7aeabf1ed38","modified":1531487999580},{"_id":"public/categories/back-end/index.html","hash":"61633d6357f99d44e95cad7b64b04dcfb65d591b","modified":1531487999580},{"_id":"public/index.html","hash":"9b3ddce83eeffb9913f4ac6f7926822b9b96ef17","modified":1531487999580},{"_id":"public/fonts/icomoon.eot","hash":"8300564edcd12262c6b8b97ba225bc00b72f5984","modified":1531487999592},{"_id":"public/fonts/icomoon.svg","hash":"821f98d8cdec4dbef208ed6f66c54e7b718fdd6a","modified":1531487999592},{"_id":"public/fonts/icomoon.ttf","hash":"6b577c657ccb5de7c321e51942a52922a4e95ec1","modified":1531487999592},{"_id":"public/fonts/icomoon.woff","hash":"5a3b86fa1122f78d9b285fbd390bf142721c51ed","modified":1531487999593},{"_id":"public/images/avatar.jpg","hash":"100da8e5486f72b1c5917b5812291644575f47b0","modified":1531487999593},{"_id":"public/js/scrollspy.min.js","hash":"076f7db44c3a05147144f736cae159baf1612f72","modified":1531487999776},{"_id":"public/css/icons.css","hash":"39685e5970762ed964b199c5e546260ac88b41f7","modified":1531487999780},{"_id":"public/css/markdown.css","hash":"2103453fdf4ff9eda29ca689ad037ea91d412dbd","modified":1531487999780},{"_id":"public/css/mixin.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531487999781},{"_id":"public/css/monokai-sublime.css","hash":"f087de3a7a0f2e3aae36633eb4a46e38e1da3ea2","modified":1531487999781},{"_id":"public/css/vars.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531487999781},{"_id":"public/css/article.css","hash":"bf1fc72c1528431460594d5224e8bda016c2c5f7","modified":1531487999959},{"_id":"public/css/app.css","hash":"85f5d34a44d3cf9b241d9a0de10490ed32865b6c","modified":1531487999959},{"_id":"public/css/archive.css","hash":"b81b3eb3940353d87245e3edd01b479edb59064e","modified":1531487999960},{"_id":"public/css/category.css","hash":"b6059959855d73fc8eac634939be5322927589b1","modified":1531487999960},{"_id":"public/css/aside.css","hash":"bff16cf949d13cedc0c03a68f1c1109183732a97","modified":1531487999960},{"_id":"public/css/footer.css","hash":"0f50543ca0f5c0c29d0a11b934c61467ddfb7fc6","modified":1531487999960},{"_id":"public/css/nav.css","hash":"73d6365bffdcf3bc6b73ea554517fb615da246c2","modified":1531487999960},{"_id":"public/css/page.css","hash":"60250269bdfb9422745ca465edefce74f08e7613","modified":1531487999960},{"_id":"public/css/reset.css","hash":"30764f89e387509dddf83998d59b08fb4e5dc8d0","modified":1531487999960},{"_id":"public/css/tags.css","hash":"c6618b8da67259a3bb105adb9841b6b5e3dda51f","modified":1531487999962},{"_id":"public/css/widget.css","hash":"0becbaab3f03488d4bfe57d0f4c759592b241bc0","modified":1531487999962},{"_id":"public/css/style.css","hash":"98ab310ed0c559210d93b8ab3a9e4ceaf31c49e1","modified":1531488000122}],"Category":[{"name":"back-end","_id":"cjjk0eua70002igqxjzrcdiq5"}],"Data":[],"Page":[],"Post":[{"title":"SpringMVC笔记（10）","date":"2018-07-12T15:28:27.000Z","_content":"\n## 修改范例\n\n操作流程：\n\n1.进入商品查询列表页面\n\n2.点击修改，进入商品修改页面，页面中显示了要修改的商品。要修改的商品从数据库查询，根据商品id(主键)查询商品信息\n\n3.在商品修改页面，修改商品信息，修改后，点击提交\n\n### 开发mapper\n\nmapper：\n\n根据id查询商品信息\n\n根据id更新Items表的数据\n\n不用开发了，使用逆向工程生成的代码。\n\n### 开发service\n\n在`com.iot.learnssm.firstssm.service.ItemsService`中添加两个接口\n\n```java\n  //根据id查询商品信息\n    /**\n     *\n     * <p>Title: findItemsById</p>\n     * <p>Description: </p>\n     * @param id 查询商品的id\n     * @return\n     * @throws Exception\n     */\n     ItemsCustom findItemsById(Integer id) throws Exception;\n\n    //修改商品信息\n    /**\n     *\n     * <p>Title: updateItems</p>\n     * <p>Description: </p>\n     * @param id 修改商品的id\n     * @param itemsCustom 修改的商品信息\n     * @throws Exception\n     */\n     void updateItems(Integer id,ItemsCustom itemsCustom) throws Exception;\n12345678910111213141516171819202122\n```\n\n在`com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl`中实现接口，增加`itemsMapper`属性\n\n```java\n@Autowired\nprivate ItemsMapper itemsMapper;\n\npublic ItemsCustom findItemsById(Integer id) throws Exception {\n    Items items = itemsMapper.selectByPrimaryKey(id);\n    //中间对商品信息进行业务处理\n    //....\n    //返回ItemsCustom\n    ItemsCustom itemsCustom = new ItemsCustom();\n    //将items的属性值拷贝到itemsCustom\n    BeanUtils.copyProperties(items, itemsCustom);\n\n    return itemsCustom;\n}\n\npublic void updateItems(Integer id, ItemsCustom itemsCustom) throws Exception {\n    //添加业务校验，通常在service接口对关键参数进行校验\n    //校验 id是否为空，如果为空抛出异常\n\n    //更新商品信息使用updateByPrimaryKeyWithBLOBs根据id更新items表中所有字段，包括 大文本类型字段\n    //updateByPrimaryKeyWithBLOBs要求必须转入id\n    itemsCustom.setId(id);\n    itemsMapper.updateByPrimaryKeyWithBLOBs(itemsCustom);\n}\n```\n\n### 开发controller\n\n方法：\n\n​    商品信息修改页面显示\n\n​    商品信息修改提交\n\n```java\n//使用@Controller来标识它是一个控制器\n@Controller\n//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径\n//比如：商品列表：/items/queryItems.action\n//@RequestMapping(\"/items\")\npublic class ItemsController {\n\n    @Autowired\n    private ItemsService itemsService;\n\n    //商品查询列表\n    @RequestMapping(\"/queryItems\")\n    //实现 对queryItems方法和url进行映射，一个方法对应一个url\n    //一般建议将url和方法写成一样\n    public ModelAndView queryItems() throws Exception{\n        //调用service查找数据库，查询商品列表\n        List<ItemsCustom> itemsList = itemsService.findItemsList(null);\n\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //相当于request的setAttribute方法,在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\",itemsList);\n\n        //指定视图\n        //下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList\n        //modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n        //下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀\n        modelAndView.setViewName(\"items/itemsList\");\n\n        return modelAndView;\n    }\n\n\n    //商品信息修改页面显示\n    @RequestMapping(\"/editItems\")\n    //限制http请求方法，可以post和get\n    //@RequestMapping(value=\"/editItems\",method={RequestMethod.POST, RequestMethod.GET})\n    public ModelAndView editItems()throws Exception {\n\n        //调用service根据商品id查询商品信息\n        ItemsCustom itemsCustom = itemsService.findItemsById(1);\n\n        // 返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n\n        //将商品信息放到model\n        modelAndView.addObject(\"itemsCustom\", itemsCustom);\n\n        //商品修改页面\n        modelAndView.setViewName(\"items/editItems\");\n\n        return modelAndView;\n    }\n\n    //商品信息修改提交\n    @RequestMapping(\"/editItemsSubmit\")\n    public ModelAndView editItemsSubmit(HttpServletRequest request, Integer id, ItemsCustom itemsCustom)throws Exception {\n\n        //调用service更新商品信息，页面需要将商品信息传到此方法\n        itemsService.updateItems(id, itemsCustom);\n\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //返回一个成功页面\n        modelAndView.setViewName(\"success\");\n        return modelAndView;\n    }\n\n}\n```\n\n### @RequestMapping`\n\n- url映射\n\n定义controller方法对应的url，进行处理器映射使用。\n\n- 窄化请求映射\n\n```java\n//使用@Controller来标识它是一个控制器\n@Controller\n//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径\n//比如：商品列表：/items/queryItems.action\n@RequestMapping(\"/items\")\npublic class ItemsController {\n```\n\n- 限制http请求方法\n\n出于安全性考虑，对http的链接进行方法限制。\n\n```java\n//商品信息修改页面显示\n    //@RequestMapping(\"/editItems\")\n    //限制http请求方法，可以post和get\n    @RequestMapping(value=\"/editItems\",method={RequestMethod.POST, RequestMethod.GET})\n    public ModelAndView editItems()throws Exception {\n```\n\n如果限制请求为post方法，进行get请求，即将上面代码的注解改为`@RequestMapping(value=\"/editItems\",method={RequestMethod.POST})`\n\n报错，状态码405：\n\n![](https://i.imgur.com/yrIoRte.png) \n\ncontroller方法的返回值\n\n返回`ModelAndView`\n\n需要方法结束时，定义ModelAndView，将model和view分别进行设置。\n\n返回string\n\n如果controller方法返回string\n\n1.表示返回逻辑视图名。\n\n真正视图(jsp路径)=前缀+逻辑视图名+后缀\n\n```java\n@RequestMapping(value=\"/editItems\",method={RequestMethod.POST,RequestMethod.GET})\n//@RequestParam里边指定request传入参数名称和形参进行绑定。\n//通过required属性指定参数是否必须要传入\n//通过defaultValue可以设置默认值，如果id参数没有传入，将默认值和形参绑定。\n//public String editItems(Model model, @RequestParam(value=\"id\",required=true) Integer items_id)throws Exception {\npublic String editItems(Model model)throws Exception {\n\n    //调用service根据商品id查询商品信息\n    ItemsCustom itemsCustom = itemsService.findItemsById(1);\n\n    //通过形参中的model将model数据传到页面\n    //相当于modelAndView.addObject方法\n    model.addAttribute(\"itemsCustom\", itemsCustom);\n\n    return \"items/editItems\";\n}\n```\n\n2.redirect重定向\n\n商品修改提交后，重定向到商品查询列表。\n\nredirect重定向特点：浏览器地址栏中的url会变化。修改提交的request数据无法传到重定向的地址。因为重定向后重新进行request（request无法共享）\n\n```\n//重定向到商品查询列表\n//return \"redirect:queryItems.action\";\n\n```\n\n3.forward页面转发\n\n通过forward进行页面转发，浏览器地址栏url不变，request可以共享。\n\n```java\n//页面转发\nreturn \"forward:queryItems.action\";\n```\n\n- 返回void\n\n在controller方法形参上可以定义request和response，使用request或response指定响应结果：\n\n1.使用request转向页面，如下：\n\n`request.getRequestDispatcher(\"页面路径\").forward(request, response);`\n\n2.也可以通过response页面重定向：\n\n`response.sendRedirect(\"url\")`\n\n3.也可以通过response指定响应结果，例如响应json数据如下：\n\n```java\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setContentType(\"application/json;charset=utf-8\");\nresponse.getWriter().write(\"json串\");\n```\n\n## 注解开发之集合类型参数绑定\n\n本文主要介绍注解开发的集合类型参数绑定，包括数组绑定，list绑定以及map绑定\n\n### 数组绑定\n\n### 需求\n\n商品批量删除，用户在页面选择多个商品，批量删除。\n\n### 表现层实现\n\n关键：将页面选择(多选)的商品id，传到controller方法的形参，方法形参使用数组接收页面请求的多个商品id。\n\n- controller方法定义：\n\n```java\n// 批量删除 商品信息\n@RequestMapping(\"/deleteItems\")\npublic String deleteItems(Integer[] items_id) throws Exception\n```\n\n- 页面定义：\n\n```jsp\n<c:forEach items=\"${itemsList }\" var=\"item\">\n<tr>\n    <td><input type=\"checkbox\" name=\"items_id\" value=\"${item.id}\"/></td>\n    <td>${item.name }</td>\n    <td>${item.price }</td>\n    <td><fmt:formatDate value=\"${item.createtime}\" pattern=\"yyyy-MM-dd HH:mm:ss\"/></td>\n    <td>${item.detail }</td>\n\n    <td><a href=\"${pageContext.request.contextPath }/items/editItems.action?id=${item.id}\">修改</a></td>\n\n</tr>\n</c:forEach>\n```\n\n## list绑定\n\n### 需求\n\n通常在需要批量提交数据时，将提交的数据绑定到`list<pojo>`中，比如：成绩录入（录入多门课成绩，批量提交），\n\n本例子需求：批量商品修改，在页面输入多个商品信息，将多个商品信息提交到controller方法中。\n\n### 表现层实现\n\n- controller方法定义：\n  - 1、进入批量商品修改页面(页面样式参考商品列表实现)\n  - 2、批量修改商品提交\n\n使用List接收页面提交的批量数据，通过包装pojo接收，在包装pojo中定义`list<pojo>`属性\n\n```java\npublic class ItemsQueryVo {\n\n    //商品信息\n    private Items items;\n\n    //为了系统 可扩展性，对原始生成的po进行扩展\n    private ItemsCustom itemsCustom;\n\n    //批量商品信息\n    private List<ItemsCustom> itemsList;\n```\n\n```java\n// 批量修改商品提交\n// 通过ItemsQueryVo接收批量提交的商品信息，将商品信息存储到itemsQueryVo中itemsList属性中。\n@RequestMapping(\"/editItemsAllSubmit\")\npublic String editItemsAllSubmit(ItemsQueryVo itemsQueryVo) throws Exception {\n\n    return \"success\";\n}\n```\n\n- 页面定义：\n\n```jsp\n<c:forEach items=\"${itemsList }\" var=\"item\" varStatus=\"status\">\n    <tr>\n\n        <td><input name=\"itemsList[${status.index }].name\" value=\"${item.name }\"/></td>\n        <td><input name=\"itemsList[${status.index }].price\" value=\"${item.price }\"/></td>\n        <td><input name=\"itemsList[${status.index }].createtime\" value=\"<fmt:formatDate value=\"${item.createtime}\" pattern=\"yyyy-MM-dd HH:mm:ss\"/>\"/></td>\n        <td><input name=\"itemsList[${status.index }].detail\" value=\"${item.detail }\"/></td>\n\n    </tr>\n</c:forEach>\n```\n\nname的格式：\n\n**对应包装pojo中的list类型属性名[下标(从0开始)].包装pojo中List类型的属性中pojo的属性名**\n\n例子：\n\n`\"name=\"itemsList[${status.index }].price\"`\n\n*可以和包装类型的参数绑定归纳对比一下，其实就是在包装类的pojo基础上多了个下标。只不过包装类参数绑定时，要和包装pojo中的pojo类性的属性名一致，而list参数绑定时，要和包装pojo中的list类型的属性名一致。*\n\n### map绑定\n\n也通过在包装pojo中定义map类型属性。\n\n在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。\n\n- 包装类中定义Map对象如下：\n\n```java\nPublic class QueryVo {\nprivate Map<String, Object> itemInfo = new HashMap<String, Object>();\n  //get/set方法..\n}\n```\n\n- 页面定义如下：\n\n```jsp\n<tr>\n<td>学生信息：</td>\n<td>\n姓名：<inputtype=\"text\"name=\"itemInfo['name']\"/>\n年龄：<inputtype=\"text\"name=\"itemInfo['price']\"/>\n.. .. ..\n</td>\n</tr>\n```\n\n- Contrller方法定义如下：\n\n```java\npublic String useraddsubmit(Model model,QueryVo queryVo)throws Exception{\nSystem.out.println(queryVo.getStudentinfo());\n}\n```\n\n## springmvc校验\n\n本文主要介绍springmvc校验，包括环境准备，校验器配置，pojo张添加校验规则，捕获和显示检验错误信息以及分组校验简单示例。\n\n### 校验理解\n\n项目中，通常使用较多是前端的校验，比如页面中js校验。对于安全要求较高点建议在服务端进行校验。\n\n服务端校验：\n\n- 控制层conroller：校验页面请求的参数的合法性。在服务端控制层conroller校验，不区分客户端类型（浏览器、手机客户端、远程调用）\n- 业务层service（使用较多）：主要校验关键业务参数，仅限于service接口中使用的参数。\n- 持久层dao：一般是不校验的。\n\n### springmvc校验需求\n\nspringmvc使用hibernate的校验框架validation(和hibernate没有任何关系)。\n\n校验思路：\n\n页面提交请求的参数，请求到controller方法中，使用validation进行校验。如果校验出错，将错误信息展示到页面。\n\n具体需求：\n\n商品修改，添加校验（校验商品名称长度，生产日期的非空校验），如果校验出错，在商品修改页面显示错误信息。\n\n### 环境准备\n\n我们需要三个jar包：\n\n- hibernate-validator.jar\n- jboss-logging.jar\n- validation-api.jar\n\n这里我们添加maven依赖\n\n```xml\n<!-- hibernate 校验 -->\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-validator</artifactId>\n    <version>5.2.4.Final</version>\n</dependency>\n```\n\n可以看到，另外两个jar包被`hibernate-validator`依赖，所以不用再额外添加了。\n\n### 配置校验器\n\n- 在springmvc.xml中添加\n\n  ```xml\n  <!-- 校验器 -->\n  <bean id=\"validator\"\n        class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\">\n      <!-- hibernate校验器-->\n      <property name=\"providerClass\" value=\"org.hibernate.validator.HibernateValidator\" />\n      <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->\n      <property name=\"validationMessageSource\" ref=\"messageSource\" />\n  </bean>\n  <!-- 校验错误信息配置文件 -->\n  <bean id=\"messageSource\"\n        class=\"org.springframework.context.support.ReloadableResourceBundleMessageSource\">\n      <!-- 资源文件名-->\n      <property name=\"basenames\">\n          <list>\n              <value>classpath:CustomValidationMessages</value>\n          </list>\n      </property>\n      <!-- 资源文件编码格式 -->\n      <property name=\"fileEncodings\" value=\"utf-8\" />\n      <!-- 对资源文件内容缓存时间，单位秒 -->\n      <property name=\"cacheSeconds\" value=\"120\" />\n  </bean>\n  ```\n\n  校验器注入到处理器适配器中\n\n  ```xml\n  <mvc:annotation-driven conversion-service=\"conversionService\" validator=\"validator\">\n  </mvc:annotation-driven>\n  ```\n\n 在CustomValidationMessages.properties配置校验错误信息：\n\n```properties\n#添加校验的错误提示信息\nitems.name.length.error=请输入1到30个字符的商品名称\nitems.createtime.isNUll=请输入商品的生产日期\n```\n\n### 在pojo中添加校验规则\n\n在ItemsCustom.java中添加校验规则：\n\n```java\npublic class Items {\n    private Integer id;\n    //校验名称在1到30字符中间\n    //message是提示校验出错显示的信息\n    //groups：此校验属于哪个分组，groups可以定义多个分组\n    @Size(min=1,max=30,message=\"{items.name.length.error}\")\n    private String name;\n\n    private Float price;\n\n    private String pic;\n\n    //非空校验\n    @NotNull(message=\"{items.createtime.isNUll}\")\n    private Date createtime;\n```\n\n### 捕获和显示校验错误信息\n\n```java\n@RequestMapping(\"/editItemsSubmit\")\npublic String editItemsSubmit(\n        Model model,\n        HttpServletRequest request,\n        Integer id,\n        @Validated ItemsCustom itemsCustom,\n        BindingResult bindingResult)throws Exception {\n```\n\n- 在controller中将错误信息传到页面即可\n\n```java\n//获取校验错误信息\nif(bindingResult.hasErrors()){\n    // 输出错误信息\n    List<ObjectError> allErrors = bindingResult.getAllErrors();\n\n    for (ObjectError objectError :allErrors){\n        // 输出错误信息\n        System.out.println(objectError.getDefaultMessage());\n    }\n    // 将错误信息传到页面\n    model.addAttribute(\"allErrors\", allErrors);\n\n    //可以直接使用model将提交pojo回显到页面\n    model.addAttribute(\"items\", itemsCustom);\n\n    // 出错重新到商品修改页面\n    return \"items/editItems\";\n}\n```\n\n- 页面显示错误信息：\n\n```jsp\n<!-- 显示错误信息 -->\n<c:if test=\"${allErrors!=null }\">\n    <c:forEach items=\"${allErrors }\" var=\"error\">\n        ${ error.defaultMessage}<br/>\n    </c:forEach>\n</c:if>\n```\n\n### 分组校验\n\n- 需求：\n\n  在pojo中定义校验规则，而pojo是被多个controller所共用，当不同的controller方法对同一个pojo进行校验，但是每个controller方法需要不同的校验\n\n  解决方法：\n\n  定义多个校验分组（其实是一个java接口），分组中定义有哪些规则\n\n  每个controller方法使用不同的校验分组\n\n1.校验分组\n\n```java\npublic interface ValidGroup1 {\n    //接口中不需要定义任何方法，仅是对不同的校验规则进行分组\n    //此分组只校验商品名称长度\n\n}\n```\n\n2.在校验规则中添加分组\n\n```java\n//校验名称在1到30字符中间\n//message是提示校验出错显示的信息\n//groups：此校验属于哪个分组，groups可以定义多个分组\n@Size(min=1,max=30,message=\"{items.name.length.error}\",groups = {ValidGroup1.class})\nprivate String name;\n```\n\n3.在controller方法使用指定分组的校验\n\n```java\n// value={ValidGroup1.class}指定使用ValidGroup1分组的校验\n@RequestMapping(\"/editItemsSubmit\")\npublic String editItemsSubmit(\n        Model model,\n        HttpServletRequest request,\n        Integer id,\n        @Validated(value = ValidGroup1.class)ItemsCustom itemsCustom,\n        BindingResult bindingResult)throws Exception {\n```\n\n## 数据回显\n\n本文介绍springmvc中数据回显的几种实现方法\n\n数据回显：提交后，如果出现错误，将刚才提交的数据回显到刚才的提交页面。\n\n### pojo数据回显方法\n\n1.springmvc默认对pojo数据进行回显。\n\n**pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）**\n\n使用`@ModelAttribute`指定pojo回显到页面在request中的key\n\n2.`@ModelAttribute`还可以将方法的返回值传到页面\n\n在商品查询列表页面，通过商品类型查询商品信息。在controller中定义商品类型查询方法，最终将商品类型传到页面。\n\n```\n // 商品分类\n//itemtypes表示最终将方法返回值放在request中的key\n@ModelAttribute(\"itemtypes\")\npublic Map<String, String> getItemTypes() {\n\n    Map<String, String> itemTypes = new HashMap<String, String>();\n    itemTypes.put(\"101\", \"数码\");\n    itemTypes.put(\"102\", \"母婴\");\n\n    return itemTypes;\n}\n\n```\n\n页面上可以得到itemTypes数据。\n\n```\n<td>\n    商品名称：<input name=\"itemsCustom.name\" />\n    商品类型：\n    <select name=\"itemtype\">\n        <c:forEach items=\"${itemtypes}\" var=\"itemtype\">\n            <option value=\"${itemtype.key }\">${itemtype.value }</option>\n        </c:forEach>\n    </select>\n</td>\n\n```\n\n3.使用最简单方法使用model，可以不用`@ModelAttribute`\n\n```\n//可以直接使用model将提交pojo回显到页面\n//model.addAttribute(\"items\", itemsCustom);\n\n```\n\n### 简单类型数据回显\n\n使用最简单方法使用model\n\n`model.addAttribute(\"id\", id);`\n\n## 异常处理器\n\n本文主要介绍springmvc中异常处理的思路，并展示如何自定义异常处理类以及全局异常处理器的配置\n\n### 异常处理思路\n\n系统中异常包括两类：\n\n- 预期异常\n- 运行时异常RuntimeException\n\n前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。\n\n系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：\n\n\n\n![](https://i.imgur.com/dnlo4hb.png) \n\n### 自定义异常类\n\n对不同的异常类型定义异常类，继承Exception。\n\n```java\npackage com.iot.learnssm.firstssm.exception;\n\n/**\n * Created by brian on 2016/3/7.\n *\n * 系统 自定义异常类，针对预期的异常，需要在程序中抛出此类的异常\n */\npublic class CustomException  extends  Exception{\n    //异常信息\n    public String message;\n\n    public CustomException(String message){\n        super(message);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n}\n```\n\n### 全局异常处理器\n\n思路：\n\n系统遇到异常，在程序中手动抛出，dao抛给service、service给controller、controller抛给前端控制器，前端控制器调用全局异常处理器。\n\n全局异常处理器处理思路：\n\n解析出异常类型\n\n- 如果该异常类型是系统自定义的异常，直接取出异常信息，在错误页面展示\n- 如果该异常类型不是系统自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）\n\nspringmvc提供一个`HandlerExceptionResolver`接口\n\n```java\n   public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        //handler就是处理器适配器要执行Handler对象（只有method）\n        //解析出异常类型\n        //如果该 异常类型是系统 自定义的异常，直接取出异常信息，在错误页面展示\n        //String message = null;\n        //if(ex instanceof CustomException){\n            //message = ((CustomException)ex).getMessage();\n        //}else{\n            ////如果该 异常类型不是系统 自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）\n            //message=\"未知错误\";\n        //}\n\n        //上边代码变为\n        CustomException customException;\n        if(ex instanceof CustomException){\n            customException = (CustomException)ex;\n        }else{\n            customException = new CustomException(\"未知错误\");\n        }\n\n        //错误信息\n        String message = customException.getMessage();\n\n        ModelAndView modelAndView = new ModelAndView();\n\n        //将错误信息传到页面\n        modelAndView.addObject(\"message\", message);\n\n        //指向错误页面\n        modelAndView.setViewName(\"error\");\n\n        return modelAndView;\n\n    }\n}\n```\n\n### 错误页面\n\n```jsp\n<%--\n  Created by IntelliJ IDEA.\n  User: Brian\n  Date: 2016/3/4\n  Time: 10:51\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>错误提示</title>\n</head>\n<body>\n${message}\n</body>\n</html>\n```\n\n### 在springmvc.xml配置全局异常处理器\n\n```xml\n<!-- 全局异常处理器\n只要实现HandlerExceptionResolver接口就是全局异常处理器\n-->\n<bean class=\"com.iot.learnssm.firstssm.exception.CustomExceptionResolver\"></bean>\n```\n\n全局异常处理器只有一个，配置多个也没用。\n\n### 异常测试\n\n在controller、service、dao中任意一处需要手动抛出异常。如果是程序中手动抛出的异常，在错误页面中显示自定义的异常信息，如果不是手动抛出异常说明是一个运行时异常，在错误页面只显示“未知错误”。\n\n- 在商品修改的controller方法中抛出异常 .\n\n```java\npublic String editItems(Model model,@RequestParam(value=\"id\",required=true) Integer items_id)throws Exception {\n\n    //调用service根据商品id查询商品信息\n    ItemsCustom itemsCustom = itemsService.findItemsById(items_id);\n\n    //判断商品是否为空，根据id没有查询到商品，抛出异常，提示用户商品信息不存在\n    if(itemsCustom == null){\n        throw new CustomException(\"修改的商品信息不存在!\");\n    }\n\n    //通过形参中的model将model数据传到页面\n    //相当于modelAndView.addObject方法\n    model.addAttribute(\"items\", itemsCustom);\n\n    return \"items/editItems\";\n}\n```\n\n- 在service接口中抛出异常：\n\n```java\npublic ItemsCustom findItemsById(Integer id) throws Exception {\n    Items items = itemsMapper.selectByPrimaryKey(id);\n    if(items==null){\n        throw new CustomException(\"修改的商品信息不存在!\");\n    }\n    //中间对商品信息进行业务处理\n    //....\n    //返回ItemsCustom\n    ItemsCustom itemsCustom = null;\n    //将items的属性值拷贝到itemsCustom\n    if(items!=null){\n        itemsCustom = new ItemsCustom();\n        BeanUtils.copyProperties(items, itemsCustom);\n    }\n\n    return itemsCustom;\n}\n```\n\n- 如果与业务功能相关的异常，建议在service中抛出异常。\n- 与业务功能没有关系的异常，建议在controller中抛出。\n\n## 上传图片\n\n在修改商品页面，添加上传商品图片功能。\n\n在页面form中提交`enctype=\"multipart/form-data\"`的数据时，需要springmvc对multipart类型的数据进行解析。\n\n在springmvc.xml中配置multipart类型解析器。\n\n```xml\n<!-- 文件上传 -->\n<bean id=\"multipartResolver\"\n      class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n    <!-- 设置上传文件的最大尺寸为5MB -->\n    <property name=\"maxUploadSize\">\n        <value>5242880</value>\n    </property>\n</bean>\n```\n\n### 加入上传图片的jar\n\n添加依赖\n\n```xml\n<!-- 文件上传 -->\n<dependency>\n    <groupId>commons-fileupload</groupId>\n    <artifactId>commons-fileupload</artifactId>\n    <version>1.3.1</version>\n</dependency>\n```\n\n依赖树\n\n```properties\n[INFO] \\- commons-fileupload:commons-fileupload:jar:1.3.1:compile\n[INFO]    \\- commons-io:commons-io:jar:2.2:compile12\n```\n\n可以看到，其实还间接依赖了`commons-io:commons-io:jar`\n\n### 创建图片虚拟目录存储图片IDEA\n\n我使用的版本为\n\n- tomcat 8.0.30\n- intellij 15.0.2\n- jdk 1.8.0_25\n\n已经部署好了一个web应用，并且已经在IDEA中添加好了tomcat容器，现在想为这个web应用添加一个图片虚拟目录\n\n#### 1.点击工具栏的运行配置`Edit Configurations`\n\n![](https://i.imgur.com/qy1gIOI.png) \n\n#### 2.在弹出的`Run/debug Configurations`中选中tomcat容器，选择`deployment`这个tab\n\n![](https://i.imgur.com/X02XsEN.png)\n\n#### 3.添加物理目录和并设置虚拟目录路径\n\n![](https://i.imgur.com/EoI2QPe.png)\n\n这里我选择了D盘下面的tmp文件夹作为物理目录，虚拟目录设为了`/pic`,我试了下，虽然斜杠少了也没什么影响，一样能访问，不过还是建议加上吧。\n\n#### 4.运行web应用，访问图片资源\n\n这里需要接上具体访问资源的文件名，不然后访问不到的，如下图\n\n![](https://i.imgur.com/33h4wXP.png) \n\n### tomcat配置虚拟目录映射\n\n#### 一、在Server.xml中进行配置\n\n在<Host>元素中添加子元素<Context path=\" ...  \"     docBase=\" ... \"/> 并重启服务器即可；\n\npath表示虚拟目录，docBase表示真实的web应用所在目录；\n\n比如在C盘中存在a这个web应用,则 <Context path=\"/test\" docBase=\"C:\\a\"/>\n\n则输入 <http://localhost:8888/test/1.html> 就能访问到a文件夹下的 1.html\n\n注意：这种方法需要重启服务器才能够生效，所以不适用，因为每次添加一个web应用都需要重启服务器。\n\n#### 二、最佳配置方法\n\n`$CATALINA_BASE/conf/catalina/localhost/ 文件夹下创建一个xml文件，任意文件名都可以，但是此文件名是web应用发布后的虚拟目录；`\n\n`比如创建一个test.xml ，在文件中添加 <Context docBase=\"C:\\a\"/>`\n\n不需要重启服务器，只需要在浏览器中输入 <http://localhost:8888/test/1.html> 即可访问C:\\a\\1.html   ；\n\n#### 三、配置默认web应用\n\n一般，输入 [http://localhost:8080](http://localhost:8080/) 后都会跳出 tomcat的主页，因为这个tomcat的web应用就是默认的web应用，如果想将自己的web应用配置成默认的web应用，只需要在Server.xml中的<Context>元素中为 <Context path=\"\" docBase=\"C:\\a\"/> \n\n或者将test.xml改成 ROOT.xml 即可；\n\n输入 <http://localhost:8080/1.html> 就能访问C:\\a\\1.html ;\n\n注意：在图片虚拟目录中，一定将图片目录分级创建（提高i/o性能），一般我们采用按日期(年、月、日)进行分级创建。\n\n### 上传图片代码\n\n```jsp\n<tr>\n    <td>商品图片</td>\n    <td>\n        <c:if test=\"${items.pic !=null}\">\n            <img src=\"/pic/${items.pic}\" width=100 height=100/>\n            <br/>\n        </c:if>\n        <input type=\"file\"  name=\"items_pic\"/>\n    </td>\n</tr>\n```\n\n- controller方法\n\n修改：商品修改controller方法：\n\n```java\n@RequestMapping(\"/editItemsSubmit\")\n    public String editItemsSubmit(\n            Model model,\n            HttpServletRequest request,\n            Integer id,\n            @ModelAttribute(\"items\")\n            @Validated(value = ValidGroup1.class)ItemsCustom itemsCustom,\n            BindingResult bindingResult,\n            MultipartFile items_pic\n    )throws Exception {12345678910\n //原始名称\nString originalFilename = items_pic.getOriginalFilename();\n//上传图片\nif(items_pic!=null && originalFilename!=null && originalFilename.length()>0){\n\n    //存储图片的物理路径\n    String pic_path = \"D:\\\\tmp\\\\\";\n\n\n    //新的图片名称\n    String newFileName = UUID.randomUUID() + originalFilename.substring(originalFilename.lastIndexOf(\".\"));\n    //新图片\n    File newFile = new File(pic_path+newFileName);\n\n    //将内存中的数据写入磁盘\n    items_pic.transferTo(newFile);\n\n    //将新图片名称写到itemsCustom中\n    itemsCustom.setPic(newFileName);\n\n}\n```\n\n## json数据交互\n\n本文主要介绍如何在springmvc中进行json数据的交互，先是环境准备和配置，然后分别展示了“输入json串，输出是json串”和“输入key/value，输出是json串”两种情况下的交互\n\n### springmvc进行json交互\n\njson数据格式在接口调用中、html页面中较常用，json格式比较简单，解析还比较方便。\n\n比如：webservice接口，传输json数据.\n\n![](https://i.imgur.com/efNlNLt.png) \n\n- 请求json、输出json，要求请求的是json串，所以在前端页面中需要将请求的内容转成json，不太方便。\n\n- 请求key/value、输出json。此方法比较常用。\n\n  ### 环境准备\n\n  #### 添加json转换的依赖\n\n  最开始我少了`jackson-databind`依赖，程序各种报错。\n\n  ```xml\n  <!-- json 转换-->\n  <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.7.2</version>\n  </dependency>\n  \n  <dependency>\n      <groupId>org.codehaus.jackson</groupId>\n      <artifactId>jackson-mapper-asl</artifactId>\n      <version>1.9.13</version>\n  </dependency>\n  ```\n\n  依赖树 \n\n  ```properties\n  [INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.2:compile\n  [INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.0:compile\n  [INFO] |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.7.2:compile\n  [INFO] \\- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile\n  [INFO]    \\- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile\n  ```\n\n  #### 配置json转换器\n\n  在注解适配器中加入`messageConverters`\n\n```xml\n<!--注解适配器 -->\n<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\">\n    <property name=\"messageConverters\">\n    <list>\n    <bean class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"></bean>\n    </list>\n    </property>\n</bean>\n```\n\n**注意：如果使用<mvc:annotation-driven />则不用定义上边的内容。** \n\n#### json交互测试\n\n显示两个按钮分别测试\n\n- jsp页面\n\n```jsp\n<%--\n  Created by IntelliJ IDEA.\n  User: brian\n  Date: 2016/3/7\n  Time: 20:49\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>json交互测试</title>\n    <script type=\"text/javascript\" src=\"${pageContext.request.contextPath }/js/jquery-1.4.4.min.js\"></script>\n    <script type=\"text/javascript\">\n        //请求json，输出是json\n        function requestJson(){     省略    }\n        //请求key/value，输出是json\n        function responseJson(){    省略    }\n    </script>\n</head>\n<body>\n<input type=\"button\" onclick=\"requestJson()\" value=\"请求json，输出是json\"/>\n<input type=\"button\" onclick=\"responseJson()\" value=\"请求key/value，输出是json\"/>\n</body>\n\n```\n\n- controller\n\n```java\n@Controller\npublic class JsonTest {\n    省略\n}\n```\n\n- 测试结果\n\n#### 输入json串，输出是json串\n\n使用jquery的ajax提交json串，对输出的json结果进行解析。\n\n- jsp页面\n\n```javascript\n//请求json，输出是json\nfunction requestJson(){\n\n    $.ajax({\n        type:'post',\n        url:'${pageContext.request.contextPath }/requestJson.action',\n        contentType:'application/json;charset=utf-8',\n        //数据格式是json串，商品信息\n        data:'{\"name\":\"手机\",\"price\":999}',\n        success:function(data){//返回json结果\n            alert(data);\n        }\n\n    });\n\n}\n```\n\n- controller\n\n```java\n //请求json串(商品信息)，输出json(商品信息)\n//@RequestBody将请求的商品信息的json串转成itemsCustom对象\n//@ResponseBody将itemsCustom转成json输出\n@RequestMapping(\"/requestJson\")\npublic @ResponseBody ItemsCustom requestJson(@RequestBody ItemsCustom itemsCustom){\n\n    //@ResponseBody将itemsCustom转成json输出\n    return itemsCustom;\n}\n```\n\n![](https://i.imgur.com/JaRziR3.png) \n\n可以看到，request和response的HTTP头的Content-Type都是`application/json;charset=utf-8`\n\n![请求json，返回json,response的body](http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json-request-json-2.png)\n\n### 输入key/value，输出是json串\n\n使用jquery的ajax提交key/value串，对输出的json结果进行解析\n\n- jsp页面\n\n```javascript\n//请求key/value，输出是json\nfunction responseJson(){\n\n    $.ajax({\n        type:'post',\n        url:'${pageContext.request.contextPath }/responseJson.action',\n        //请求是key/value这里不需要指定contentType，因为默认就 是key/value类型\n        //contentType:'application/json;charset=utf-8',\n        //数据格式是json串，商品信息\n        data:'name=手机&price=999',\n        success:function(data){//返回json结果\n            alert(data.name);\n        }\n\n    });\n\n}\n```\n\n- controller\n\n```java\n //请求key/value，输出json\n@RequestMapping(\"/responseJson\")\npublic @ResponseBody ItemsCustom responseJson(ItemsCustom itemsCustom){\n\n    //@ResponseBody将itemsCustom转成json输出\n    return itemsCustom;\n}\n```\n\n![](https://i.imgur.com/BWxt2wC.png) \n\n可以看到，key/value键值对的默认Content-Type是`application/x-www-form-urlencoded`,同时，我们收到了响应“手机” ","source":"_posts/SpringMVC笔记（10）.md","raw":"---\ntitle: SpringMVC笔记（10）\ndate: 2018-07-12 23:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n\n## 修改范例\n\n操作流程：\n\n1.进入商品查询列表页面\n\n2.点击修改，进入商品修改页面，页面中显示了要修改的商品。要修改的商品从数据库查询，根据商品id(主键)查询商品信息\n\n3.在商品修改页面，修改商品信息，修改后，点击提交\n\n### 开发mapper\n\nmapper：\n\n根据id查询商品信息\n\n根据id更新Items表的数据\n\n不用开发了，使用逆向工程生成的代码。\n\n### 开发service\n\n在`com.iot.learnssm.firstssm.service.ItemsService`中添加两个接口\n\n```java\n  //根据id查询商品信息\n    /**\n     *\n     * <p>Title: findItemsById</p>\n     * <p>Description: </p>\n     * @param id 查询商品的id\n     * @return\n     * @throws Exception\n     */\n     ItemsCustom findItemsById(Integer id) throws Exception;\n\n    //修改商品信息\n    /**\n     *\n     * <p>Title: updateItems</p>\n     * <p>Description: </p>\n     * @param id 修改商品的id\n     * @param itemsCustom 修改的商品信息\n     * @throws Exception\n     */\n     void updateItems(Integer id,ItemsCustom itemsCustom) throws Exception;\n12345678910111213141516171819202122\n```\n\n在`com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl`中实现接口，增加`itemsMapper`属性\n\n```java\n@Autowired\nprivate ItemsMapper itemsMapper;\n\npublic ItemsCustom findItemsById(Integer id) throws Exception {\n    Items items = itemsMapper.selectByPrimaryKey(id);\n    //中间对商品信息进行业务处理\n    //....\n    //返回ItemsCustom\n    ItemsCustom itemsCustom = new ItemsCustom();\n    //将items的属性值拷贝到itemsCustom\n    BeanUtils.copyProperties(items, itemsCustom);\n\n    return itemsCustom;\n}\n\npublic void updateItems(Integer id, ItemsCustom itemsCustom) throws Exception {\n    //添加业务校验，通常在service接口对关键参数进行校验\n    //校验 id是否为空，如果为空抛出异常\n\n    //更新商品信息使用updateByPrimaryKeyWithBLOBs根据id更新items表中所有字段，包括 大文本类型字段\n    //updateByPrimaryKeyWithBLOBs要求必须转入id\n    itemsCustom.setId(id);\n    itemsMapper.updateByPrimaryKeyWithBLOBs(itemsCustom);\n}\n```\n\n### 开发controller\n\n方法：\n\n​    商品信息修改页面显示\n\n​    商品信息修改提交\n\n```java\n//使用@Controller来标识它是一个控制器\n@Controller\n//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径\n//比如：商品列表：/items/queryItems.action\n//@RequestMapping(\"/items\")\npublic class ItemsController {\n\n    @Autowired\n    private ItemsService itemsService;\n\n    //商品查询列表\n    @RequestMapping(\"/queryItems\")\n    //实现 对queryItems方法和url进行映射，一个方法对应一个url\n    //一般建议将url和方法写成一样\n    public ModelAndView queryItems() throws Exception{\n        //调用service查找数据库，查询商品列表\n        List<ItemsCustom> itemsList = itemsService.findItemsList(null);\n\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //相当于request的setAttribute方法,在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\",itemsList);\n\n        //指定视图\n        //下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList\n        //modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n        //下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀\n        modelAndView.setViewName(\"items/itemsList\");\n\n        return modelAndView;\n    }\n\n\n    //商品信息修改页面显示\n    @RequestMapping(\"/editItems\")\n    //限制http请求方法，可以post和get\n    //@RequestMapping(value=\"/editItems\",method={RequestMethod.POST, RequestMethod.GET})\n    public ModelAndView editItems()throws Exception {\n\n        //调用service根据商品id查询商品信息\n        ItemsCustom itemsCustom = itemsService.findItemsById(1);\n\n        // 返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n\n        //将商品信息放到model\n        modelAndView.addObject(\"itemsCustom\", itemsCustom);\n\n        //商品修改页面\n        modelAndView.setViewName(\"items/editItems\");\n\n        return modelAndView;\n    }\n\n    //商品信息修改提交\n    @RequestMapping(\"/editItemsSubmit\")\n    public ModelAndView editItemsSubmit(HttpServletRequest request, Integer id, ItemsCustom itemsCustom)throws Exception {\n\n        //调用service更新商品信息，页面需要将商品信息传到此方法\n        itemsService.updateItems(id, itemsCustom);\n\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //返回一个成功页面\n        modelAndView.setViewName(\"success\");\n        return modelAndView;\n    }\n\n}\n```\n\n### @RequestMapping`\n\n- url映射\n\n定义controller方法对应的url，进行处理器映射使用。\n\n- 窄化请求映射\n\n```java\n//使用@Controller来标识它是一个控制器\n@Controller\n//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径\n//比如：商品列表：/items/queryItems.action\n@RequestMapping(\"/items\")\npublic class ItemsController {\n```\n\n- 限制http请求方法\n\n出于安全性考虑，对http的链接进行方法限制。\n\n```java\n//商品信息修改页面显示\n    //@RequestMapping(\"/editItems\")\n    //限制http请求方法，可以post和get\n    @RequestMapping(value=\"/editItems\",method={RequestMethod.POST, RequestMethod.GET})\n    public ModelAndView editItems()throws Exception {\n```\n\n如果限制请求为post方法，进行get请求，即将上面代码的注解改为`@RequestMapping(value=\"/editItems\",method={RequestMethod.POST})`\n\n报错，状态码405：\n\n![](https://i.imgur.com/yrIoRte.png) \n\ncontroller方法的返回值\n\n返回`ModelAndView`\n\n需要方法结束时，定义ModelAndView，将model和view分别进行设置。\n\n返回string\n\n如果controller方法返回string\n\n1.表示返回逻辑视图名。\n\n真正视图(jsp路径)=前缀+逻辑视图名+后缀\n\n```java\n@RequestMapping(value=\"/editItems\",method={RequestMethod.POST,RequestMethod.GET})\n//@RequestParam里边指定request传入参数名称和形参进行绑定。\n//通过required属性指定参数是否必须要传入\n//通过defaultValue可以设置默认值，如果id参数没有传入，将默认值和形参绑定。\n//public String editItems(Model model, @RequestParam(value=\"id\",required=true) Integer items_id)throws Exception {\npublic String editItems(Model model)throws Exception {\n\n    //调用service根据商品id查询商品信息\n    ItemsCustom itemsCustom = itemsService.findItemsById(1);\n\n    //通过形参中的model将model数据传到页面\n    //相当于modelAndView.addObject方法\n    model.addAttribute(\"itemsCustom\", itemsCustom);\n\n    return \"items/editItems\";\n}\n```\n\n2.redirect重定向\n\n商品修改提交后，重定向到商品查询列表。\n\nredirect重定向特点：浏览器地址栏中的url会变化。修改提交的request数据无法传到重定向的地址。因为重定向后重新进行request（request无法共享）\n\n```\n//重定向到商品查询列表\n//return \"redirect:queryItems.action\";\n\n```\n\n3.forward页面转发\n\n通过forward进行页面转发，浏览器地址栏url不变，request可以共享。\n\n```java\n//页面转发\nreturn \"forward:queryItems.action\";\n```\n\n- 返回void\n\n在controller方法形参上可以定义request和response，使用request或response指定响应结果：\n\n1.使用request转向页面，如下：\n\n`request.getRequestDispatcher(\"页面路径\").forward(request, response);`\n\n2.也可以通过response页面重定向：\n\n`response.sendRedirect(\"url\")`\n\n3.也可以通过response指定响应结果，例如响应json数据如下：\n\n```java\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setContentType(\"application/json;charset=utf-8\");\nresponse.getWriter().write(\"json串\");\n```\n\n## 注解开发之集合类型参数绑定\n\n本文主要介绍注解开发的集合类型参数绑定，包括数组绑定，list绑定以及map绑定\n\n### 数组绑定\n\n### 需求\n\n商品批量删除，用户在页面选择多个商品，批量删除。\n\n### 表现层实现\n\n关键：将页面选择(多选)的商品id，传到controller方法的形参，方法形参使用数组接收页面请求的多个商品id。\n\n- controller方法定义：\n\n```java\n// 批量删除 商品信息\n@RequestMapping(\"/deleteItems\")\npublic String deleteItems(Integer[] items_id) throws Exception\n```\n\n- 页面定义：\n\n```jsp\n<c:forEach items=\"${itemsList }\" var=\"item\">\n<tr>\n    <td><input type=\"checkbox\" name=\"items_id\" value=\"${item.id}\"/></td>\n    <td>${item.name }</td>\n    <td>${item.price }</td>\n    <td><fmt:formatDate value=\"${item.createtime}\" pattern=\"yyyy-MM-dd HH:mm:ss\"/></td>\n    <td>${item.detail }</td>\n\n    <td><a href=\"${pageContext.request.contextPath }/items/editItems.action?id=${item.id}\">修改</a></td>\n\n</tr>\n</c:forEach>\n```\n\n## list绑定\n\n### 需求\n\n通常在需要批量提交数据时，将提交的数据绑定到`list<pojo>`中，比如：成绩录入（录入多门课成绩，批量提交），\n\n本例子需求：批量商品修改，在页面输入多个商品信息，将多个商品信息提交到controller方法中。\n\n### 表现层实现\n\n- controller方法定义：\n  - 1、进入批量商品修改页面(页面样式参考商品列表实现)\n  - 2、批量修改商品提交\n\n使用List接收页面提交的批量数据，通过包装pojo接收，在包装pojo中定义`list<pojo>`属性\n\n```java\npublic class ItemsQueryVo {\n\n    //商品信息\n    private Items items;\n\n    //为了系统 可扩展性，对原始生成的po进行扩展\n    private ItemsCustom itemsCustom;\n\n    //批量商品信息\n    private List<ItemsCustom> itemsList;\n```\n\n```java\n// 批量修改商品提交\n// 通过ItemsQueryVo接收批量提交的商品信息，将商品信息存储到itemsQueryVo中itemsList属性中。\n@RequestMapping(\"/editItemsAllSubmit\")\npublic String editItemsAllSubmit(ItemsQueryVo itemsQueryVo) throws Exception {\n\n    return \"success\";\n}\n```\n\n- 页面定义：\n\n```jsp\n<c:forEach items=\"${itemsList }\" var=\"item\" varStatus=\"status\">\n    <tr>\n\n        <td><input name=\"itemsList[${status.index }].name\" value=\"${item.name }\"/></td>\n        <td><input name=\"itemsList[${status.index }].price\" value=\"${item.price }\"/></td>\n        <td><input name=\"itemsList[${status.index }].createtime\" value=\"<fmt:formatDate value=\"${item.createtime}\" pattern=\"yyyy-MM-dd HH:mm:ss\"/>\"/></td>\n        <td><input name=\"itemsList[${status.index }].detail\" value=\"${item.detail }\"/></td>\n\n    </tr>\n</c:forEach>\n```\n\nname的格式：\n\n**对应包装pojo中的list类型属性名[下标(从0开始)].包装pojo中List类型的属性中pojo的属性名**\n\n例子：\n\n`\"name=\"itemsList[${status.index }].price\"`\n\n*可以和包装类型的参数绑定归纳对比一下，其实就是在包装类的pojo基础上多了个下标。只不过包装类参数绑定时，要和包装pojo中的pojo类性的属性名一致，而list参数绑定时，要和包装pojo中的list类型的属性名一致。*\n\n### map绑定\n\n也通过在包装pojo中定义map类型属性。\n\n在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。\n\n- 包装类中定义Map对象如下：\n\n```java\nPublic class QueryVo {\nprivate Map<String, Object> itemInfo = new HashMap<String, Object>();\n  //get/set方法..\n}\n```\n\n- 页面定义如下：\n\n```jsp\n<tr>\n<td>学生信息：</td>\n<td>\n姓名：<inputtype=\"text\"name=\"itemInfo['name']\"/>\n年龄：<inputtype=\"text\"name=\"itemInfo['price']\"/>\n.. .. ..\n</td>\n</tr>\n```\n\n- Contrller方法定义如下：\n\n```java\npublic String useraddsubmit(Model model,QueryVo queryVo)throws Exception{\nSystem.out.println(queryVo.getStudentinfo());\n}\n```\n\n## springmvc校验\n\n本文主要介绍springmvc校验，包括环境准备，校验器配置，pojo张添加校验规则，捕获和显示检验错误信息以及分组校验简单示例。\n\n### 校验理解\n\n项目中，通常使用较多是前端的校验，比如页面中js校验。对于安全要求较高点建议在服务端进行校验。\n\n服务端校验：\n\n- 控制层conroller：校验页面请求的参数的合法性。在服务端控制层conroller校验，不区分客户端类型（浏览器、手机客户端、远程调用）\n- 业务层service（使用较多）：主要校验关键业务参数，仅限于service接口中使用的参数。\n- 持久层dao：一般是不校验的。\n\n### springmvc校验需求\n\nspringmvc使用hibernate的校验框架validation(和hibernate没有任何关系)。\n\n校验思路：\n\n页面提交请求的参数，请求到controller方法中，使用validation进行校验。如果校验出错，将错误信息展示到页面。\n\n具体需求：\n\n商品修改，添加校验（校验商品名称长度，生产日期的非空校验），如果校验出错，在商品修改页面显示错误信息。\n\n### 环境准备\n\n我们需要三个jar包：\n\n- hibernate-validator.jar\n- jboss-logging.jar\n- validation-api.jar\n\n这里我们添加maven依赖\n\n```xml\n<!-- hibernate 校验 -->\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-validator</artifactId>\n    <version>5.2.4.Final</version>\n</dependency>\n```\n\n可以看到，另外两个jar包被`hibernate-validator`依赖，所以不用再额外添加了。\n\n### 配置校验器\n\n- 在springmvc.xml中添加\n\n  ```xml\n  <!-- 校验器 -->\n  <bean id=\"validator\"\n        class=\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\">\n      <!-- hibernate校验器-->\n      <property name=\"providerClass\" value=\"org.hibernate.validator.HibernateValidator\" />\n      <!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->\n      <property name=\"validationMessageSource\" ref=\"messageSource\" />\n  </bean>\n  <!-- 校验错误信息配置文件 -->\n  <bean id=\"messageSource\"\n        class=\"org.springframework.context.support.ReloadableResourceBundleMessageSource\">\n      <!-- 资源文件名-->\n      <property name=\"basenames\">\n          <list>\n              <value>classpath:CustomValidationMessages</value>\n          </list>\n      </property>\n      <!-- 资源文件编码格式 -->\n      <property name=\"fileEncodings\" value=\"utf-8\" />\n      <!-- 对资源文件内容缓存时间，单位秒 -->\n      <property name=\"cacheSeconds\" value=\"120\" />\n  </bean>\n  ```\n\n  校验器注入到处理器适配器中\n\n  ```xml\n  <mvc:annotation-driven conversion-service=\"conversionService\" validator=\"validator\">\n  </mvc:annotation-driven>\n  ```\n\n 在CustomValidationMessages.properties配置校验错误信息：\n\n```properties\n#添加校验的错误提示信息\nitems.name.length.error=请输入1到30个字符的商品名称\nitems.createtime.isNUll=请输入商品的生产日期\n```\n\n### 在pojo中添加校验规则\n\n在ItemsCustom.java中添加校验规则：\n\n```java\npublic class Items {\n    private Integer id;\n    //校验名称在1到30字符中间\n    //message是提示校验出错显示的信息\n    //groups：此校验属于哪个分组，groups可以定义多个分组\n    @Size(min=1,max=30,message=\"{items.name.length.error}\")\n    private String name;\n\n    private Float price;\n\n    private String pic;\n\n    //非空校验\n    @NotNull(message=\"{items.createtime.isNUll}\")\n    private Date createtime;\n```\n\n### 捕获和显示校验错误信息\n\n```java\n@RequestMapping(\"/editItemsSubmit\")\npublic String editItemsSubmit(\n        Model model,\n        HttpServletRequest request,\n        Integer id,\n        @Validated ItemsCustom itemsCustom,\n        BindingResult bindingResult)throws Exception {\n```\n\n- 在controller中将错误信息传到页面即可\n\n```java\n//获取校验错误信息\nif(bindingResult.hasErrors()){\n    // 输出错误信息\n    List<ObjectError> allErrors = bindingResult.getAllErrors();\n\n    for (ObjectError objectError :allErrors){\n        // 输出错误信息\n        System.out.println(objectError.getDefaultMessage());\n    }\n    // 将错误信息传到页面\n    model.addAttribute(\"allErrors\", allErrors);\n\n    //可以直接使用model将提交pojo回显到页面\n    model.addAttribute(\"items\", itemsCustom);\n\n    // 出错重新到商品修改页面\n    return \"items/editItems\";\n}\n```\n\n- 页面显示错误信息：\n\n```jsp\n<!-- 显示错误信息 -->\n<c:if test=\"${allErrors!=null }\">\n    <c:forEach items=\"${allErrors }\" var=\"error\">\n        ${ error.defaultMessage}<br/>\n    </c:forEach>\n</c:if>\n```\n\n### 分组校验\n\n- 需求：\n\n  在pojo中定义校验规则，而pojo是被多个controller所共用，当不同的controller方法对同一个pojo进行校验，但是每个controller方法需要不同的校验\n\n  解决方法：\n\n  定义多个校验分组（其实是一个java接口），分组中定义有哪些规则\n\n  每个controller方法使用不同的校验分组\n\n1.校验分组\n\n```java\npublic interface ValidGroup1 {\n    //接口中不需要定义任何方法，仅是对不同的校验规则进行分组\n    //此分组只校验商品名称长度\n\n}\n```\n\n2.在校验规则中添加分组\n\n```java\n//校验名称在1到30字符中间\n//message是提示校验出错显示的信息\n//groups：此校验属于哪个分组，groups可以定义多个分组\n@Size(min=1,max=30,message=\"{items.name.length.error}\",groups = {ValidGroup1.class})\nprivate String name;\n```\n\n3.在controller方法使用指定分组的校验\n\n```java\n// value={ValidGroup1.class}指定使用ValidGroup1分组的校验\n@RequestMapping(\"/editItemsSubmit\")\npublic String editItemsSubmit(\n        Model model,\n        HttpServletRequest request,\n        Integer id,\n        @Validated(value = ValidGroup1.class)ItemsCustom itemsCustom,\n        BindingResult bindingResult)throws Exception {\n```\n\n## 数据回显\n\n本文介绍springmvc中数据回显的几种实现方法\n\n数据回显：提交后，如果出现错误，将刚才提交的数据回显到刚才的提交页面。\n\n### pojo数据回显方法\n\n1.springmvc默认对pojo数据进行回显。\n\n**pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）**\n\n使用`@ModelAttribute`指定pojo回显到页面在request中的key\n\n2.`@ModelAttribute`还可以将方法的返回值传到页面\n\n在商品查询列表页面，通过商品类型查询商品信息。在controller中定义商品类型查询方法，最终将商品类型传到页面。\n\n```\n // 商品分类\n//itemtypes表示最终将方法返回值放在request中的key\n@ModelAttribute(\"itemtypes\")\npublic Map<String, String> getItemTypes() {\n\n    Map<String, String> itemTypes = new HashMap<String, String>();\n    itemTypes.put(\"101\", \"数码\");\n    itemTypes.put(\"102\", \"母婴\");\n\n    return itemTypes;\n}\n\n```\n\n页面上可以得到itemTypes数据。\n\n```\n<td>\n    商品名称：<input name=\"itemsCustom.name\" />\n    商品类型：\n    <select name=\"itemtype\">\n        <c:forEach items=\"${itemtypes}\" var=\"itemtype\">\n            <option value=\"${itemtype.key }\">${itemtype.value }</option>\n        </c:forEach>\n    </select>\n</td>\n\n```\n\n3.使用最简单方法使用model，可以不用`@ModelAttribute`\n\n```\n//可以直接使用model将提交pojo回显到页面\n//model.addAttribute(\"items\", itemsCustom);\n\n```\n\n### 简单类型数据回显\n\n使用最简单方法使用model\n\n`model.addAttribute(\"id\", id);`\n\n## 异常处理器\n\n本文主要介绍springmvc中异常处理的思路，并展示如何自定义异常处理类以及全局异常处理器的配置\n\n### 异常处理思路\n\n系统中异常包括两类：\n\n- 预期异常\n- 运行时异常RuntimeException\n\n前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。\n\n系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：\n\n\n\n![](https://i.imgur.com/dnlo4hb.png) \n\n### 自定义异常类\n\n对不同的异常类型定义异常类，继承Exception。\n\n```java\npackage com.iot.learnssm.firstssm.exception;\n\n/**\n * Created by brian on 2016/3/7.\n *\n * 系统 自定义异常类，针对预期的异常，需要在程序中抛出此类的异常\n */\npublic class CustomException  extends  Exception{\n    //异常信息\n    public String message;\n\n    public CustomException(String message){\n        super(message);\n        this.message = message;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n}\n```\n\n### 全局异常处理器\n\n思路：\n\n系统遇到异常，在程序中手动抛出，dao抛给service、service给controller、controller抛给前端控制器，前端控制器调用全局异常处理器。\n\n全局异常处理器处理思路：\n\n解析出异常类型\n\n- 如果该异常类型是系统自定义的异常，直接取出异常信息，在错误页面展示\n- 如果该异常类型不是系统自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）\n\nspringmvc提供一个`HandlerExceptionResolver`接口\n\n```java\n   public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {\n        //handler就是处理器适配器要执行Handler对象（只有method）\n        //解析出异常类型\n        //如果该 异常类型是系统 自定义的异常，直接取出异常信息，在错误页面展示\n        //String message = null;\n        //if(ex instanceof CustomException){\n            //message = ((CustomException)ex).getMessage();\n        //}else{\n            ////如果该 异常类型不是系统 自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）\n            //message=\"未知错误\";\n        //}\n\n        //上边代码变为\n        CustomException customException;\n        if(ex instanceof CustomException){\n            customException = (CustomException)ex;\n        }else{\n            customException = new CustomException(\"未知错误\");\n        }\n\n        //错误信息\n        String message = customException.getMessage();\n\n        ModelAndView modelAndView = new ModelAndView();\n\n        //将错误信息传到页面\n        modelAndView.addObject(\"message\", message);\n\n        //指向错误页面\n        modelAndView.setViewName(\"error\");\n\n        return modelAndView;\n\n    }\n}\n```\n\n### 错误页面\n\n```jsp\n<%--\n  Created by IntelliJ IDEA.\n  User: Brian\n  Date: 2016/3/4\n  Time: 10:51\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>错误提示</title>\n</head>\n<body>\n${message}\n</body>\n</html>\n```\n\n### 在springmvc.xml配置全局异常处理器\n\n```xml\n<!-- 全局异常处理器\n只要实现HandlerExceptionResolver接口就是全局异常处理器\n-->\n<bean class=\"com.iot.learnssm.firstssm.exception.CustomExceptionResolver\"></bean>\n```\n\n全局异常处理器只有一个，配置多个也没用。\n\n### 异常测试\n\n在controller、service、dao中任意一处需要手动抛出异常。如果是程序中手动抛出的异常，在错误页面中显示自定义的异常信息，如果不是手动抛出异常说明是一个运行时异常，在错误页面只显示“未知错误”。\n\n- 在商品修改的controller方法中抛出异常 .\n\n```java\npublic String editItems(Model model,@RequestParam(value=\"id\",required=true) Integer items_id)throws Exception {\n\n    //调用service根据商品id查询商品信息\n    ItemsCustom itemsCustom = itemsService.findItemsById(items_id);\n\n    //判断商品是否为空，根据id没有查询到商品，抛出异常，提示用户商品信息不存在\n    if(itemsCustom == null){\n        throw new CustomException(\"修改的商品信息不存在!\");\n    }\n\n    //通过形参中的model将model数据传到页面\n    //相当于modelAndView.addObject方法\n    model.addAttribute(\"items\", itemsCustom);\n\n    return \"items/editItems\";\n}\n```\n\n- 在service接口中抛出异常：\n\n```java\npublic ItemsCustom findItemsById(Integer id) throws Exception {\n    Items items = itemsMapper.selectByPrimaryKey(id);\n    if(items==null){\n        throw new CustomException(\"修改的商品信息不存在!\");\n    }\n    //中间对商品信息进行业务处理\n    //....\n    //返回ItemsCustom\n    ItemsCustom itemsCustom = null;\n    //将items的属性值拷贝到itemsCustom\n    if(items!=null){\n        itemsCustom = new ItemsCustom();\n        BeanUtils.copyProperties(items, itemsCustom);\n    }\n\n    return itemsCustom;\n}\n```\n\n- 如果与业务功能相关的异常，建议在service中抛出异常。\n- 与业务功能没有关系的异常，建议在controller中抛出。\n\n## 上传图片\n\n在修改商品页面，添加上传商品图片功能。\n\n在页面form中提交`enctype=\"multipart/form-data\"`的数据时，需要springmvc对multipart类型的数据进行解析。\n\n在springmvc.xml中配置multipart类型解析器。\n\n```xml\n<!-- 文件上传 -->\n<bean id=\"multipartResolver\"\n      class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n    <!-- 设置上传文件的最大尺寸为5MB -->\n    <property name=\"maxUploadSize\">\n        <value>5242880</value>\n    </property>\n</bean>\n```\n\n### 加入上传图片的jar\n\n添加依赖\n\n```xml\n<!-- 文件上传 -->\n<dependency>\n    <groupId>commons-fileupload</groupId>\n    <artifactId>commons-fileupload</artifactId>\n    <version>1.3.1</version>\n</dependency>\n```\n\n依赖树\n\n```properties\n[INFO] \\- commons-fileupload:commons-fileupload:jar:1.3.1:compile\n[INFO]    \\- commons-io:commons-io:jar:2.2:compile12\n```\n\n可以看到，其实还间接依赖了`commons-io:commons-io:jar`\n\n### 创建图片虚拟目录存储图片IDEA\n\n我使用的版本为\n\n- tomcat 8.0.30\n- intellij 15.0.2\n- jdk 1.8.0_25\n\n已经部署好了一个web应用，并且已经在IDEA中添加好了tomcat容器，现在想为这个web应用添加一个图片虚拟目录\n\n#### 1.点击工具栏的运行配置`Edit Configurations`\n\n![](https://i.imgur.com/qy1gIOI.png) \n\n#### 2.在弹出的`Run/debug Configurations`中选中tomcat容器，选择`deployment`这个tab\n\n![](https://i.imgur.com/X02XsEN.png)\n\n#### 3.添加物理目录和并设置虚拟目录路径\n\n![](https://i.imgur.com/EoI2QPe.png)\n\n这里我选择了D盘下面的tmp文件夹作为物理目录，虚拟目录设为了`/pic`,我试了下，虽然斜杠少了也没什么影响，一样能访问，不过还是建议加上吧。\n\n#### 4.运行web应用，访问图片资源\n\n这里需要接上具体访问资源的文件名，不然后访问不到的，如下图\n\n![](https://i.imgur.com/33h4wXP.png) \n\n### tomcat配置虚拟目录映射\n\n#### 一、在Server.xml中进行配置\n\n在<Host>元素中添加子元素<Context path=\" ...  \"     docBase=\" ... \"/> 并重启服务器即可；\n\npath表示虚拟目录，docBase表示真实的web应用所在目录；\n\n比如在C盘中存在a这个web应用,则 <Context path=\"/test\" docBase=\"C:\\a\"/>\n\n则输入 <http://localhost:8888/test/1.html> 就能访问到a文件夹下的 1.html\n\n注意：这种方法需要重启服务器才能够生效，所以不适用，因为每次添加一个web应用都需要重启服务器。\n\n#### 二、最佳配置方法\n\n`$CATALINA_BASE/conf/catalina/localhost/ 文件夹下创建一个xml文件，任意文件名都可以，但是此文件名是web应用发布后的虚拟目录；`\n\n`比如创建一个test.xml ，在文件中添加 <Context docBase=\"C:\\a\"/>`\n\n不需要重启服务器，只需要在浏览器中输入 <http://localhost:8888/test/1.html> 即可访问C:\\a\\1.html   ；\n\n#### 三、配置默认web应用\n\n一般，输入 [http://localhost:8080](http://localhost:8080/) 后都会跳出 tomcat的主页，因为这个tomcat的web应用就是默认的web应用，如果想将自己的web应用配置成默认的web应用，只需要在Server.xml中的<Context>元素中为 <Context path=\"\" docBase=\"C:\\a\"/> \n\n或者将test.xml改成 ROOT.xml 即可；\n\n输入 <http://localhost:8080/1.html> 就能访问C:\\a\\1.html ;\n\n注意：在图片虚拟目录中，一定将图片目录分级创建（提高i/o性能），一般我们采用按日期(年、月、日)进行分级创建。\n\n### 上传图片代码\n\n```jsp\n<tr>\n    <td>商品图片</td>\n    <td>\n        <c:if test=\"${items.pic !=null}\">\n            <img src=\"/pic/${items.pic}\" width=100 height=100/>\n            <br/>\n        </c:if>\n        <input type=\"file\"  name=\"items_pic\"/>\n    </td>\n</tr>\n```\n\n- controller方法\n\n修改：商品修改controller方法：\n\n```java\n@RequestMapping(\"/editItemsSubmit\")\n    public String editItemsSubmit(\n            Model model,\n            HttpServletRequest request,\n            Integer id,\n            @ModelAttribute(\"items\")\n            @Validated(value = ValidGroup1.class)ItemsCustom itemsCustom,\n            BindingResult bindingResult,\n            MultipartFile items_pic\n    )throws Exception {12345678910\n //原始名称\nString originalFilename = items_pic.getOriginalFilename();\n//上传图片\nif(items_pic!=null && originalFilename!=null && originalFilename.length()>0){\n\n    //存储图片的物理路径\n    String pic_path = \"D:\\\\tmp\\\\\";\n\n\n    //新的图片名称\n    String newFileName = UUID.randomUUID() + originalFilename.substring(originalFilename.lastIndexOf(\".\"));\n    //新图片\n    File newFile = new File(pic_path+newFileName);\n\n    //将内存中的数据写入磁盘\n    items_pic.transferTo(newFile);\n\n    //将新图片名称写到itemsCustom中\n    itemsCustom.setPic(newFileName);\n\n}\n```\n\n## json数据交互\n\n本文主要介绍如何在springmvc中进行json数据的交互，先是环境准备和配置，然后分别展示了“输入json串，输出是json串”和“输入key/value，输出是json串”两种情况下的交互\n\n### springmvc进行json交互\n\njson数据格式在接口调用中、html页面中较常用，json格式比较简单，解析还比较方便。\n\n比如：webservice接口，传输json数据.\n\n![](https://i.imgur.com/efNlNLt.png) \n\n- 请求json、输出json，要求请求的是json串，所以在前端页面中需要将请求的内容转成json，不太方便。\n\n- 请求key/value、输出json。此方法比较常用。\n\n  ### 环境准备\n\n  #### 添加json转换的依赖\n\n  最开始我少了`jackson-databind`依赖，程序各种报错。\n\n  ```xml\n  <!-- json 转换-->\n  <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-databind</artifactId>\n      <version>2.7.2</version>\n  </dependency>\n  \n  <dependency>\n      <groupId>org.codehaus.jackson</groupId>\n      <artifactId>jackson-mapper-asl</artifactId>\n      <version>1.9.13</version>\n  </dependency>\n  ```\n\n  依赖树 \n\n  ```properties\n  [INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.2:compile\n  [INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.0:compile\n  [INFO] |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.7.2:compile\n  [INFO] \\- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile\n  [INFO]    \\- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile\n  ```\n\n  #### 配置json转换器\n\n  在注解适配器中加入`messageConverters`\n\n```xml\n<!--注解适配器 -->\n<bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\">\n    <property name=\"messageConverters\">\n    <list>\n    <bean class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"></bean>\n    </list>\n    </property>\n</bean>\n```\n\n**注意：如果使用<mvc:annotation-driven />则不用定义上边的内容。** \n\n#### json交互测试\n\n显示两个按钮分别测试\n\n- jsp页面\n\n```jsp\n<%--\n  Created by IntelliJ IDEA.\n  User: brian\n  Date: 2016/3/7\n  Time: 20:49\n  To change this template use File | Settings | File Templates.\n--%>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>json交互测试</title>\n    <script type=\"text/javascript\" src=\"${pageContext.request.contextPath }/js/jquery-1.4.4.min.js\"></script>\n    <script type=\"text/javascript\">\n        //请求json，输出是json\n        function requestJson(){     省略    }\n        //请求key/value，输出是json\n        function responseJson(){    省略    }\n    </script>\n</head>\n<body>\n<input type=\"button\" onclick=\"requestJson()\" value=\"请求json，输出是json\"/>\n<input type=\"button\" onclick=\"responseJson()\" value=\"请求key/value，输出是json\"/>\n</body>\n\n```\n\n- controller\n\n```java\n@Controller\npublic class JsonTest {\n    省略\n}\n```\n\n- 测试结果\n\n#### 输入json串，输出是json串\n\n使用jquery的ajax提交json串，对输出的json结果进行解析。\n\n- jsp页面\n\n```javascript\n//请求json，输出是json\nfunction requestJson(){\n\n    $.ajax({\n        type:'post',\n        url:'${pageContext.request.contextPath }/requestJson.action',\n        contentType:'application/json;charset=utf-8',\n        //数据格式是json串，商品信息\n        data:'{\"name\":\"手机\",\"price\":999}',\n        success:function(data){//返回json结果\n            alert(data);\n        }\n\n    });\n\n}\n```\n\n- controller\n\n```java\n //请求json串(商品信息)，输出json(商品信息)\n//@RequestBody将请求的商品信息的json串转成itemsCustom对象\n//@ResponseBody将itemsCustom转成json输出\n@RequestMapping(\"/requestJson\")\npublic @ResponseBody ItemsCustom requestJson(@RequestBody ItemsCustom itemsCustom){\n\n    //@ResponseBody将itemsCustom转成json输出\n    return itemsCustom;\n}\n```\n\n![](https://i.imgur.com/JaRziR3.png) \n\n可以看到，request和response的HTTP头的Content-Type都是`application/json;charset=utf-8`\n\n![请求json，返回json,response的body](http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json-request-json-2.png)\n\n### 输入key/value，输出是json串\n\n使用jquery的ajax提交key/value串，对输出的json结果进行解析\n\n- jsp页面\n\n```javascript\n//请求key/value，输出是json\nfunction responseJson(){\n\n    $.ajax({\n        type:'post',\n        url:'${pageContext.request.contextPath }/responseJson.action',\n        //请求是key/value这里不需要指定contentType，因为默认就 是key/value类型\n        //contentType:'application/json;charset=utf-8',\n        //数据格式是json串，商品信息\n        data:'name=手机&price=999',\n        success:function(data){//返回json结果\n            alert(data.name);\n        }\n\n    });\n\n}\n```\n\n- controller\n\n```java\n //请求key/value，输出json\n@RequestMapping(\"/responseJson\")\npublic @ResponseBody ItemsCustom responseJson(ItemsCustom itemsCustom){\n\n    //@ResponseBody将itemsCustom转成json输出\n    return itemsCustom;\n}\n```\n\n![](https://i.imgur.com/BWxt2wC.png) \n\n可以看到，key/value键值对的默认Content-Type是`application/x-www-form-urlencoded`,同时，我们收到了响应“手机” ","slug":"SpringMVC笔记（10）","published":1,"updated":"2018-07-13T13:19:28.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eu9l0000igqxmihrp12i","content":"<h2 id=\"修改范例\"><a href=\"#修改范例\" class=\"headerlink\" title=\"修改范例\"></a>修改范例</h2><p>操作流程：</p>\n<p>1.进入商品查询列表页面</p>\n<p>2.点击修改，进入商品修改页面，页面中显示了要修改的商品。要修改的商品从数据库查询，根据商品id(主键)查询商品信息</p>\n<p>3.在商品修改页面，修改商品信息，修改后，点击提交</p>\n<h3 id=\"开发mapper\"><a href=\"#开发mapper\" class=\"headerlink\" title=\"开发mapper\"></a>开发mapper</h3><p>mapper：</p>\n<p>根据id查询商品信息</p>\n<p>根据id更新Items表的数据</p>\n<p>不用开发了，使用逆向工程生成的代码。</p>\n<h3 id=\"开发service\"><a href=\"#开发service\" class=\"headerlink\" title=\"开发service\"></a>开发service</h3><p>在<code>com.iot.learnssm.firstssm.service.ItemsService</code>中添加两个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//根据id查询商品信息</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Title: findItemsById&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id 查询商品的id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"function\">ItemsCustom <span class=\"title\">findItemsById</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改商品信息</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Title: updateItems&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id 修改商品的id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> itemsCustom 修改的商品信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateItems</span><span class=\"params\">(Integer id,ItemsCustom itemsCustom)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"><span class=\"number\">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure>\n<p>在<code>com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl</code>中实现接口，增加<code>itemsMapper</code>属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ItemsMapper itemsMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ItemsCustom <span class=\"title\">findItemsById</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Items items = itemsMapper.selectByPrimaryKey(id);</span><br><span class=\"line\">    <span class=\"comment\">//中间对商品信息进行业务处理</span></span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"comment\">//返回ItemsCustom</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = <span class=\"keyword\">new</span> ItemsCustom();</span><br><span class=\"line\">    <span class=\"comment\">//将items的属性值拷贝到itemsCustom</span></span><br><span class=\"line\">    BeanUtils.copyProperties(items, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateItems</span><span class=\"params\">(Integer id, ItemsCustom itemsCustom)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加业务校验，通常在service接口对关键参数进行校验</span></span><br><span class=\"line\">    <span class=\"comment\">//校验 id是否为空，如果为空抛出异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新商品信息使用updateByPrimaryKeyWithBLOBs根据id更新items表中所有字段，包括 大文本类型字段</span></span><br><span class=\"line\">    <span class=\"comment\">//updateByPrimaryKeyWithBLOBs要求必须转入id</span></span><br><span class=\"line\">    itemsCustom.setId(id);</span><br><span class=\"line\">    itemsMapper.updateByPrimaryKeyWithBLOBs(itemsCustom);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发controller\"><a href=\"#开发controller\" class=\"headerlink\" title=\"开发controller\"></a>开发controller</h3><p>方法：</p>\n<p>​    商品信息修改页面显示</p>\n<p>​    商品信息修改提交</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"comment\">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class=\"line\"><span class=\"comment\">//比如：商品列表：/items/queryItems.action</span></span><br><span class=\"line\"><span class=\"comment\">//@RequestMapping(\"/items\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsService itemsService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/queryItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class=\"line\">    <span class=\"comment\">//一般建议将url和方法写成一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">queryItems</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表</span></span><br><span class=\"line\">        List&lt;ItemsCustom&gt; itemsList = itemsService.findItemsList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class=\"line\">        <span class=\"comment\">//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"items/itemsList\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息修改页面显示</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//限制http请求方法，可以post和get</span></span><br><span class=\"line\">    <span class=\"comment\">//@RequestMapping(value=\"/editItems\",method=&#123;RequestMethod.POST, RequestMethod.GET&#125;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItems</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用service根据商品id查询商品信息</span></span><br><span class=\"line\">        ItemsCustom itemsCustom = itemsService.findItemsById(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将商品信息放到model</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsCustom\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//商品修改页面</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"items/editItems\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息修改提交</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItemsSubmit</span><span class=\"params\">(HttpServletRequest request, Integer id, ItemsCustom itemsCustom)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用service更新商品信息，页面需要将商品信息传到此方法</span></span><br><span class=\"line\">        itemsService.updateItems(id, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//返回一个成功页面</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping`\"></a>@RequestMapping`</h3><ul>\n<li>url映射</li>\n</ul>\n<p>定义controller方法对应的url，进行处理器映射使用。</p>\n<ul>\n<li>窄化请求映射</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"comment\">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class=\"line\"><span class=\"comment\">//比如：商品列表：/items/queryItems.action</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/items\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>限制http请求方法</li>\n</ul>\n<p>出于安全性考虑，对http的链接进行方法限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//商品信息修改页面显示</span></span><br><span class=\"line\">    <span class=\"comment\">//@RequestMapping(\"/editItems\")</span></span><br><span class=\"line\">    <span class=\"comment\">//限制http请求方法，可以post和get</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/editItems\"</span>,method=&#123;RequestMethod.POST, RequestMethod.GET&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItems</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure>\n<p>如果限制请求为post方法，进行get请求，即将上面代码的注解改为<code>@RequestMapping(value=&quot;/editItems&quot;,method={RequestMethod.POST})</code></p>\n<p>报错，状态码405：</p>\n<p><img src=\"https://i.imgur.com/yrIoRte.png\" alt=\"\"> </p>\n<p>controller方法的返回值</p>\n<p>返回<code>ModelAndView</code></p>\n<p>需要方法结束时，定义ModelAndView，将model和view分别进行设置。</p>\n<p>返回string</p>\n<p>如果controller方法返回string</p>\n<p>1.表示返回逻辑视图名。</p>\n<p>真正视图(jsp路径)=前缀+逻辑视图名+后缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/editItems\"</span>,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span><br><span class=\"line\"><span class=\"comment\">//@RequestParam里边指定request传入参数名称和形参进行绑定。</span></span><br><span class=\"line\"><span class=\"comment\">//通过required属性指定参数是否必须要传入</span></span><br><span class=\"line\"><span class=\"comment\">//通过defaultValue可以设置默认值，如果id参数没有传入，将默认值和形参绑定。</span></span><br><span class=\"line\"><span class=\"comment\">//public String editItems(Model model, @RequestParam(value=\"id\",required=true) Integer items_id)throws Exception &#123;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItems</span><span class=\"params\">(Model model)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用service根据商品id查询商品信息</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = itemsService.findItemsById(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过形参中的model将model数据传到页面</span></span><br><span class=\"line\">    <span class=\"comment\">//相当于modelAndView.addObject方法</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"itemsCustom\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"items/editItems\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.redirect重定向</p>\n<p>商品修改提交后，重定向到商品查询列表。</p>\n<p>redirect重定向特点：浏览器地址栏中的url会变化。修改提交的request数据无法传到重定向的地址。因为重定向后重新进行request（request无法共享）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重定向到商品查询列表</span><br><span class=\"line\">//return &quot;redirect:queryItems.action&quot;;</span><br></pre></td></tr></table></figure>\n<p>3.forward页面转发</p>\n<p>通过forward进行页面转发，浏览器地址栏url不变，request可以共享。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//页面转发</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"forward:queryItems.action\"</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回void</li>\n</ul>\n<p>在controller方法形参上可以定义request和response，使用request或response指定响应结果：</p>\n<p>1.使用request转向页面，如下：</p>\n<p><code>request.getRequestDispatcher(&quot;页面路径&quot;).forward(request, response);</code></p>\n<p>2.也可以通过response页面重定向：</p>\n<p><code>response.sendRedirect(&quot;url&quot;)</code></p>\n<p>3.也可以通过response指定响应结果，例如响应json数据如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">response.getWriter().write(<span class=\"string\">\"json串\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"注解开发之集合类型参数绑定\"><a href=\"#注解开发之集合类型参数绑定\" class=\"headerlink\" title=\"注解开发之集合类型参数绑定\"></a>注解开发之集合类型参数绑定</h2><p>本文主要介绍注解开发的集合类型参数绑定，包括数组绑定，list绑定以及map绑定</p>\n<h3 id=\"数组绑定\"><a href=\"#数组绑定\" class=\"headerlink\" title=\"数组绑定\"></a>数组绑定</h3><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>商品批量删除，用户在页面选择多个商品，批量删除。</p>\n<h3 id=\"表现层实现\"><a href=\"#表现层实现\" class=\"headerlink\" title=\"表现层实现\"></a>表现层实现</h3><p>关键：将页面选择(多选)的商品id，传到controller方法的形参，方法形参使用数组接收页面请求的多个商品id。</p>\n<ul>\n<li>controller方法定义：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批量删除 商品信息</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/deleteItems\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteItems</span><span class=\"params\">(Integer[] items_id)</span> <span class=\"keyword\">throws</span> Exception</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面定义：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;itemsList &#125;\"</span> var=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;input type=\"checkbox\" name=\"items_id\" value=\"$&#123;item.id&#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.name &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.price &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;td&gt;&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/items/editItems.action?id=$&#123;item.id&#125;\"&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"list绑定\"><a href=\"#list绑定\" class=\"headerlink\" title=\"list绑定\"></a>list绑定</h2><h3 id=\"需求-1\"><a href=\"#需求-1\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>通常在需要批量提交数据时，将提交的数据绑定到<code>list&lt;pojo&gt;</code>中，比如：成绩录入（录入多门课成绩，批量提交），</p>\n<p>本例子需求：批量商品修改，在页面输入多个商品信息，将多个商品信息提交到controller方法中。</p>\n<h3 id=\"表现层实现-1\"><a href=\"#表现层实现-1\" class=\"headerlink\" title=\"表现层实现\"></a>表现层实现</h3><ul>\n<li>controller方法定义：<ul>\n<li>1、进入批量商品修改页面(页面样式参考商品列表实现)</li>\n<li>2、批量修改商品提交</li>\n</ul>\n</li>\n</ul>\n<p>使用List接收页面提交的批量数据，通过包装pojo接收，在包装pojo中定义<code>list&lt;pojo&gt;</code>属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsQueryVo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Items items;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了系统 可扩展性，对原始生成的po进行扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsCustom itemsCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//批量商品信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ItemsCustom&gt; itemsList;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批量修改商品提交</span></span><br><span class=\"line\"><span class=\"comment\">// 通过ItemsQueryVo接收批量提交的商品信息，将商品信息存储到itemsQueryVo中itemsList属性中。</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsAllSubmit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsAllSubmit</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面定义：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;itemsList &#125;\"</span> var=<span class=\"string\">\"item\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].name\" value=\"$&#123;item.name &#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].price\" value=\"$&#123;item.price &#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].createtime\" value=\"&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].detail\" value=\"$&#123;item.detail &#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n<p>name的格式：</p>\n<p><strong>对应包装pojo中的list类型属性名[下标(从0开始)].包装pojo中List类型的属性中pojo的属性名</strong></p>\n<p>例子：</p>\n<p><code>&quot;name=&quot;itemsList[${status.index }].price&quot;</code></p>\n<p><em>可以和包装类型的参数绑定归纳对比一下，其实就是在包装类的pojo基础上多了个下标。只不过包装类参数绑定时，要和包装pojo中的pojo类性的属性名一致，而list参数绑定时，要和包装pojo中的list类型的属性名一致。</em></p>\n<h3 id=\"map绑定\"><a href=\"#map绑定\" class=\"headerlink\" title=\"map绑定\"></a>map绑定</h3><p>也通过在包装pojo中定义map类型属性。</p>\n<p>在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。</p>\n<ul>\n<li>包装类中定义Map对象如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryVo</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, Object&gt; itemInfo = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">  <span class=\"comment\">//get/set方法..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面定义如下：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">&lt;td&gt;学生信息：&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">姓名：&lt;inputtype=<span class=\"string\">\"text\"</span>name=<span class=\"string\">\"itemInfo['name']\"</span>/&gt;</span><br><span class=\"line\">年龄：&lt;inputtype=<span class=\"string\">\"text\"</span>name=<span class=\"string\">\"itemInfo['price']\"</span>/&gt;</span><br><span class=\"line\">.. .. ..</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Contrller方法定义如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">useraddsubmit</span><span class=\"params\">(Model model,QueryVo queryVo)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">System.out.println(queryVo.getStudentinfo());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"springmvc校验\"><a href=\"#springmvc校验\" class=\"headerlink\" title=\"springmvc校验\"></a>springmvc校验</h2><p>本文主要介绍springmvc校验，包括环境准备，校验器配置，pojo张添加校验规则，捕获和显示检验错误信息以及分组校验简单示例。</p>\n<h3 id=\"校验理解\"><a href=\"#校验理解\" class=\"headerlink\" title=\"校验理解\"></a>校验理解</h3><p>项目中，通常使用较多是前端的校验，比如页面中js校验。对于安全要求较高点建议在服务端进行校验。</p>\n<p>服务端校验：</p>\n<ul>\n<li>控制层conroller：校验页面请求的参数的合法性。在服务端控制层conroller校验，不区分客户端类型（浏览器、手机客户端、远程调用）</li>\n<li>业务层service（使用较多）：主要校验关键业务参数，仅限于service接口中使用的参数。</li>\n<li>持久层dao：一般是不校验的。</li>\n</ul>\n<h3 id=\"springmvc校验需求\"><a href=\"#springmvc校验需求\" class=\"headerlink\" title=\"springmvc校验需求\"></a>springmvc校验需求</h3><p>springmvc使用hibernate的校验框架validation(和hibernate没有任何关系)。</p>\n<p>校验思路：</p>\n<p>页面提交请求的参数，请求到controller方法中，使用validation进行校验。如果校验出错，将错误信息展示到页面。</p>\n<p>具体需求：</p>\n<p>商品修改，添加校验（校验商品名称长度，生产日期的非空校验），如果校验出错，在商品修改页面显示错误信息。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>我们需要三个jar包：</p>\n<ul>\n<li>hibernate-validator.jar</li>\n<li>jboss-logging.jar</li>\n<li>validation-api.jar</li>\n</ul>\n<p>这里我们添加maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hibernate 校验 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.4.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，另外两个jar包被<code>hibernate-validator</code>依赖，所以不用再额外添加了。</p>\n<h3 id=\"配置校验器\"><a href=\"#配置校验器\" class=\"headerlink\" title=\"配置校验器\"></a>配置校验器</h3><ul>\n<li><p>在springmvc.xml中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 校验器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"validator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- hibernate校验器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"providerClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.hibernate.validator.HibernateValidator\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validationMessageSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"messageSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 校验错误信息配置文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"messageSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.context.support.ReloadableResourceBundleMessageSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 资源文件名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basenames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:CustomValidationMessages<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 资源文件编码格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileEncodings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 对资源文件内容缓存时间，单位秒 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheSeconds\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"120\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>校验器注入到处理器适配器中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> <span class=\"attr\">conversion-service</span>=<span class=\"string\">\"conversionService\"</span> <span class=\"attr\">validator</span>=<span class=\"string\">\"validator\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在CustomValidationMessages.properties配置校验错误信息：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加校验的错误提示信息</span><br><span class=\"line\">items.name.length.error=请输入1到30个字符的商品名称</span><br><span class=\"line\">items.createtime.isNUll=请输入商品的生产日期</span><br></pre></td></tr></table></figure>\n<h3 id=\"在pojo中添加校验规则\"><a href=\"#在pojo中添加校验规则\" class=\"headerlink\" title=\"在pojo中添加校验规则\"></a>在pojo中添加校验规则</h3><p>在ItemsCustom.java中添加校验规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Items</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"comment\">//校验名称在1到30字符中间</span></span><br><span class=\"line\">    <span class=\"comment\">//message是提示校验出错显示的信息</span></span><br><span class=\"line\">    <span class=\"comment\">//groups：此校验属于哪个分组，groups可以定义多个分组</span></span><br><span class=\"line\">    <span class=\"meta\">@Size</span>(min=<span class=\"number\">1</span>,max=<span class=\"number\">30</span>,message=<span class=\"string\">\"&#123;items.name.length.error&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Float price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String pic;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//非空校验</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span>(message=<span class=\"string\">\"&#123;items.createtime.isNUll&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createtime;</span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获和显示校验错误信息\"><a href=\"#捕获和显示校验错误信息\" class=\"headerlink\" title=\"捕获和显示校验错误信息\"></a>捕获和显示校验错误信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsSubmit</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Model model,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Integer id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Validated ItemsCustom itemsCustom,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BindingResult bindingResult)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在controller中将错误信息传到页面即可</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取校验错误信息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出错误信息</span></span><br><span class=\"line\">    List&lt;ObjectError&gt; allErrors = bindingResult.getAllErrors();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ObjectError objectError :allErrors)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输出错误信息</span></span><br><span class=\"line\">        System.out.println(objectError.getDefaultMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将错误信息传到页面</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"allErrors\"</span>, allErrors);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可以直接使用model将提交pojo回显到页面</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"items\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出错重新到商品修改页面</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"items/editItems\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面显示错误信息：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 显示错误信息 --&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">\"$&#123;allErrors!=null &#125;\"</span>&gt;</span><br><span class=\"line\">    &lt;c:forEach items=<span class=\"string\">\"$&#123;allErrors &#125;\"</span> var=<span class=\"string\">\"error\"</span>&gt;</span><br><span class=\"line\">        $&#123; error.defaultMessage&#125;&lt;br/&gt;</span><br><span class=\"line\">    &lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分组校验\"><a href=\"#分组校验\" class=\"headerlink\" title=\"分组校验\"></a>分组校验</h3><ul>\n<li><p>需求：</p>\n<p>在pojo中定义校验规则，而pojo是被多个controller所共用，当不同的controller方法对同一个pojo进行校验，但是每个controller方法需要不同的校验</p>\n<p>解决方法：</p>\n<p>定义多个校验分组（其实是一个java接口），分组中定义有哪些规则</p>\n<p>每个controller方法使用不同的校验分组</p>\n</li>\n</ul>\n<p>1.校验分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ValidGroup1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接口中不需要定义任何方法，仅是对不同的校验规则进行分组</span></span><br><span class=\"line\">    <span class=\"comment\">//此分组只校验商品名称长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.在校验规则中添加分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//校验名称在1到30字符中间</span></span><br><span class=\"line\"><span class=\"comment\">//message是提示校验出错显示的信息</span></span><br><span class=\"line\"><span class=\"comment\">//groups：此校验属于哪个分组，groups可以定义多个分组</span></span><br><span class=\"line\"><span class=\"meta\">@Size</span>(min=<span class=\"number\">1</span>,max=<span class=\"number\">30</span>,message=<span class=\"string\">\"&#123;items.name.length.error&#125;\"</span>,groups = &#123;ValidGroup1.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<p>3.在controller方法使用指定分组的校验</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// value=&#123;ValidGroup1.class&#125;指定使用ValidGroup1分组的校验</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsSubmit</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Model model,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Integer id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Validated(value = ValidGroup1.class)</span>ItemsCustom itemsCustom,</span></span><br><span class=\"line\"><span class=\"function\">        BindingResult bindingResult)<span class=\"keyword\">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据回显\"><a href=\"#数据回显\" class=\"headerlink\" title=\"数据回显\"></a>数据回显</h2><p>本文介绍springmvc中数据回显的几种实现方法</p>\n<p>数据回显：提交后，如果出现错误，将刚才提交的数据回显到刚才的提交页面。</p>\n<h3 id=\"pojo数据回显方法\"><a href=\"#pojo数据回显方法\" class=\"headerlink\" title=\"pojo数据回显方法\"></a>pojo数据回显方法</h3><p>1.springmvc默认对pojo数据进行回显。</p>\n<p><strong>pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）</strong></p>\n<p>使用<code>@ModelAttribute</code>指定pojo回显到页面在request中的key</p>\n<p>2.<code>@ModelAttribute</code>还可以将方法的返回值传到页面</p>\n<p>在商品查询列表页面，通过商品类型查询商品信息。在controller中定义商品类型查询方法，最终将商品类型传到页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 商品分类</span><br><span class=\"line\">//itemtypes表示最终将方法返回值放在request中的key</span><br><span class=\"line\">@ModelAttribute(&quot;itemtypes&quot;)</span><br><span class=\"line\">public Map&lt;String, String&gt; getItemTypes() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, String&gt; itemTypes = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">    itemTypes.put(&quot;101&quot;, &quot;数码&quot;);</span><br><span class=\"line\">    itemTypes.put(&quot;102&quot;, &quot;母婴&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return itemTypes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面上可以得到itemTypes数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">    商品名称：&lt;input name=&quot;itemsCustom.name&quot; /&gt;</span><br><span class=\"line\">    商品类型：</span><br><span class=\"line\">    &lt;select name=&quot;itemtype&quot;&gt;</span><br><span class=\"line\">        &lt;c:forEach items=&quot;$&#123;itemtypes&#125;&quot; var=&quot;itemtype&quot;&gt;</span><br><span class=\"line\">            &lt;option value=&quot;$&#123;itemtype.key &#125;&quot;&gt;$&#123;itemtype.value &#125;&lt;/option&gt;</span><br><span class=\"line\">        &lt;/c:forEach&gt;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n<p>3.使用最简单方法使用model，可以不用<code>@ModelAttribute</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以直接使用model将提交pojo回显到页面</span><br><span class=\"line\">//model.addAttribute(&quot;items&quot;, itemsCustom);</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单类型数据回显\"><a href=\"#简单类型数据回显\" class=\"headerlink\" title=\"简单类型数据回显\"></a>简单类型数据回显</h3><p>使用最简单方法使用model</p>\n<p><code>model.addAttribute(&quot;id&quot;, id);</code></p>\n<h2 id=\"异常处理器\"><a href=\"#异常处理器\" class=\"headerlink\" title=\"异常处理器\"></a>异常处理器</h2><p>本文主要介绍springmvc中异常处理的思路，并展示如何自定义异常处理类以及全局异常处理器的配置</p>\n<h3 id=\"异常处理思路\"><a href=\"#异常处理思路\" class=\"headerlink\" title=\"异常处理思路\"></a>异常处理思路</h3><p>系统中异常包括两类：</p>\n<ul>\n<li>预期异常</li>\n<li>运行时异常RuntimeException</li>\n</ul>\n<p>前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p>\n<p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</p>\n<p><img src=\"https://i.imgur.com/dnlo4hb.png\" alt=\"\"> </p>\n<h3 id=\"自定义异常类\"><a href=\"#自定义异常类\" class=\"headerlink\" title=\"自定义异常类\"></a>自定义异常类</h3><p>对不同的异常类型定义异常类，继承Exception。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by brian on 2016/3/7.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 系统 自定义异常类，针对预期的异常，需要在程序中抛出此类的异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomException</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//异常信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomException</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局异常处理器\"><a href=\"#全局异常处理器\" class=\"headerlink\" title=\"全局异常处理器\"></a>全局异常处理器</h3><p>思路：</p>\n<p>系统遇到异常，在程序中手动抛出，dao抛给service、service给controller、controller抛给前端控制器，前端控制器调用全局异常处理器。</p>\n<p>全局异常处理器处理思路：</p>\n<p>解析出异常类型</p>\n<ul>\n<li>如果该异常类型是系统自定义的异常，直接取出异常信息，在错误页面展示</li>\n<li>如果该异常类型不是系统自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</li>\n</ul>\n<p>springmvc提供一个<code>HandlerExceptionResolver</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handler就是处理器适配器要执行Handler对象（只有method）</span></span><br><span class=\"line\">        <span class=\"comment\">//解析出异常类型</span></span><br><span class=\"line\">        <span class=\"comment\">//如果该 异常类型是系统 自定义的异常，直接取出异常信息，在错误页面展示</span></span><br><span class=\"line\">        <span class=\"comment\">//String message = null;</span></span><br><span class=\"line\">        <span class=\"comment\">//if(ex instanceof CustomException)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//message = ((CustomException)ex).getMessage();</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;else&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">////如果该 异常类型不是系统 自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</span></span><br><span class=\"line\">            <span class=\"comment\">//message=\"未知错误\";</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//上边代码变为</span></span><br><span class=\"line\">        CustomException customException;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ex <span class=\"keyword\">instanceof</span> CustomException)&#123;</span><br><span class=\"line\">            customException = (CustomException)ex;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            customException = <span class=\"keyword\">new</span> CustomException(<span class=\"string\">\"未知错误\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//错误信息</span></span><br><span class=\"line\">        String message = customException.getMessage();</span><br><span class=\"line\"></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将错误信息传到页面</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"message\"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//指向错误页面</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误页面\"><a href=\"#错误页面\" class=\"headerlink\" title=\"错误页面\"></a>错误页面</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--</span><br><span class=\"line\">  Created by IntelliJ IDEA.</span><br><span class=\"line\">  User: Brian</span><br><span class=\"line\">  Date: <span class=\"number\">2016</span>/<span class=\"number\">3</span>/<span class=\"number\">4</span></span><br><span class=\"line\">  Time: <span class=\"number\">10</span>:<span class=\"number\">51</span></span><br><span class=\"line\">  To change <span class=\"keyword\">this</span> template use File | Settings | File Templates.</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;错误提示&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">$&#123;message&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在springmvc-xml配置全局异常处理器\"><a href=\"#在springmvc-xml配置全局异常处理器\" class=\"headerlink\" title=\"在springmvc.xml配置全局异常处理器\"></a>在springmvc.xml配置全局异常处理器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 全局异常处理器</span></span><br><span class=\"line\"><span class=\"comment\">只要实现HandlerExceptionResolver接口就是全局异常处理器</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.exception.CustomExceptionResolver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>全局异常处理器只有一个，配置多个也没用。</p>\n<h3 id=\"异常测试\"><a href=\"#异常测试\" class=\"headerlink\" title=\"异常测试\"></a>异常测试</h3><p>在controller、service、dao中任意一处需要手动抛出异常。如果是程序中手动抛出的异常，在错误页面中显示自定义的异常信息，如果不是手动抛出异常说明是一个运行时异常，在错误页面只显示“未知错误”。</p>\n<ul>\n<li>在商品修改的controller方法中抛出异常 .</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItems</span><span class=\"params\">(Model model,@RequestParam(value=<span class=\"string\">\"id\"</span>,required=<span class=\"keyword\">true</span>)</span> Integer items_id)<span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用service根据商品id查询商品信息</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = itemsService.findItemsById(items_id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断商品是否为空，根据id没有查询到商品，抛出异常，提示用户商品信息不存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(itemsCustom == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CustomException(<span class=\"string\">\"修改的商品信息不存在!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过形参中的model将model数据传到页面</span></span><br><span class=\"line\">    <span class=\"comment\">//相当于modelAndView.addObject方法</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"items\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"items/editItems\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在service接口中抛出异常：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ItemsCustom <span class=\"title\">findItemsById</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Items items = itemsMapper.selectByPrimaryKey(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(items==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CustomException(<span class=\"string\">\"修改的商品信息不存在!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//中间对商品信息进行业务处理</span></span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"comment\">//返回ItemsCustom</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将items的属性值拷贝到itemsCustom</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(items!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        itemsCustom = <span class=\"keyword\">new</span> ItemsCustom();</span><br><span class=\"line\">        BeanUtils.copyProperties(items, itemsCustom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果与业务功能相关的异常，建议在service中抛出异常。</li>\n<li>与业务功能没有关系的异常，建议在controller中抛出。</li>\n</ul>\n<h2 id=\"上传图片\"><a href=\"#上传图片\" class=\"headerlink\" title=\"上传图片\"></a>上传图片</h2><p>在修改商品页面，添加上传商品图片功能。</p>\n<p>在页面form中提交<code>enctype=&quot;multipart/form-data&quot;</code>的数据时，需要springmvc对multipart类型的数据进行解析。</p>\n<p>在springmvc.xml中配置multipart类型解析器。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 文件上传 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"multipartResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置上传文件的最大尺寸为5MB --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxUploadSize\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>5242880<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"加入上传图片的jar\"><a href=\"#加入上传图片的jar\" class=\"headerlink\" title=\"加入上传图片的jar\"></a>加入上传图片的jar</h3><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 文件上传 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>依赖树</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] \\- commons-fileupload:commons-fileupload:jar:1.3.1:compile</span><br><span class=\"line\">[INFO]    \\- commons-io:commons-io:jar:2.2:compile12</span><br></pre></td></tr></table></figure>\n<p>可以看到，其实还间接依赖了<code>commons-io:commons-io:jar</code></p>\n<h3 id=\"创建图片虚拟目录存储图片IDEA\"><a href=\"#创建图片虚拟目录存储图片IDEA\" class=\"headerlink\" title=\"创建图片虚拟目录存储图片IDEA\"></a>创建图片虚拟目录存储图片IDEA</h3><p>我使用的版本为</p>\n<ul>\n<li>tomcat 8.0.30</li>\n<li>intellij 15.0.2</li>\n<li>jdk 1.8.0_25</li>\n</ul>\n<p>已经部署好了一个web应用，并且已经在IDEA中添加好了tomcat容器，现在想为这个web应用添加一个图片虚拟目录</p>\n<h4 id=\"1-点击工具栏的运行配置Edit-Configurations\"><a href=\"#1-点击工具栏的运行配置Edit-Configurations\" class=\"headerlink\" title=\"1.点击工具栏的运行配置Edit Configurations\"></a>1.点击工具栏的运行配置<code>Edit Configurations</code></h4><p><img src=\"https://i.imgur.com/qy1gIOI.png\" alt=\"\"> </p>\n<h4 id=\"2-在弹出的Run-debug-Configurations中选中tomcat容器，选择deployment这个tab\"><a href=\"#2-在弹出的Run-debug-Configurations中选中tomcat容器，选择deployment这个tab\" class=\"headerlink\" title=\"2.在弹出的Run/debug Configurations中选中tomcat容器，选择deployment这个tab\"></a>2.在弹出的<code>Run/debug Configurations</code>中选中tomcat容器，选择<code>deployment</code>这个tab</h4><p><img src=\"https://i.imgur.com/X02XsEN.png\" alt=\"\"></p>\n<h4 id=\"3-添加物理目录和并设置虚拟目录路径\"><a href=\"#3-添加物理目录和并设置虚拟目录路径\" class=\"headerlink\" title=\"3.添加物理目录和并设置虚拟目录路径\"></a>3.添加物理目录和并设置虚拟目录路径</h4><p><img src=\"https://i.imgur.com/EoI2QPe.png\" alt=\"\"></p>\n<p>这里我选择了D盘下面的tmp文件夹作为物理目录，虚拟目录设为了<code>/pic</code>,我试了下，虽然斜杠少了也没什么影响，一样能访问，不过还是建议加上吧。</p>\n<h4 id=\"4-运行web应用，访问图片资源\"><a href=\"#4-运行web应用，访问图片资源\" class=\"headerlink\" title=\"4.运行web应用，访问图片资源\"></a>4.运行web应用，访问图片资源</h4><p>这里需要接上具体访问资源的文件名，不然后访问不到的，如下图</p>\n<p><img src=\"https://i.imgur.com/33h4wXP.png\" alt=\"\"> </p>\n<h3 id=\"tomcat配置虚拟目录映射\"><a href=\"#tomcat配置虚拟目录映射\" class=\"headerlink\" title=\"tomcat配置虚拟目录映射\"></a>tomcat配置虚拟目录映射</h3><h4 id=\"一、在Server-xml中进行配置\"><a href=\"#一、在Server-xml中进行配置\" class=\"headerlink\" title=\"一、在Server.xml中进行配置\"></a>一、在Server.xml中进行配置</h4><p>在<host>元素中添加子元素<context path=\" ...  \" docbase=\" ... \"> 并重启服务器即可；</context></host></p>\n<p>path表示虚拟目录，docBase表示真实的web应用所在目录；</p>\n<p>比如在C盘中存在a这个web应用,则 <context path=\"/test\" docbase=\"C:\\a\"></context></p>\n<p>则输入 <a href=\"http://localhost:8888/test/1.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/test/1.html</a> 就能访问到a文件夹下的 1.html</p>\n<p>注意：这种方法需要重启服务器才能够生效，所以不适用，因为每次添加一个web应用都需要重启服务器。</p>\n<h4 id=\"二、最佳配置方法\"><a href=\"#二、最佳配置方法\" class=\"headerlink\" title=\"二、最佳配置方法\"></a>二、最佳配置方法</h4><p><code>$CATALINA_BASE/conf/catalina/localhost/ 文件夹下创建一个xml文件，任意文件名都可以，但是此文件名是web应用发布后的虚拟目录；</code></p>\n<p><code>比如创建一个test.xml ，在文件中添加 &lt;Context docBase=&quot;C:\\a&quot;/&gt;</code></p>\n<p>不需要重启服务器，只需要在浏览器中输入 <a href=\"http://localhost:8888/test/1.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/test/1.html</a> 即可访问C:\\a\\1.html   ；</p>\n<h4 id=\"三、配置默认web应用\"><a href=\"#三、配置默认web应用\" class=\"headerlink\" title=\"三、配置默认web应用\"></a>三、配置默认web应用</h4><p>一般，输入 <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 后都会跳出 tomcat的主页，因为这个tomcat的web应用就是默认的web应用，如果想将自己的web应用配置成默认的web应用，只需要在Server.xml中的<context>元素中为 <context path=\"\" docbase=\"C:\\a\"> </context></context></p>\n<p>或者将test.xml改成 ROOT.xml 即可；</p>\n<p>输入 <a href=\"http://localhost:8080/1.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/1.html</a> 就能访问C:\\a\\1.html ;</p>\n<p>注意：在图片虚拟目录中，一定将图片目录分级创建（提高i/o性能），一般我们采用按日期(年、月、日)进行分级创建。</p>\n<h3 id=\"上传图片代码\"><a href=\"#上传图片代码\" class=\"headerlink\" title=\"上传图片代码\"></a>上传图片代码</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;商品图片&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">\"$&#123;items.pic !=null&#125;\"</span>&gt;</span><br><span class=\"line\">            &lt;img src=<span class=\"string\">\"/pic/$&#123;items.pic&#125;\"</span> width=<span class=\"number\">100</span> height=<span class=\"number\">100</span>/&gt;</span><br><span class=\"line\">            &lt;br/&gt;</span><br><span class=\"line\">        &lt;/c:if&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"file\"</span>  name=<span class=\"string\">\"items_pic\"</span>/&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller方法</li>\n</ul>\n<p>修改：商品修改controller方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsSubmit</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Model model,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Integer id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            @ModelAttribute(<span class=\"string\">\"items\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">            @<span class=\"title\">Validated</span><span class=\"params\">(value = ValidGroup1.class)</span>ItemsCustom itemsCustom,</span></span><br><span class=\"line\"><span class=\"function\">            BindingResult bindingResult,</span></span><br><span class=\"line\"><span class=\"function\">            MultipartFile items_pic</span></span><br><span class=\"line\"><span class=\"function\">    )<span class=\"keyword\">throws</span> Exception </span>&#123;<span class=\"number\">12345678910</span></span><br><span class=\"line\"> <span class=\"comment\">//原始名称</span></span><br><span class=\"line\">String originalFilename = items_pic.getOriginalFilename();</span><br><span class=\"line\"><span class=\"comment\">//上传图片</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(items_pic!=<span class=\"keyword\">null</span> &amp;&amp; originalFilename!=<span class=\"keyword\">null</span> &amp;&amp; originalFilename.length()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//存储图片的物理路径</span></span><br><span class=\"line\">    String pic_path = <span class=\"string\">\"D:\\\\tmp\\\\\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//新的图片名称</span></span><br><span class=\"line\">    String newFileName = UUID.randomUUID() + originalFilename.substring(originalFilename.lastIndexOf(<span class=\"string\">\".\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//新图片</span></span><br><span class=\"line\">    File newFile = <span class=\"keyword\">new</span> File(pic_path+newFileName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将内存中的数据写入磁盘</span></span><br><span class=\"line\">    items_pic.transferTo(newFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将新图片名称写到itemsCustom中</span></span><br><span class=\"line\">    itemsCustom.setPic(newFileName);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"json数据交互\"><a href=\"#json数据交互\" class=\"headerlink\" title=\"json数据交互\"></a>json数据交互</h2><p>本文主要介绍如何在springmvc中进行json数据的交互，先是环境准备和配置，然后分别展示了“输入json串，输出是json串”和“输入key/value，输出是json串”两种情况下的交互</p>\n<h3 id=\"springmvc进行json交互\"><a href=\"#springmvc进行json交互\" class=\"headerlink\" title=\"springmvc进行json交互\"></a>springmvc进行json交互</h3><p>json数据格式在接口调用中、html页面中较常用，json格式比较简单，解析还比较方便。</p>\n<p>比如：webservice接口，传输json数据.</p>\n<p><img src=\"https://i.imgur.com/efNlNLt.png\" alt=\"\"> </p>\n<ul>\n<li><p>请求json、输出json，要求请求的是json串，所以在前端页面中需要将请求的内容转成json，不太方便。</p>\n</li>\n<li><p>请求key/value、输出json。此方法比较常用。</p>\n<h3 id=\"环境准备-1\"><a href=\"#环境准备-1\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"添加json转换的依赖\"><a href=\"#添加json转换的依赖\" class=\"headerlink\" title=\"添加json转换的依赖\"></a>添加json转换的依赖</h4><p>最开始我少了<code>jackson-databind</code>依赖，程序各种报错。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- json 转换--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-mapper-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>依赖树 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.2:compile</span><br><span class=\"line\">[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.0:compile</span><br><span class=\"line\">[INFO] |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.7.2:compile</span><br><span class=\"line\">[INFO] \\- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile</span><br><span class=\"line\">[INFO]    \\- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置json转换器\"><a href=\"#配置json转换器\" class=\"headerlink\" title=\"配置json转换器\"></a>配置json转换器</h4><p>在注解适配器中加入<code>messageConverters</code></p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注解适配器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"messageConverters\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：如果使用&lt;mvc:annotation-driven /&gt;则不用定义上边的内容。</strong> </p>\n<h4 id=\"json交互测试\"><a href=\"#json交互测试\" class=\"headerlink\" title=\"json交互测试\"></a>json交互测试</h4><p>显示两个按钮分别测试</p>\n<ul>\n<li>jsp页面</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--</span><br><span class=\"line\">  Created by IntelliJ IDEA.</span><br><span class=\"line\">  User: brian</span><br><span class=\"line\">  Date: <span class=\"number\">2016</span>/<span class=\"number\">3</span>/<span class=\"number\">7</span></span><br><span class=\"line\">  Time: <span class=\"number\">20</span>:<span class=\"number\">49</span></span><br><span class=\"line\">  To change <span class=\"keyword\">this</span> template use File | Settings | File Templates.</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;json交互测试&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=\"text/javascript\" src=\"$&#123;pageContext.request.contextPath &#125;/js/jquery-1.4.4.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">        <span class=\"comment\">//请求json，输出是json</span></span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">requestJson</span><span class=\"params\">()</span></span>&#123;     省略    &#125;</span><br><span class=\"line\">        <span class=\"comment\">//请求key/value，输出是json</span></span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">responseJson</span><span class=\"params\">()</span></span>&#123;    省略    &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"requestJson()\"</span> value=<span class=\"string\">\"请求json，输出是json\"</span>/&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"responseJson()\"</span> value=<span class=\"string\">\"请求key/value，输出是json\"</span>/&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonTest</span> </span>&#123;</span><br><span class=\"line\">    省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试结果</li>\n</ul>\n<h4 id=\"输入json串，输出是json串\"><a href=\"#输入json串，输出是json串\" class=\"headerlink\" title=\"输入json串，输出是json串\"></a>输入json串，输出是json串</h4><p>使用jquery的ajax提交json串，对输出的json结果进行解析。</p>\n<ul>\n<li>jsp页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请求json，输出是json</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestJson</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type:<span class=\"string\">'post'</span>,</span><br><span class=\"line\">        url:<span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/requestJson.action'</span>,</span><br><span class=\"line\">        contentType:<span class=\"string\">'application/json;charset=utf-8'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//数据格式是json串，商品信息</span></span><br><span class=\"line\">        data:<span class=\"string\">'&#123;\"name\":\"手机\",\"price\":999&#125;'</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;<span class=\"comment\">//返回json结果</span></span><br><span class=\"line\">            alert(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//请求json串(商品信息)，输出json(商品信息)</span></span><br><span class=\"line\"><span class=\"comment\">//@RequestBody将请求的商品信息的json串转成itemsCustom对象</span></span><br><span class=\"line\"><span class=\"comment\">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/requestJson\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ItemsCustom <span class=\"title\">requestJson</span><span class=\"params\">(@RequestBody ItemsCustom itemsCustom)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/JaRziR3.png\" alt=\"\"> </p>\n<p>可以看到，request和response的HTTP头的Content-Type都是<code>application/json;charset=utf-8</code></p>\n<p><img src=\"http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json-request-json-2.png\" alt=\"请求json，返回json,response的body\"></p>\n<h3 id=\"输入key-value，输出是json串\"><a href=\"#输入key-value，输出是json串\" class=\"headerlink\" title=\"输入key/value，输出是json串\"></a>输入key/value，输出是json串</h3><p>使用jquery的ajax提交key/value串，对输出的json结果进行解析</p>\n<ul>\n<li>jsp页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请求key/value，输出是json</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">responseJson</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type:<span class=\"string\">'post'</span>,</span><br><span class=\"line\">        url:<span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/responseJson.action'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//请求是key/value这里不需要指定contentType，因为默认就 是key/value类型</span></span><br><span class=\"line\">        <span class=\"comment\">//contentType:'application/json;charset=utf-8',</span></span><br><span class=\"line\">        <span class=\"comment\">//数据格式是json串，商品信息</span></span><br><span class=\"line\">        data:<span class=\"string\">'name=手机&amp;price=999'</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;<span class=\"comment\">//返回json结果</span></span><br><span class=\"line\">            alert(data.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//请求key/value，输出json</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/responseJson\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ItemsCustom <span class=\"title\">responseJson</span><span class=\"params\">(ItemsCustom itemsCustom)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/BWxt2wC.png\" alt=\"\"> </p>\n<p>可以看到，key/value键值对的默认Content-Type是<code>application/x-www-form-urlencoded</code>,同时，我们收到了响应“手机” </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"修改范例\"><a href=\"#修改范例\" class=\"headerlink\" title=\"修改范例\"></a>修改范例</h2><p>操作流程：</p>\n<p>1.进入商品查询列表页面</p>\n<p>2.点击修改，进入商品修改页面，页面中显示了要修改的商品。要修改的商品从数据库查询，根据商品id(主键)查询商品信息</p>\n<p>3.在商品修改页面，修改商品信息，修改后，点击提交</p>\n<h3 id=\"开发mapper\"><a href=\"#开发mapper\" class=\"headerlink\" title=\"开发mapper\"></a>开发mapper</h3><p>mapper：</p>\n<p>根据id查询商品信息</p>\n<p>根据id更新Items表的数据</p>\n<p>不用开发了，使用逆向工程生成的代码。</p>\n<h3 id=\"开发service\"><a href=\"#开发service\" class=\"headerlink\" title=\"开发service\"></a>开发service</h3><p>在<code>com.iot.learnssm.firstssm.service.ItemsService</code>中添加两个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//根据id查询商品信息</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Title: findItemsById&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id 查询商品的id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"function\">ItemsCustom <span class=\"title\">findItemsById</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改商品信息</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Title: updateItems&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id 修改商品的id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> itemsCustom 修改的商品信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateItems</span><span class=\"params\">(Integer id,ItemsCustom itemsCustom)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"><span class=\"number\">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure>\n<p>在<code>com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl</code>中实现接口，增加<code>itemsMapper</code>属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> ItemsMapper itemsMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ItemsCustom <span class=\"title\">findItemsById</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Items items = itemsMapper.selectByPrimaryKey(id);</span><br><span class=\"line\">    <span class=\"comment\">//中间对商品信息进行业务处理</span></span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"comment\">//返回ItemsCustom</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = <span class=\"keyword\">new</span> ItemsCustom();</span><br><span class=\"line\">    <span class=\"comment\">//将items的属性值拷贝到itemsCustom</span></span><br><span class=\"line\">    BeanUtils.copyProperties(items, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateItems</span><span class=\"params\">(Integer id, ItemsCustom itemsCustom)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加业务校验，通常在service接口对关键参数进行校验</span></span><br><span class=\"line\">    <span class=\"comment\">//校验 id是否为空，如果为空抛出异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//更新商品信息使用updateByPrimaryKeyWithBLOBs根据id更新items表中所有字段，包括 大文本类型字段</span></span><br><span class=\"line\">    <span class=\"comment\">//updateByPrimaryKeyWithBLOBs要求必须转入id</span></span><br><span class=\"line\">    itemsCustom.setId(id);</span><br><span class=\"line\">    itemsMapper.updateByPrimaryKeyWithBLOBs(itemsCustom);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"开发controller\"><a href=\"#开发controller\" class=\"headerlink\" title=\"开发controller\"></a>开发controller</h3><p>方法：</p>\n<p>​    商品信息修改页面显示</p>\n<p>​    商品信息修改提交</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"comment\">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class=\"line\"><span class=\"comment\">//比如：商品列表：/items/queryItems.action</span></span><br><span class=\"line\"><span class=\"comment\">//@RequestMapping(\"/items\")</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsService itemsService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/queryItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class=\"line\">    <span class=\"comment\">//一般建议将url和方法写成一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">queryItems</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表</span></span><br><span class=\"line\">        List&lt;ItemsCustom&gt; itemsList = itemsService.findItemsList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class=\"line\">        <span class=\"comment\">//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"items/itemsList\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息修改页面显示</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//限制http请求方法，可以post和get</span></span><br><span class=\"line\">    <span class=\"comment\">//@RequestMapping(value=\"/editItems\",method=&#123;RequestMethod.POST, RequestMethod.GET&#125;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItems</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用service根据商品id查询商品信息</span></span><br><span class=\"line\">        ItemsCustom itemsCustom = itemsService.findItemsById(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将商品信息放到model</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsCustom\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//商品修改页面</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"items/editItems\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息修改提交</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItemsSubmit</span><span class=\"params\">(HttpServletRequest request, Integer id, ItemsCustom itemsCustom)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用service更新商品信息，页面需要将商品信息传到此方法</span></span><br><span class=\"line\">        itemsService.updateItems(id, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//返回一个成功页面</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"success\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping`\"></a>@RequestMapping`</h3><ul>\n<li>url映射</li>\n</ul>\n<p>定义controller方法对应的url，进行处理器映射使用。</p>\n<ul>\n<li>窄化请求映射</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"comment\">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class=\"line\"><span class=\"comment\">//比如：商品列表：/items/queryItems.action</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/items\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController</span> </span>&#123;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>限制http请求方法</li>\n</ul>\n<p>出于安全性考虑，对http的链接进行方法限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//商品信息修改页面显示</span></span><br><span class=\"line\">    <span class=\"comment\">//@RequestMapping(\"/editItems\")</span></span><br><span class=\"line\">    <span class=\"comment\">//限制http请求方法，可以post和get</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/editItems\"</span>,method=&#123;RequestMethod.POST, RequestMethod.GET&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">editItems</span><span class=\"params\">()</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure>\n<p>如果限制请求为post方法，进行get请求，即将上面代码的注解改为<code>@RequestMapping(value=&quot;/editItems&quot;,method={RequestMethod.POST})</code></p>\n<p>报错，状态码405：</p>\n<p><img src=\"https://i.imgur.com/yrIoRte.png\" alt=\"\"> </p>\n<p>controller方法的返回值</p>\n<p>返回<code>ModelAndView</code></p>\n<p>需要方法结束时，定义ModelAndView，将model和view分别进行设置。</p>\n<p>返回string</p>\n<p>如果controller方法返回string</p>\n<p>1.表示返回逻辑视图名。</p>\n<p>真正视图(jsp路径)=前缀+逻辑视图名+后缀</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/editItems\"</span>,method=&#123;RequestMethod.POST,RequestMethod.GET&#125;)</span><br><span class=\"line\"><span class=\"comment\">//@RequestParam里边指定request传入参数名称和形参进行绑定。</span></span><br><span class=\"line\"><span class=\"comment\">//通过required属性指定参数是否必须要传入</span></span><br><span class=\"line\"><span class=\"comment\">//通过defaultValue可以设置默认值，如果id参数没有传入，将默认值和形参绑定。</span></span><br><span class=\"line\"><span class=\"comment\">//public String editItems(Model model, @RequestParam(value=\"id\",required=true) Integer items_id)throws Exception &#123;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItems</span><span class=\"params\">(Model model)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用service根据商品id查询商品信息</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = itemsService.findItemsById(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过形参中的model将model数据传到页面</span></span><br><span class=\"line\">    <span class=\"comment\">//相当于modelAndView.addObject方法</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"itemsCustom\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"items/editItems\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.redirect重定向</p>\n<p>商品修改提交后，重定向到商品查询列表。</p>\n<p>redirect重定向特点：浏览器地址栏中的url会变化。修改提交的request数据无法传到重定向的地址。因为重定向后重新进行request（request无法共享）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//重定向到商品查询列表</span><br><span class=\"line\">//return &quot;redirect:queryItems.action&quot;;</span><br></pre></td></tr></table></figure>\n<p>3.forward页面转发</p>\n<p>通过forward进行页面转发，浏览器地址栏url不变，request可以共享。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//页面转发</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">\"forward:queryItems.action\"</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>返回void</li>\n</ul>\n<p>在controller方法形参上可以定义request和response，使用request或response指定响应结果：</p>\n<p>1.使用request转向页面，如下：</p>\n<p><code>request.getRequestDispatcher(&quot;页面路径&quot;).forward(request, response);</code></p>\n<p>2.也可以通过response页面重定向：</p>\n<p><code>response.sendRedirect(&quot;url&quot;)</code></p>\n<p>3.也可以通过response指定响应结果，例如响应json数据如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">response.getWriter().write(<span class=\"string\">\"json串\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"注解开发之集合类型参数绑定\"><a href=\"#注解开发之集合类型参数绑定\" class=\"headerlink\" title=\"注解开发之集合类型参数绑定\"></a>注解开发之集合类型参数绑定</h2><p>本文主要介绍注解开发的集合类型参数绑定，包括数组绑定，list绑定以及map绑定</p>\n<h3 id=\"数组绑定\"><a href=\"#数组绑定\" class=\"headerlink\" title=\"数组绑定\"></a>数组绑定</h3><h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>商品批量删除，用户在页面选择多个商品，批量删除。</p>\n<h3 id=\"表现层实现\"><a href=\"#表现层实现\" class=\"headerlink\" title=\"表现层实现\"></a>表现层实现</h3><p>关键：将页面选择(多选)的商品id，传到controller方法的形参，方法形参使用数组接收页面请求的多个商品id。</p>\n<ul>\n<li>controller方法定义：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批量删除 商品信息</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/deleteItems\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deleteItems</span><span class=\"params\">(Integer[] items_id)</span> <span class=\"keyword\">throws</span> Exception</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面定义：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;itemsList &#125;\"</span> var=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;input type=\"checkbox\" name=\"items_id\" value=\"$&#123;item.id&#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.name &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.price &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;td&gt;&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/items/editItems.action?id=$&#123;item.id&#125;\"&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"list绑定\"><a href=\"#list绑定\" class=\"headerlink\" title=\"list绑定\"></a>list绑定</h2><h3 id=\"需求-1\"><a href=\"#需求-1\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>通常在需要批量提交数据时，将提交的数据绑定到<code>list&lt;pojo&gt;</code>中，比如：成绩录入（录入多门课成绩，批量提交），</p>\n<p>本例子需求：批量商品修改，在页面输入多个商品信息，将多个商品信息提交到controller方法中。</p>\n<h3 id=\"表现层实现-1\"><a href=\"#表现层实现-1\" class=\"headerlink\" title=\"表现层实现\"></a>表现层实现</h3><ul>\n<li>controller方法定义：<ul>\n<li>1、进入批量商品修改页面(页面样式参考商品列表实现)</li>\n<li>2、批量修改商品提交</li>\n</ul>\n</li>\n</ul>\n<p>使用List接收页面提交的批量数据，通过包装pojo接收，在包装pojo中定义<code>list&lt;pojo&gt;</code>属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsQueryVo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Items items;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了系统 可扩展性，对原始生成的po进行扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsCustom itemsCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//批量商品信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;ItemsCustom&gt; itemsList;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 批量修改商品提交</span></span><br><span class=\"line\"><span class=\"comment\">// 通过ItemsQueryVo接收批量提交的商品信息，将商品信息存储到itemsQueryVo中itemsList属性中。</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsAllSubmit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsAllSubmit</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面定义：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;itemsList &#125;\"</span> var=<span class=\"string\">\"item\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].name\" value=\"$&#123;item.name &#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].price\" value=\"$&#123;item.price &#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].createtime\" value=\"&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">        &lt;td&gt;&lt;input name=\"itemsList[$&#123;status.index &#125;].detail\" value=\"$&#123;item.detail &#125;\"/&gt;&lt;/td&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n<p>name的格式：</p>\n<p><strong>对应包装pojo中的list类型属性名[下标(从0开始)].包装pojo中List类型的属性中pojo的属性名</strong></p>\n<p>例子：</p>\n<p><code>&quot;name=&quot;itemsList[${status.index }].price&quot;</code></p>\n<p><em>可以和包装类型的参数绑定归纳对比一下，其实就是在包装类的pojo基础上多了个下标。只不过包装类参数绑定时，要和包装pojo中的pojo类性的属性名一致，而list参数绑定时，要和包装pojo中的list类型的属性名一致。</em></p>\n<h3 id=\"map绑定\"><a href=\"#map绑定\" class=\"headerlink\" title=\"map绑定\"></a>map绑定</h3><p>也通过在包装pojo中定义map类型属性。</p>\n<p>在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。</p>\n<ul>\n<li>包装类中定义Map对象如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueryVo</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Map&lt;String, Object&gt; itemInfo = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">  <span class=\"comment\">//get/set方法..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面定义如下：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">&lt;td&gt;学生信息：&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">姓名：&lt;inputtype=<span class=\"string\">\"text\"</span>name=<span class=\"string\">\"itemInfo['name']\"</span>/&gt;</span><br><span class=\"line\">年龄：&lt;inputtype=<span class=\"string\">\"text\"</span>name=<span class=\"string\">\"itemInfo['price']\"</span>/&gt;</span><br><span class=\"line\">.. .. ..</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Contrller方法定义如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">useraddsubmit</span><span class=\"params\">(Model model,QueryVo queryVo)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">System.out.println(queryVo.getStudentinfo());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"springmvc校验\"><a href=\"#springmvc校验\" class=\"headerlink\" title=\"springmvc校验\"></a>springmvc校验</h2><p>本文主要介绍springmvc校验，包括环境准备，校验器配置，pojo张添加校验规则，捕获和显示检验错误信息以及分组校验简单示例。</p>\n<h3 id=\"校验理解\"><a href=\"#校验理解\" class=\"headerlink\" title=\"校验理解\"></a>校验理解</h3><p>项目中，通常使用较多是前端的校验，比如页面中js校验。对于安全要求较高点建议在服务端进行校验。</p>\n<p>服务端校验：</p>\n<ul>\n<li>控制层conroller：校验页面请求的参数的合法性。在服务端控制层conroller校验，不区分客户端类型（浏览器、手机客户端、远程调用）</li>\n<li>业务层service（使用较多）：主要校验关键业务参数，仅限于service接口中使用的参数。</li>\n<li>持久层dao：一般是不校验的。</li>\n</ul>\n<h3 id=\"springmvc校验需求\"><a href=\"#springmvc校验需求\" class=\"headerlink\" title=\"springmvc校验需求\"></a>springmvc校验需求</h3><p>springmvc使用hibernate的校验框架validation(和hibernate没有任何关系)。</p>\n<p>校验思路：</p>\n<p>页面提交请求的参数，请求到controller方法中，使用validation进行校验。如果校验出错，将错误信息展示到页面。</p>\n<p>具体需求：</p>\n<p>商品修改，添加校验（校验商品名称长度，生产日期的非空校验），如果校验出错，在商品修改页面显示错误信息。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><p>我们需要三个jar包：</p>\n<ul>\n<li>hibernate-validator.jar</li>\n<li>jboss-logging.jar</li>\n<li>validation-api.jar</li>\n</ul>\n<p>这里我们添加maven依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- hibernate 校验 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.2.4.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，另外两个jar包被<code>hibernate-validator</code>依赖，所以不用再额外添加了。</p>\n<h3 id=\"配置校验器\"><a href=\"#配置校验器\" class=\"headerlink\" title=\"配置校验器\"></a>配置校验器</h3><ul>\n<li><p>在springmvc.xml中添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 校验器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"validator\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- hibernate校验器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"providerClass\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"org.hibernate.validator.HibernateValidator\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validationMessageSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"messageSource\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 校验错误信息配置文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"messageSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.context.support.ReloadableResourceBundleMessageSource\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 资源文件名--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basenames\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>classpath:CustomValidationMessages<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 资源文件编码格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fileEncodings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 对资源文件内容缓存时间，单位秒 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheSeconds\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"120\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>校验器注入到处理器适配器中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> <span class=\"attr\">conversion-service</span>=<span class=\"string\">\"conversionService\"</span> <span class=\"attr\">validator</span>=<span class=\"string\">\"validator\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在CustomValidationMessages.properties配置校验错误信息：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加校验的错误提示信息</span><br><span class=\"line\">items.name.length.error=请输入1到30个字符的商品名称</span><br><span class=\"line\">items.createtime.isNUll=请输入商品的生产日期</span><br></pre></td></tr></table></figure>\n<h3 id=\"在pojo中添加校验规则\"><a href=\"#在pojo中添加校验规则\" class=\"headerlink\" title=\"在pojo中添加校验规则\"></a>在pojo中添加校验规则</h3><p>在ItemsCustom.java中添加校验规则：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Items</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">    <span class=\"comment\">//校验名称在1到30字符中间</span></span><br><span class=\"line\">    <span class=\"comment\">//message是提示校验出错显示的信息</span></span><br><span class=\"line\">    <span class=\"comment\">//groups：此校验属于哪个分组，groups可以定义多个分组</span></span><br><span class=\"line\">    <span class=\"meta\">@Size</span>(min=<span class=\"number\">1</span>,max=<span class=\"number\">30</span>,message=<span class=\"string\">\"&#123;items.name.length.error&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Float price;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String pic;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//非空校验</span></span><br><span class=\"line\">    <span class=\"meta\">@NotNull</span>(message=<span class=\"string\">\"&#123;items.createtime.isNUll&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date createtime;</span><br></pre></td></tr></table></figure>\n<h3 id=\"捕获和显示校验错误信息\"><a href=\"#捕获和显示校验错误信息\" class=\"headerlink\" title=\"捕获和显示校验错误信息\"></a>捕获和显示校验错误信息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsSubmit</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Model model,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Integer id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Validated ItemsCustom itemsCustom,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        BindingResult bindingResult)</span><span class=\"keyword\">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在controller中将错误信息传到页面即可</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取校验错误信息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(bindingResult.hasErrors())&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出错误信息</span></span><br><span class=\"line\">    List&lt;ObjectError&gt; allErrors = bindingResult.getAllErrors();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ObjectError objectError :allErrors)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输出错误信息</span></span><br><span class=\"line\">        System.out.println(objectError.getDefaultMessage());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 将错误信息传到页面</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"allErrors\"</span>, allErrors);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可以直接使用model将提交pojo回显到页面</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"items\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 出错重新到商品修改页面</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"items/editItems\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面显示错误信息：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 显示错误信息 --&gt;</span><br><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">\"$&#123;allErrors!=null &#125;\"</span>&gt;</span><br><span class=\"line\">    &lt;c:forEach items=<span class=\"string\">\"$&#123;allErrors &#125;\"</span> var=<span class=\"string\">\"error\"</span>&gt;</span><br><span class=\"line\">        $&#123; error.defaultMessage&#125;&lt;br/&gt;</span><br><span class=\"line\">    &lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分组校验\"><a href=\"#分组校验\" class=\"headerlink\" title=\"分组校验\"></a>分组校验</h3><ul>\n<li><p>需求：</p>\n<p>在pojo中定义校验规则，而pojo是被多个controller所共用，当不同的controller方法对同一个pojo进行校验，但是每个controller方法需要不同的校验</p>\n<p>解决方法：</p>\n<p>定义多个校验分组（其实是一个java接口），分组中定义有哪些规则</p>\n<p>每个controller方法使用不同的校验分组</p>\n</li>\n</ul>\n<p>1.校验分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ValidGroup1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//接口中不需要定义任何方法，仅是对不同的校验规则进行分组</span></span><br><span class=\"line\">    <span class=\"comment\">//此分组只校验商品名称长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.在校验规则中添加分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//校验名称在1到30字符中间</span></span><br><span class=\"line\"><span class=\"comment\">//message是提示校验出错显示的信息</span></span><br><span class=\"line\"><span class=\"comment\">//groups：此校验属于哪个分组，groups可以定义多个分组</span></span><br><span class=\"line\"><span class=\"meta\">@Size</span>(min=<span class=\"number\">1</span>,max=<span class=\"number\">30</span>,message=<span class=\"string\">\"&#123;items.name.length.error&#125;\"</span>,groups = &#123;ValidGroup1.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br></pre></td></tr></table></figure>\n<p>3.在controller方法使用指定分组的校验</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// value=&#123;ValidGroup1.class&#125;指定使用ValidGroup1分组的校验</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsSubmit</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Model model,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Integer id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @Validated(value = ValidGroup1.class)</span>ItemsCustom itemsCustom,</span></span><br><span class=\"line\"><span class=\"function\">        BindingResult bindingResult)<span class=\"keyword\">throws</span> Exception </span>&#123;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据回显\"><a href=\"#数据回显\" class=\"headerlink\" title=\"数据回显\"></a>数据回显</h2><p>本文介绍springmvc中数据回显的几种实现方法</p>\n<p>数据回显：提交后，如果出现错误，将刚才提交的数据回显到刚才的提交页面。</p>\n<h3 id=\"pojo数据回显方法\"><a href=\"#pojo数据回显方法\" class=\"headerlink\" title=\"pojo数据回显方法\"></a>pojo数据回显方法</h3><p>1.springmvc默认对pojo数据进行回显。</p>\n<p><strong>pojo数据传入controller方法后，springmvc自动将pojo数据放到request域，key等于pojo类型（首字母小写）</strong></p>\n<p>使用<code>@ModelAttribute</code>指定pojo回显到页面在request中的key</p>\n<p>2.<code>@ModelAttribute</code>还可以将方法的返回值传到页面</p>\n<p>在商品查询列表页面，通过商品类型查询商品信息。在controller中定义商品类型查询方法，最终将商品类型传到页面。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> // 商品分类</span><br><span class=\"line\">//itemtypes表示最终将方法返回值放在request中的key</span><br><span class=\"line\">@ModelAttribute(&quot;itemtypes&quot;)</span><br><span class=\"line\">public Map&lt;String, String&gt; getItemTypes() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, String&gt; itemTypes = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">    itemTypes.put(&quot;101&quot;, &quot;数码&quot;);</span><br><span class=\"line\">    itemTypes.put(&quot;102&quot;, &quot;母婴&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return itemTypes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面上可以得到itemTypes数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">    商品名称：&lt;input name=&quot;itemsCustom.name&quot; /&gt;</span><br><span class=\"line\">    商品类型：</span><br><span class=\"line\">    &lt;select name=&quot;itemtype&quot;&gt;</span><br><span class=\"line\">        &lt;c:forEach items=&quot;$&#123;itemtypes&#125;&quot; var=&quot;itemtype&quot;&gt;</span><br><span class=\"line\">            &lt;option value=&quot;$&#123;itemtype.key &#125;&quot;&gt;$&#123;itemtype.value &#125;&lt;/option&gt;</span><br><span class=\"line\">        &lt;/c:forEach&gt;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">&lt;/td&gt;</span><br></pre></td></tr></table></figure>\n<p>3.使用最简单方法使用model，可以不用<code>@ModelAttribute</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//可以直接使用model将提交pojo回显到页面</span><br><span class=\"line\">//model.addAttribute(&quot;items&quot;, itemsCustom);</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单类型数据回显\"><a href=\"#简单类型数据回显\" class=\"headerlink\" title=\"简单类型数据回显\"></a>简单类型数据回显</h3><p>使用最简单方法使用model</p>\n<p><code>model.addAttribute(&quot;id&quot;, id);</code></p>\n<h2 id=\"异常处理器\"><a href=\"#异常处理器\" class=\"headerlink\" title=\"异常处理器\"></a>异常处理器</h2><p>本文主要介绍springmvc中异常处理的思路，并展示如何自定义异常处理类以及全局异常处理器的配置</p>\n<h3 id=\"异常处理思路\"><a href=\"#异常处理思路\" class=\"headerlink\" title=\"异常处理思路\"></a>异常处理思路</h3><p>系统中异常包括两类：</p>\n<ul>\n<li>预期异常</li>\n<li>运行时异常RuntimeException</li>\n</ul>\n<p>前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。</p>\n<p>系统的dao、service、controller出现都通过throws Exception向上抛出，最后由springmvc前端控制器交由异常处理器进行异常处理，如下图：</p>\n<p><img src=\"https://i.imgur.com/dnlo4hb.png\" alt=\"\"> </p>\n<h3 id=\"自定义异常类\"><a href=\"#自定义异常类\" class=\"headerlink\" title=\"自定义异常类\"></a>自定义异常类</h3><p>对不同的异常类型定义异常类，继承Exception。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.exception;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by brian on 2016/3/7.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 系统 自定义异常类，针对预期的异常，需要在程序中抛出此类的异常</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomException</span>  <span class=\"keyword\">extends</span>  <span class=\"title\">Exception</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//异常信息</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomException</span><span class=\"params\">(String message)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getMessage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局异常处理器\"><a href=\"#全局异常处理器\" class=\"headerlink\" title=\"全局异常处理器\"></a>全局异常处理器</h3><p>思路：</p>\n<p>系统遇到异常，在程序中手动抛出，dao抛给service、service给controller、controller抛给前端控制器，前端控制器调用全局异常处理器。</p>\n<p>全局异常处理器处理思路：</p>\n<p>解析出异常类型</p>\n<ul>\n<li>如果该异常类型是系统自定义的异常，直接取出异常信息，在错误页面展示</li>\n<li>如果该异常类型不是系统自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</li>\n</ul>\n<p>springmvc提供一个<code>HandlerExceptionResolver</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//handler就是处理器适配器要执行Handler对象（只有method）</span></span><br><span class=\"line\">        <span class=\"comment\">//解析出异常类型</span></span><br><span class=\"line\">        <span class=\"comment\">//如果该 异常类型是系统 自定义的异常，直接取出异常信息，在错误页面展示</span></span><br><span class=\"line\">        <span class=\"comment\">//String message = null;</span></span><br><span class=\"line\">        <span class=\"comment\">//if(ex instanceof CustomException)&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//message = ((CustomException)ex).getMessage();</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;else&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">////如果该 异常类型不是系统 自定义的异常，构造一个自定义的异常类型（信息为“未知错误”）</span></span><br><span class=\"line\">            <span class=\"comment\">//message=\"未知错误\";</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//上边代码变为</span></span><br><span class=\"line\">        CustomException customException;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ex <span class=\"keyword\">instanceof</span> CustomException)&#123;</span><br><span class=\"line\">            customException = (CustomException)ex;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            customException = <span class=\"keyword\">new</span> CustomException(<span class=\"string\">\"未知错误\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//错误信息</span></span><br><span class=\"line\">        String message = customException.getMessage();</span><br><span class=\"line\"></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将错误信息传到页面</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"message\"</span>, message);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//指向错误页面</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"错误页面\"><a href=\"#错误页面\" class=\"headerlink\" title=\"错误页面\"></a>错误页面</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--</span><br><span class=\"line\">  Created by IntelliJ IDEA.</span><br><span class=\"line\">  User: Brian</span><br><span class=\"line\">  Date: <span class=\"number\">2016</span>/<span class=\"number\">3</span>/<span class=\"number\">4</span></span><br><span class=\"line\">  Time: <span class=\"number\">10</span>:<span class=\"number\">51</span></span><br><span class=\"line\">  To change <span class=\"keyword\">this</span> template use File | Settings | File Templates.</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;错误提示&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">$&#123;message&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在springmvc-xml配置全局异常处理器\"><a href=\"#在springmvc-xml配置全局异常处理器\" class=\"headerlink\" title=\"在springmvc.xml配置全局异常处理器\"></a>在springmvc.xml配置全局异常处理器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 全局异常处理器</span></span><br><span class=\"line\"><span class=\"comment\">只要实现HandlerExceptionResolver接口就是全局异常处理器</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.exception.CustomExceptionResolver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>全局异常处理器只有一个，配置多个也没用。</p>\n<h3 id=\"异常测试\"><a href=\"#异常测试\" class=\"headerlink\" title=\"异常测试\"></a>异常测试</h3><p>在controller、service、dao中任意一处需要手动抛出异常。如果是程序中手动抛出的异常，在错误页面中显示自定义的异常信息，如果不是手动抛出异常说明是一个运行时异常，在错误页面只显示“未知错误”。</p>\n<ul>\n<li>在商品修改的controller方法中抛出异常 .</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItems</span><span class=\"params\">(Model model,@RequestParam(value=<span class=\"string\">\"id\"</span>,required=<span class=\"keyword\">true</span>)</span> Integer items_id)<span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//调用service根据商品id查询商品信息</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = itemsService.findItemsById(items_id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断商品是否为空，根据id没有查询到商品，抛出异常，提示用户商品信息不存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(itemsCustom == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CustomException(<span class=\"string\">\"修改的商品信息不存在!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过形参中的model将model数据传到页面</span></span><br><span class=\"line\">    <span class=\"comment\">//相当于modelAndView.addObject方法</span></span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">\"items\"</span>, itemsCustom);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"items/editItems\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在service接口中抛出异常：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ItemsCustom <span class=\"title\">findItemsById</span><span class=\"params\">(Integer id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Items items = itemsMapper.selectByPrimaryKey(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(items==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CustomException(<span class=\"string\">\"修改的商品信息不存在!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//中间对商品信息进行业务处理</span></span><br><span class=\"line\">    <span class=\"comment\">//....</span></span><br><span class=\"line\">    <span class=\"comment\">//返回ItemsCustom</span></span><br><span class=\"line\">    ItemsCustom itemsCustom = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将items的属性值拷贝到itemsCustom</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(items!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        itemsCustom = <span class=\"keyword\">new</span> ItemsCustom();</span><br><span class=\"line\">        BeanUtils.copyProperties(items, itemsCustom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果与业务功能相关的异常，建议在service中抛出异常。</li>\n<li>与业务功能没有关系的异常，建议在controller中抛出。</li>\n</ul>\n<h2 id=\"上传图片\"><a href=\"#上传图片\" class=\"headerlink\" title=\"上传图片\"></a>上传图片</h2><p>在修改商品页面，添加上传商品图片功能。</p>\n<p>在页面form中提交<code>enctype=&quot;multipart/form-data&quot;</code>的数据时，需要springmvc对multipart类型的数据进行解析。</p>\n<p>在springmvc.xml中配置multipart类型解析器。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 文件上传 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"multipartResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 设置上传文件的最大尺寸为5MB --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxUploadSize\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>5242880<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"加入上传图片的jar\"><a href=\"#加入上传图片的jar\" class=\"headerlink\" title=\"加入上传图片的jar\"></a>加入上传图片的jar</h3><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 文件上传 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>依赖树</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] \\- commons-fileupload:commons-fileupload:jar:1.3.1:compile</span><br><span class=\"line\">[INFO]    \\- commons-io:commons-io:jar:2.2:compile12</span><br></pre></td></tr></table></figure>\n<p>可以看到，其实还间接依赖了<code>commons-io:commons-io:jar</code></p>\n<h3 id=\"创建图片虚拟目录存储图片IDEA\"><a href=\"#创建图片虚拟目录存储图片IDEA\" class=\"headerlink\" title=\"创建图片虚拟目录存储图片IDEA\"></a>创建图片虚拟目录存储图片IDEA</h3><p>我使用的版本为</p>\n<ul>\n<li>tomcat 8.0.30</li>\n<li>intellij 15.0.2</li>\n<li>jdk 1.8.0_25</li>\n</ul>\n<p>已经部署好了一个web应用，并且已经在IDEA中添加好了tomcat容器，现在想为这个web应用添加一个图片虚拟目录</p>\n<h4 id=\"1-点击工具栏的运行配置Edit-Configurations\"><a href=\"#1-点击工具栏的运行配置Edit-Configurations\" class=\"headerlink\" title=\"1.点击工具栏的运行配置Edit Configurations\"></a>1.点击工具栏的运行配置<code>Edit Configurations</code></h4><p><img src=\"https://i.imgur.com/qy1gIOI.png\" alt=\"\"> </p>\n<h4 id=\"2-在弹出的Run-debug-Configurations中选中tomcat容器，选择deployment这个tab\"><a href=\"#2-在弹出的Run-debug-Configurations中选中tomcat容器，选择deployment这个tab\" class=\"headerlink\" title=\"2.在弹出的Run/debug Configurations中选中tomcat容器，选择deployment这个tab\"></a>2.在弹出的<code>Run/debug Configurations</code>中选中tomcat容器，选择<code>deployment</code>这个tab</h4><p><img src=\"https://i.imgur.com/X02XsEN.png\" alt=\"\"></p>\n<h4 id=\"3-添加物理目录和并设置虚拟目录路径\"><a href=\"#3-添加物理目录和并设置虚拟目录路径\" class=\"headerlink\" title=\"3.添加物理目录和并设置虚拟目录路径\"></a>3.添加物理目录和并设置虚拟目录路径</h4><p><img src=\"https://i.imgur.com/EoI2QPe.png\" alt=\"\"></p>\n<p>这里我选择了D盘下面的tmp文件夹作为物理目录，虚拟目录设为了<code>/pic</code>,我试了下，虽然斜杠少了也没什么影响，一样能访问，不过还是建议加上吧。</p>\n<h4 id=\"4-运行web应用，访问图片资源\"><a href=\"#4-运行web应用，访问图片资源\" class=\"headerlink\" title=\"4.运行web应用，访问图片资源\"></a>4.运行web应用，访问图片资源</h4><p>这里需要接上具体访问资源的文件名，不然后访问不到的，如下图</p>\n<p><img src=\"https://i.imgur.com/33h4wXP.png\" alt=\"\"> </p>\n<h3 id=\"tomcat配置虚拟目录映射\"><a href=\"#tomcat配置虚拟目录映射\" class=\"headerlink\" title=\"tomcat配置虚拟目录映射\"></a>tomcat配置虚拟目录映射</h3><h4 id=\"一、在Server-xml中进行配置\"><a href=\"#一、在Server-xml中进行配置\" class=\"headerlink\" title=\"一、在Server.xml中进行配置\"></a>一、在Server.xml中进行配置</h4><p>在<host>元素中添加子元素<context path=\" ...  \" docbase=\" ... \"> 并重启服务器即可；</context></host></p>\n<p>path表示虚拟目录，docBase表示真实的web应用所在目录；</p>\n<p>比如在C盘中存在a这个web应用,则 <context path=\"/test\" docbase=\"C:\\a\"></context></p>\n<p>则输入 <a href=\"http://localhost:8888/test/1.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/test/1.html</a> 就能访问到a文件夹下的 1.html</p>\n<p>注意：这种方法需要重启服务器才能够生效，所以不适用，因为每次添加一个web应用都需要重启服务器。</p>\n<h4 id=\"二、最佳配置方法\"><a href=\"#二、最佳配置方法\" class=\"headerlink\" title=\"二、最佳配置方法\"></a>二、最佳配置方法</h4><p><code>$CATALINA_BASE/conf/catalina/localhost/ 文件夹下创建一个xml文件，任意文件名都可以，但是此文件名是web应用发布后的虚拟目录；</code></p>\n<p><code>比如创建一个test.xml ，在文件中添加 &lt;Context docBase=&quot;C:\\a&quot;/&gt;</code></p>\n<p>不需要重启服务器，只需要在浏览器中输入 <a href=\"http://localhost:8888/test/1.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8888/test/1.html</a> 即可访问C:\\a\\1.html   ；</p>\n<h4 id=\"三、配置默认web应用\"><a href=\"#三、配置默认web应用\" class=\"headerlink\" title=\"三、配置默认web应用\"></a>三、配置默认web应用</h4><p>一般，输入 <a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a> 后都会跳出 tomcat的主页，因为这个tomcat的web应用就是默认的web应用，如果想将自己的web应用配置成默认的web应用，只需要在Server.xml中的<context>元素中为 <context path=\"\" docbase=\"C:\\a\"> </context></context></p>\n<p>或者将test.xml改成 ROOT.xml 即可；</p>\n<p>输入 <a href=\"http://localhost:8080/1.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/1.html</a> 就能访问C:\\a\\1.html ;</p>\n<p>注意：在图片虚拟目录中，一定将图片目录分级创建（提高i/o性能），一般我们采用按日期(年、月、日)进行分级创建。</p>\n<h3 id=\"上传图片代码\"><a href=\"#上传图片代码\" class=\"headerlink\" title=\"上传图片代码\"></a>上传图片代码</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;商品图片&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;</span><br><span class=\"line\">        &lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">\"$&#123;items.pic !=null&#125;\"</span>&gt;</span><br><span class=\"line\">            &lt;img src=<span class=\"string\">\"/pic/$&#123;items.pic&#125;\"</span> width=<span class=\"number\">100</span> height=<span class=\"number\">100</span>/&gt;</span><br><span class=\"line\">            &lt;br/&gt;</span><br><span class=\"line\">        &lt;/c:if&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">\"file\"</span>  name=<span class=\"string\">\"items_pic\"</span>/&gt;</span><br><span class=\"line\">    &lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller方法</li>\n</ul>\n<p>修改：商品修改controller方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/editItemsSubmit\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editItemsSubmit</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Model model,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            Integer id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            @ModelAttribute(<span class=\"string\">\"items\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">            @<span class=\"title\">Validated</span><span class=\"params\">(value = ValidGroup1.class)</span>ItemsCustom itemsCustom,</span></span><br><span class=\"line\"><span class=\"function\">            BindingResult bindingResult,</span></span><br><span class=\"line\"><span class=\"function\">            MultipartFile items_pic</span></span><br><span class=\"line\"><span class=\"function\">    )<span class=\"keyword\">throws</span> Exception </span>&#123;<span class=\"number\">12345678910</span></span><br><span class=\"line\"> <span class=\"comment\">//原始名称</span></span><br><span class=\"line\">String originalFilename = items_pic.getOriginalFilename();</span><br><span class=\"line\"><span class=\"comment\">//上传图片</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(items_pic!=<span class=\"keyword\">null</span> &amp;&amp; originalFilename!=<span class=\"keyword\">null</span> &amp;&amp; originalFilename.length()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//存储图片的物理路径</span></span><br><span class=\"line\">    String pic_path = <span class=\"string\">\"D:\\\\tmp\\\\\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//新的图片名称</span></span><br><span class=\"line\">    String newFileName = UUID.randomUUID() + originalFilename.substring(originalFilename.lastIndexOf(<span class=\"string\">\".\"</span>));</span><br><span class=\"line\">    <span class=\"comment\">//新图片</span></span><br><span class=\"line\">    File newFile = <span class=\"keyword\">new</span> File(pic_path+newFileName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将内存中的数据写入磁盘</span></span><br><span class=\"line\">    items_pic.transferTo(newFile);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将新图片名称写到itemsCustom中</span></span><br><span class=\"line\">    itemsCustom.setPic(newFileName);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"json数据交互\"><a href=\"#json数据交互\" class=\"headerlink\" title=\"json数据交互\"></a>json数据交互</h2><p>本文主要介绍如何在springmvc中进行json数据的交互，先是环境准备和配置，然后分别展示了“输入json串，输出是json串”和“输入key/value，输出是json串”两种情况下的交互</p>\n<h3 id=\"springmvc进行json交互\"><a href=\"#springmvc进行json交互\" class=\"headerlink\" title=\"springmvc进行json交互\"></a>springmvc进行json交互</h3><p>json数据格式在接口调用中、html页面中较常用，json格式比较简单，解析还比较方便。</p>\n<p>比如：webservice接口，传输json数据.</p>\n<p><img src=\"https://i.imgur.com/efNlNLt.png\" alt=\"\"> </p>\n<ul>\n<li><p>请求json、输出json，要求请求的是json串，所以在前端页面中需要将请求的内容转成json，不太方便。</p>\n</li>\n<li><p>请求key/value、输出json。此方法比较常用。</p>\n<h3 id=\"环境准备-1\"><a href=\"#环境准备-1\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"添加json转换的依赖\"><a href=\"#添加json转换的依赖\" class=\"headerlink\" title=\"添加json转换的依赖\"></a>添加json转换的依赖</h4><p>最开始我少了<code>jackson-databind</code>依赖，程序各种报错。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- json 转换--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.codehaus.jackson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-mapper-asl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.13<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>依赖树 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] +- com.fasterxml.jackson.core:jackson-databind:jar:2.7.2:compile</span><br><span class=\"line\">[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.7.0:compile</span><br><span class=\"line\">[INFO] |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.7.2:compile</span><br><span class=\"line\">[INFO] \\- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile</span><br><span class=\"line\">[INFO]    \\- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置json转换器\"><a href=\"#配置json转换器\" class=\"headerlink\" title=\"配置json转换器\"></a>配置json转换器</h4><p>在注解适配器中加入<code>messageConverters</code></p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注解适配器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"messageConverters\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意：如果使用&lt;mvc:annotation-driven /&gt;则不用定义上边的内容。</strong> </p>\n<h4 id=\"json交互测试\"><a href=\"#json交互测试\" class=\"headerlink\" title=\"json交互测试\"></a>json交互测试</h4><p>显示两个按钮分别测试</p>\n<ul>\n<li>jsp页面</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%--</span><br><span class=\"line\">  Created by IntelliJ IDEA.</span><br><span class=\"line\">  User: brian</span><br><span class=\"line\">  Date: <span class=\"number\">2016</span>/<span class=\"number\">3</span>/<span class=\"number\">7</span></span><br><span class=\"line\">  Time: <span class=\"number\">20</span>:<span class=\"number\">49</span></span><br><span class=\"line\">  To change <span class=\"keyword\">this</span> template use File | Settings | File Templates.</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">\"text/html;charset=UTF-8\"</span> language=<span class=\"string\">\"java\"</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;json交互测试&lt;/title&gt;</span><br><span class=\"line\">    &lt;script type=\"text/javascript\" src=\"$&#123;pageContext.request.contextPath &#125;/js/jquery-1.4.4.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">        <span class=\"comment\">//请求json，输出是json</span></span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">requestJson</span><span class=\"params\">()</span></span>&#123;     省略    &#125;</span><br><span class=\"line\">        <span class=\"comment\">//请求key/value，输出是json</span></span><br><span class=\"line\">        <span class=\"function\">function <span class=\"title\">responseJson</span><span class=\"params\">()</span></span>&#123;    省略    &#125;</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"requestJson()\"</span> value=<span class=\"string\">\"请求json，输出是json\"</span>/&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">\"button\"</span> onclick=<span class=\"string\">\"responseJson()\"</span> value=<span class=\"string\">\"请求key/value，输出是json\"</span>/&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonTest</span> </span>&#123;</span><br><span class=\"line\">    省略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试结果</li>\n</ul>\n<h4 id=\"输入json串，输出是json串\"><a href=\"#输入json串，输出是json串\" class=\"headerlink\" title=\"输入json串，输出是json串\"></a>输入json串，输出是json串</h4><p>使用jquery的ajax提交json串，对输出的json结果进行解析。</p>\n<ul>\n<li>jsp页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请求json，输出是json</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestJson</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type:<span class=\"string\">'post'</span>,</span><br><span class=\"line\">        url:<span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/requestJson.action'</span>,</span><br><span class=\"line\">        contentType:<span class=\"string\">'application/json;charset=utf-8'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//数据格式是json串，商品信息</span></span><br><span class=\"line\">        data:<span class=\"string\">'&#123;\"name\":\"手机\",\"price\":999&#125;'</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;<span class=\"comment\">//返回json结果</span></span><br><span class=\"line\">            alert(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//请求json串(商品信息)，输出json(商品信息)</span></span><br><span class=\"line\"><span class=\"comment\">//@RequestBody将请求的商品信息的json串转成itemsCustom对象</span></span><br><span class=\"line\"><span class=\"comment\">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/requestJson\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ItemsCustom <span class=\"title\">requestJson</span><span class=\"params\">(@RequestBody ItemsCustom itemsCustom)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/JaRziR3.png\" alt=\"\"> </p>\n<p>可以看到，request和response的HTTP头的Content-Type都是<code>application/json;charset=utf-8</code></p>\n<p><img src=\"http://7xph6d.com1.z0.glb.clouddn.com/springmvc_json-request-json-2.png\" alt=\"请求json，返回json,response的body\"></p>\n<h3 id=\"输入key-value，输出是json串\"><a href=\"#输入key-value，输出是json串\" class=\"headerlink\" title=\"输入key/value，输出是json串\"></a>输入key/value，输出是json串</h3><p>使用jquery的ajax提交key/value串，对输出的json结果进行解析</p>\n<ul>\n<li>jsp页面</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//请求key/value，输出是json</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">responseJson</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        type:<span class=\"string\">'post'</span>,</span><br><span class=\"line\">        url:<span class=\"string\">'$&#123;pageContext.request.contextPath &#125;/responseJson.action'</span>,</span><br><span class=\"line\">        <span class=\"comment\">//请求是key/value这里不需要指定contentType，因为默认就 是key/value类型</span></span><br><span class=\"line\">        <span class=\"comment\">//contentType:'application/json;charset=utf-8',</span></span><br><span class=\"line\">        <span class=\"comment\">//数据格式是json串，商品信息</span></span><br><span class=\"line\">        data:<span class=\"string\">'name=手机&amp;price=999'</span>,</span><br><span class=\"line\">        success:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;<span class=\"comment\">//返回json结果</span></span><br><span class=\"line\">            alert(data.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>controller</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//请求key/value，输出json</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/responseJson\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@ResponseBody</span> <span class=\"function\">ItemsCustom <span class=\"title\">responseJson</span><span class=\"params\">(ItemsCustom itemsCustom)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@ResponseBody将itemsCustom转成json输出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/BWxt2wC.png\" alt=\"\"> </p>\n<p>可以看到，key/value键值对的默认Content-Type是<code>application/x-www-form-urlencoded</code>,同时，我们收到了响应“手机” </p>\n"},{"title":"SpringMVC笔记（2）","date":"2018-07-12T14:28:27.000Z","_content":"## SpringMVC(MAVEN工程创建)\n\n### IDEA创建过程\n\n#### ①创建MAVEN（web工程）\n\n`new->project->maven`，建一个裸的maven工程\n\n#### ②添加依赖（pom.xml文件）\n\n```xml\n<dependency>\n\n    <groupId>org.springframework</groupId>\n\n    <artifactId>spring-webmvc</artifactId>\n\n    <version>4.2.4.RELEASE</version> \n           <!--版本号4.2.4-->\n</dependency>\n```\n\n#### ③配置文件--前端控制器（web.xml）\n\n```xml\n<servlet>\n    <servlet-name>springmvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)\n      若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)\n    -->\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:springmvc.xml</param-value>\n                   <!--Springmvc.xml文件的地址-->\n    </init-param>\n</servlet>\n```\n\n```xml\n<servlet-mapping>\n    <servlet-name>springmvc</servlet-name>\n    <!--\n    第一种:*.action,访问以.action结尾，由DispatcherServlet进行解析\n    第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，\n            使用此种方式和实现RESTful风格的url\n    第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，\n            不能根据jsp页面找到handler，会报错\n    -->\n    <url-pattern>*.action</url-pattern>\n</servlet-mapping>\n```\n\n![配置后的web.xml](https://i.imgur.com/FOoGJXA.png)\n\n#### ⑤配置Handler\n\n将编写Handler在spring容器加载\n\n```xml\n<!-- 配置Handler -->\n<bean name=\"/queryItems.action\" class=\"com.iot.ssm.controller.ItemsController\"/>\n```\n\n#### ⑥配置处理器映射器\n\n在classpath下的springmvc.xml中配置处理器映射器\n\n```xml\n<!-- 处理器映射器\n    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)\n-->\n<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n```\n\n#### ⑦配置处理器适配器\n\n所有处理器适配器都实现了`HandlerAdapter`接口\n\n`<bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\">`\n\n源码\n\n```java\npublic boolean supports(Object handler) {\n        return handler instanceof Controller;\n}\n```\n\n此适配器能执行实现`Controller`接口的Handler\n\n#### ⑧配置视图解析器\n\n需要配置解析jsp的视图解析器\n\n```xml\n <!-- 视图解析器\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n    -->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"/>\n```\n\n在springmvc.xml中视图解析器配置前缀和后缀：\n\n```xml\n<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <!-- 配置jsp路径的前缀 -->\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n        <!-- 配置jsp路径的后缀 -->\n        <property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n\n程序中不用指定前缀和后缀：\n\n```java\n//指定视图\n//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList\n//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n\n//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀\nmodelAndView.setViewName(\"items/itemsList\");\n```\n\n### 部署调试\n\n`HTTP Status 404 -` \n处理器映射器根据url找不到Handler,说明url错误\n\n`HTTP Status 404 -/springmvc/WEB-INF/jsp/items/itemsLists.jsp` \n处理器映射器根据url找到了Handler，转发的jsp页面找不到","source":"_posts/SpringMVC笔记（2）.md","raw":"---\ntitle: SpringMVC笔记（2）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n## SpringMVC(MAVEN工程创建)\n\n### IDEA创建过程\n\n#### ①创建MAVEN（web工程）\n\n`new->project->maven`，建一个裸的maven工程\n\n#### ②添加依赖（pom.xml文件）\n\n```xml\n<dependency>\n\n    <groupId>org.springframework</groupId>\n\n    <artifactId>spring-webmvc</artifactId>\n\n    <version>4.2.4.RELEASE</version> \n           <!--版本号4.2.4-->\n</dependency>\n```\n\n#### ③配置文件--前端控制器（web.xml）\n\n```xml\n<servlet>\n    <servlet-name>springmvc</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)\n      若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)\n    -->\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:springmvc.xml</param-value>\n                   <!--Springmvc.xml文件的地址-->\n    </init-param>\n</servlet>\n```\n\n```xml\n<servlet-mapping>\n    <servlet-name>springmvc</servlet-name>\n    <!--\n    第一种:*.action,访问以.action结尾，由DispatcherServlet进行解析\n    第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，\n            使用此种方式和实现RESTful风格的url\n    第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，\n            不能根据jsp页面找到handler，会报错\n    -->\n    <url-pattern>*.action</url-pattern>\n</servlet-mapping>\n```\n\n![配置后的web.xml](https://i.imgur.com/FOoGJXA.png)\n\n#### ⑤配置Handler\n\n将编写Handler在spring容器加载\n\n```xml\n<!-- 配置Handler -->\n<bean name=\"/queryItems.action\" class=\"com.iot.ssm.controller.ItemsController\"/>\n```\n\n#### ⑥配置处理器映射器\n\n在classpath下的springmvc.xml中配置处理器映射器\n\n```xml\n<!-- 处理器映射器\n    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)\n-->\n<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n```\n\n#### ⑦配置处理器适配器\n\n所有处理器适配器都实现了`HandlerAdapter`接口\n\n`<bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\">`\n\n源码\n\n```java\npublic boolean supports(Object handler) {\n        return handler instanceof Controller;\n}\n```\n\n此适配器能执行实现`Controller`接口的Handler\n\n#### ⑧配置视图解析器\n\n需要配置解析jsp的视图解析器\n\n```xml\n <!-- 视图解析器\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n    -->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"/>\n```\n\n在springmvc.xml中视图解析器配置前缀和后缀：\n\n```xml\n<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <!-- 配置jsp路径的前缀 -->\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n        <!-- 配置jsp路径的后缀 -->\n        <property name=\"suffix\" value=\".jsp\"/>\n</bean>\n```\n\n程序中不用指定前缀和后缀：\n\n```java\n//指定视图\n//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList\n//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n\n//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀\nmodelAndView.setViewName(\"items/itemsList\");\n```\n\n### 部署调试\n\n`HTTP Status 404 -` \n处理器映射器根据url找不到Handler,说明url错误\n\n`HTTP Status 404 -/springmvc/WEB-INF/jsp/items/itemsLists.jsp` \n处理器映射器根据url找到了Handler，转发的jsp页面找不到","slug":"SpringMVC笔记（2）","published":1,"updated":"2018-07-13T12:46:56.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eu9x0001igqxxvi3bs88","content":"<h2 id=\"SpringMVC-MAVEN工程创建\"><a href=\"#SpringMVC-MAVEN工程创建\" class=\"headerlink\" title=\"SpringMVC(MAVEN工程创建)\"></a>SpringMVC(MAVEN工程创建)</h2><h3 id=\"IDEA创建过程\"><a href=\"#IDEA创建过程\" class=\"headerlink\" title=\"IDEA创建过程\"></a>IDEA创建过程</h3><h4 id=\"①创建MAVEN（web工程）\"><a href=\"#①创建MAVEN（web工程）\" class=\"headerlink\" title=\"①创建MAVEN（web工程）\"></a>①创建MAVEN（web工程）</h4><p><code>new-&gt;project-&gt;maven</code>，建一个裸的maven工程</p>\n<h4 id=\"②添加依赖（pom-xml文件）\"><a href=\"#②添加依赖（pom-xml文件）\" class=\"headerlink\" title=\"②添加依赖（pom.xml文件）\"></a>②添加依赖（pom.xml文件）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> </span><br><span class=\"line\">           <span class=\"comment\">&lt;!--版本号4.2.4--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"③配置文件–前端控制器（web-xml）\"><a href=\"#③配置文件–前端控制器（web-xml）\" class=\"headerlink\" title=\"③配置文件–前端控制器（web.xml）\"></a>③配置文件–前端控制器（web.xml）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)</span></span><br><span class=\"line\"><span class=\"comment\">      若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--Springmvc.xml文件的地址--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    第一种:*.action,访问以.action结尾，由DispatcherServlet进行解析</span></span><br><span class=\"line\"><span class=\"comment\">    第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，</span></span><br><span class=\"line\"><span class=\"comment\">            使用此种方式和实现RESTful风格的url</span></span><br><span class=\"line\"><span class=\"comment\">    第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，</span></span><br><span class=\"line\"><span class=\"comment\">            不能根据jsp页面找到handler，会报错</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/FOoGJXA.png\" alt=\"配置后的web.xml\"></p>\n<h4 id=\"⑤配置Handler\"><a href=\"#⑤配置Handler\" class=\"headerlink\" title=\"⑤配置Handler\"></a>⑤配置Handler</h4><p>将编写Handler在spring容器加载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置Handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/queryItems.action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.ssm.controller.ItemsController\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"⑥配置处理器映射器\"><a href=\"#⑥配置处理器映射器\" class=\"headerlink\" title=\"⑥配置处理器映射器\"></a>⑥配置处理器映射器</h4><p>在classpath下的springmvc.xml中配置处理器映射器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 处理器映射器</span></span><br><span class=\"line\"><span class=\"comment\">    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"⑦配置处理器适配器\"><a href=\"#⑦配置处理器适配器\" class=\"headerlink\" title=\"⑦配置处理器适配器\"></a>⑦配置处理器适配器</h4><p>所有处理器适配器都实现了<code>HandlerAdapter</code>接口</p>\n<p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&gt;</code></p>\n<p>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Object handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler <span class=\"keyword\">instanceof</span> Controller;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此适配器能执行实现<code>Controller</code>接口的Handler</p>\n<h4 id=\"⑧配置视图解析器\"><a href=\"#⑧配置视图解析器\" class=\"headerlink\" title=\"⑧配置视图解析器\"></a>⑧配置视图解析器</h4><p>需要配置解析jsp的视图解析器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">   解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\">   --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在springmvc.xml中视图解析器配置前缀和后缀：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>程序中不用指定前缀和后缀：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//指定视图</span></span><br><span class=\"line\"><span class=\"comment\">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class=\"line\"><span class=\"comment\">//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class=\"line\">modelAndView.setViewName(<span class=\"string\">\"items/itemsList\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署调试\"><a href=\"#部署调试\" class=\"headerlink\" title=\"部署调试\"></a>部署调试</h3><p><code>HTTP Status 404 -</code><br>处理器映射器根据url找不到Handler,说明url错误</p>\n<p><code>HTTP Status 404 -/springmvc/WEB-INF/jsp/items/itemsLists.jsp</code><br>处理器映射器根据url找到了Handler，转发的jsp页面找不到</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SpringMVC-MAVEN工程创建\"><a href=\"#SpringMVC-MAVEN工程创建\" class=\"headerlink\" title=\"SpringMVC(MAVEN工程创建)\"></a>SpringMVC(MAVEN工程创建)</h2><h3 id=\"IDEA创建过程\"><a href=\"#IDEA创建过程\" class=\"headerlink\" title=\"IDEA创建过程\"></a>IDEA创建过程</h3><h4 id=\"①创建MAVEN（web工程）\"><a href=\"#①创建MAVEN（web工程）\" class=\"headerlink\" title=\"①创建MAVEN（web工程）\"></a>①创建MAVEN（web工程）</h4><p><code>new-&gt;project-&gt;maven</code>，建一个裸的maven工程</p>\n<h4 id=\"②添加依赖（pom-xml文件）\"><a href=\"#②添加依赖（pom-xml文件）\" class=\"headerlink\" title=\"②添加依赖（pom.xml文件）\"></a>②添加依赖（pom.xml文件）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> </span><br><span class=\"line\">           <span class=\"comment\">&lt;!--版本号4.2.4--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"③配置文件–前端控制器（web-xml）\"><a href=\"#③配置文件–前端控制器（web-xml）\" class=\"headerlink\" title=\"③配置文件–前端控制器（web.xml）\"></a>③配置文件–前端控制器（web.xml）</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)</span></span><br><span class=\"line\"><span class=\"comment\">      若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--Springmvc.xml文件的地址--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    第一种:*.action,访问以.action结尾，由DispatcherServlet进行解析</span></span><br><span class=\"line\"><span class=\"comment\">    第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，</span></span><br><span class=\"line\"><span class=\"comment\">            使用此种方式和实现RESTful风格的url</span></span><br><span class=\"line\"><span class=\"comment\">    第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，</span></span><br><span class=\"line\"><span class=\"comment\">            不能根据jsp页面找到handler，会报错</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/FOoGJXA.png\" alt=\"配置后的web.xml\"></p>\n<h4 id=\"⑤配置Handler\"><a href=\"#⑤配置Handler\" class=\"headerlink\" title=\"⑤配置Handler\"></a>⑤配置Handler</h4><p>将编写Handler在spring容器加载</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置Handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/queryItems.action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.ssm.controller.ItemsController\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"⑥配置处理器映射器\"><a href=\"#⑥配置处理器映射器\" class=\"headerlink\" title=\"⑥配置处理器映射器\"></a>⑥配置处理器映射器</h4><p>在classpath下的springmvc.xml中配置处理器映射器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 处理器映射器</span></span><br><span class=\"line\"><span class=\"comment\">    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"⑦配置处理器适配器\"><a href=\"#⑦配置处理器适配器\" class=\"headerlink\" title=\"⑦配置处理器适配器\"></a>⑦配置处理器适配器</h4><p>所有处理器适配器都实现了<code>HandlerAdapter</code>接口</p>\n<p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&gt;</code></p>\n<p>源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Object handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler <span class=\"keyword\">instanceof</span> Controller;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此适配器能执行实现<code>Controller</code>接口的Handler</p>\n<h4 id=\"⑧配置视图解析器\"><a href=\"#⑧配置视图解析器\" class=\"headerlink\" title=\"⑧配置视图解析器\"></a>⑧配置视图解析器</h4><p>需要配置解析jsp的视图解析器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">   解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\">   --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在springmvc.xml中视图解析器配置前缀和后缀：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>程序中不用指定前缀和后缀：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//指定视图</span></span><br><span class=\"line\"><span class=\"comment\">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class=\"line\"><span class=\"comment\">//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class=\"line\">modelAndView.setViewName(<span class=\"string\">\"items/itemsList\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署调试\"><a href=\"#部署调试\" class=\"headerlink\" title=\"部署调试\"></a>部署调试</h3><p><code>HTTP Status 404 -</code><br>处理器映射器根据url找不到Handler,说明url错误</p>\n<p><code>HTTP Status 404 -/springmvc/WEB-INF/jsp/items/itemsLists.jsp</code><br>处理器映射器根据url找到了Handler，转发的jsp页面找不到</p>\n"},{"title":"SpringMVC笔记（3）","date":"2018-07-12T14:28:27.000Z","_content":"## 非注解的处理器映射器和适配器\n\n### 非注解的处理器映射器\n\n```xml\n<!-- 配置Handler -->\n<bean id=\"itemsController\" name=\"/queryItems.action\" class=\"com.iot.ssm.controller.ItemsController\"/>\n\n<!-- 处理器映射器\n将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)\n -->\n<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n\n<!-- 简单url映射-->\n<bean class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n    <property name=\"mappings\">\n        <props>\n            <!-- 对 itemsController进行url映射-->\n            <prop key=\"/queryItems1.action\">itemsController</prop>\n            <prop key=\"/queryItems2.action\">itemsController</prop>\n        </props>\n    </property>\n</bean>\n```\n\n$$\n多个映射器可并存，前端控制器判断url能让哪些映射器处理就让正确的映射器处理\n$$\n\n### 非注解的处理器适配器\n\n```xml\n<!-- 处理器适配器\n     所有处理器适配器都实现了HandlerAdapter接口\n     -->\n    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/>\n```\n\n```java\npublic class ItemsController1 implements Controller {\n\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest request,\n            HttpServletResponse response) throws Exception {\n\n        //调用service查找 数据库，查询商品列表，这里使用静态数据模拟\n        List<Items> itemsList = new ArrayList<Items>();\n        //向list中填充静态数据\n\n        Items items_1 = new Items();\n        items_1.setName(\"联想笔记本\");\n        items_1.setPrice(6000f);\n        items_1.setDetail(\"ThinkPad T430 联想笔记本电脑！\");\n\n        Items items_2 = new Items();\n        items_2.setName(\"苹果手机\");\n        items_2.setPrice(5000f);\n        items_2.setDetail(\"iphone6苹果手机！\");\n\n        itemsList.add(items_1);\n        itemsList.add(items_2);\n\n        //返回ModelAndView\n        ModelAndView modelAndView =  new ModelAndView();\n        //相当 于request的setAttribut，在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\", itemsList);\n\n        //指定视图\n        modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n\n        return modelAndView;\n    }\n\n}\n```\n\n要求编写的Handler实现`Controller`接口\n\n`<bean class=\"org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter\"/>`\n\n要求编写的Handler实现`HttpRequestHandler`接口\n\n```java\npackage com.iot.ssm.controller;\n\nimport com.iot.ssm.po.Items;\nimport org.springframework.web.HttpRequestHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by brian on 2016/2/19.\n */\npublic class ItemsController2 implements HttpRequestHandler{\n    public void handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException, IOException {\n        //调用service查找数据库，查询商品列表，这里使用静态数据模拟\n        List<Items> itemsList = new ArrayList<Items>();\n\n        //向list中填充静态数据\n        Items items_1 = new Items();\n        items_1.setName(\"联想笔记本\");\n        items_1.setPrice(6000f);\n        items_1.setDetail(\"ThinkPad T430 联想笔记本电脑！\");\n\n        Items items_2 = new Items();\n        items_2.setName(\"苹果手机\");\n        items_2.setPrice(5000f);\n        items_2.setDetail(\"iphone6苹果手机！\");\n\n        itemsList.add(items_1);\n        itemsList.add(items_2);\n\n        //设置模型数据\n        httpServletRequest.setAttribute(\"itemsList\",itemsList);\n\n        //设置转发的视图\n        httpServletRequest.getRequestDispatcher(\"/WEB-INF/jsp/items/itemsList.jsp\").forward(httpServletRequest,httpServletResponse);\n\n    }\n}\n```\n\n`HttpRequestHandler`适配器的`handleRequest`方法返回为`void`,没有返回`ModelAndView`，可通过response修改响应内容,比如返回json数据：\n\n```java\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setContentType(\"application/json;charset=utf-8\");\nresponse.getWriter().write(\"json串\");\n```\n\n### **springmvc的默认加载**\n\n![](https://i.imgur.com/xKMnFmb.png)\n\n\n\n<a color=red>前端控制器从上边的文件中加载处理映射器、适配器、视图解析器等组件，如果不在springmvc.xml‘‘’中配置，使用默认加载的。</a>","source":"_posts/SpringMVC笔记（3）.md","raw":"---\ntitle: SpringMVC笔记（3）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n## 非注解的处理器映射器和适配器\n\n### 非注解的处理器映射器\n\n```xml\n<!-- 配置Handler -->\n<bean id=\"itemsController\" name=\"/queryItems.action\" class=\"com.iot.ssm.controller.ItemsController\"/>\n\n<!-- 处理器映射器\n将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)\n -->\n<bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n\n<!-- 简单url映射-->\n<bean class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n    <property name=\"mappings\">\n        <props>\n            <!-- 对 itemsController进行url映射-->\n            <prop key=\"/queryItems1.action\">itemsController</prop>\n            <prop key=\"/queryItems2.action\">itemsController</prop>\n        </props>\n    </property>\n</bean>\n```\n\n$$\n多个映射器可并存，前端控制器判断url能让哪些映射器处理就让正确的映射器处理\n$$\n\n### 非注解的处理器适配器\n\n```xml\n<!-- 处理器适配器\n     所有处理器适配器都实现了HandlerAdapter接口\n     -->\n    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/>\n```\n\n```java\npublic class ItemsController1 implements Controller {\n\n    @Override\n    public ModelAndView handleRequest(HttpServletRequest request,\n            HttpServletResponse response) throws Exception {\n\n        //调用service查找 数据库，查询商品列表，这里使用静态数据模拟\n        List<Items> itemsList = new ArrayList<Items>();\n        //向list中填充静态数据\n\n        Items items_1 = new Items();\n        items_1.setName(\"联想笔记本\");\n        items_1.setPrice(6000f);\n        items_1.setDetail(\"ThinkPad T430 联想笔记本电脑！\");\n\n        Items items_2 = new Items();\n        items_2.setName(\"苹果手机\");\n        items_2.setPrice(5000f);\n        items_2.setDetail(\"iphone6苹果手机！\");\n\n        itemsList.add(items_1);\n        itemsList.add(items_2);\n\n        //返回ModelAndView\n        ModelAndView modelAndView =  new ModelAndView();\n        //相当 于request的setAttribut，在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\", itemsList);\n\n        //指定视图\n        modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n\n        return modelAndView;\n    }\n\n}\n```\n\n要求编写的Handler实现`Controller`接口\n\n`<bean class=\"org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter\"/>`\n\n要求编写的Handler实现`HttpRequestHandler`接口\n\n```java\npackage com.iot.ssm.controller;\n\nimport com.iot.ssm.po.Items;\nimport org.springframework.web.HttpRequestHandler;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by brian on 2016/2/19.\n */\npublic class ItemsController2 implements HttpRequestHandler{\n    public void handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException, IOException {\n        //调用service查找数据库，查询商品列表，这里使用静态数据模拟\n        List<Items> itemsList = new ArrayList<Items>();\n\n        //向list中填充静态数据\n        Items items_1 = new Items();\n        items_1.setName(\"联想笔记本\");\n        items_1.setPrice(6000f);\n        items_1.setDetail(\"ThinkPad T430 联想笔记本电脑！\");\n\n        Items items_2 = new Items();\n        items_2.setName(\"苹果手机\");\n        items_2.setPrice(5000f);\n        items_2.setDetail(\"iphone6苹果手机！\");\n\n        itemsList.add(items_1);\n        itemsList.add(items_2);\n\n        //设置模型数据\n        httpServletRequest.setAttribute(\"itemsList\",itemsList);\n\n        //设置转发的视图\n        httpServletRequest.getRequestDispatcher(\"/WEB-INF/jsp/items/itemsList.jsp\").forward(httpServletRequest,httpServletResponse);\n\n    }\n}\n```\n\n`HttpRequestHandler`适配器的`handleRequest`方法返回为`void`,没有返回`ModelAndView`，可通过response修改响应内容,比如返回json数据：\n\n```java\nresponse.setCharacterEncoding(\"utf-8\");\nresponse.setContentType(\"application/json;charset=utf-8\");\nresponse.getWriter().write(\"json串\");\n```\n\n### **springmvc的默认加载**\n\n![](https://i.imgur.com/xKMnFmb.png)\n\n\n\n<a color=red>前端控制器从上边的文件中加载处理映射器、适配器、视图解析器等组件，如果不在springmvc.xml‘‘’中配置，使用默认加载的。</a>","slug":"SpringMVC笔记（3）","published":1,"updated":"2018-07-13T12:46:56.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0euad0004igqxuywub2wi","content":"<h2 id=\"非注解的处理器映射器和适配器\"><a href=\"#非注解的处理器映射器和适配器\" class=\"headerlink\" title=\"非注解的处理器映射器和适配器\"></a>非注解的处理器映射器和适配器</h2><h3 id=\"非注解的处理器映射器\"><a href=\"#非注解的处理器映射器\" class=\"headerlink\" title=\"非注解的处理器映射器\"></a>非注解的处理器映射器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置Handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"itemsController\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/queryItems.action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.ssm.controller.ItemsController\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 处理器映射器</span></span><br><span class=\"line\"><span class=\"comment\">将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 简单url映射--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappings\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 对 itemsController进行url映射--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"/queryItems1.action\"</span>&gt;</span>itemsController<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"/queryItems2.action\"</span>&gt;</span>itemsController<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>$$<br>多个映射器可并存，前端控制器判断url能让哪些映射器处理就让正确的映射器处理<br>$$</p>\n<h3 id=\"非注解的处理器适配器\"><a href=\"#非注解的处理器适配器\" class=\"headerlink\" title=\"非注解的处理器适配器\"></a>非注解的处理器适配器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 处理器适配器</span></span><br><span class=\"line\"><span class=\"comment\">     所有处理器适配器都实现了HandlerAdapter接口</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用service查找 数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class=\"line\">        List&lt;Items&gt; itemsList = <span class=\"keyword\">new</span> ArrayList&lt;Items&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//向list中填充静态数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Items items_1 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_1.setName(<span class=\"string\">\"联想笔记本\"</span>);</span><br><span class=\"line\">        items_1.setPrice(<span class=\"number\">6000f</span>);</span><br><span class=\"line\">        items_1.setDetail(<span class=\"string\">\"ThinkPad T430 联想笔记本电脑！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Items items_2 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_2.setName(<span class=\"string\">\"苹果手机\"</span>);</span><br><span class=\"line\">        items_2.setPrice(<span class=\"number\">5000f</span>);</span><br><span class=\"line\">        items_2.setDetail(<span class=\"string\">\"iphone6苹果手机！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        itemsList.add(items_1);</span><br><span class=\"line\">        itemsList.add(items_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView =  <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当 于request的setAttribut，在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>, itemsList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"/WEB-INF/jsp/items/itemsList.jsp\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要求编写的Handler实现<code>Controller</code>接口</p>\n<p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;/&gt;</code></p>\n<p>要求编写的Handler实现<code>HttpRequestHandler</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.ssm.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.ssm.po.Items;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.HttpRequestHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by brian on 2016/2/19.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController2</span> <span class=\"keyword\">implements</span> <span class=\"title\">HttpRequestHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class=\"line\">        List&lt;Items&gt; itemsList = <span class=\"keyword\">new</span> ArrayList&lt;Items&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向list中填充静态数据</span></span><br><span class=\"line\">        Items items_1 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_1.setName(<span class=\"string\">\"联想笔记本\"</span>);</span><br><span class=\"line\">        items_1.setPrice(<span class=\"number\">6000f</span>);</span><br><span class=\"line\">        items_1.setDetail(<span class=\"string\">\"ThinkPad T430 联想笔记本电脑！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Items items_2 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_2.setName(<span class=\"string\">\"苹果手机\"</span>);</span><br><span class=\"line\">        items_2.setPrice(<span class=\"number\">5000f</span>);</span><br><span class=\"line\">        items_2.setDetail(<span class=\"string\">\"iphone6苹果手机！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        itemsList.add(items_1);</span><br><span class=\"line\">        itemsList.add(items_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置模型数据</span></span><br><span class=\"line\">        httpServletRequest.setAttribute(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置转发的视图</span></span><br><span class=\"line\">        httpServletRequest.getRequestDispatcher(<span class=\"string\">\"/WEB-INF/jsp/items/itemsList.jsp\"</span>).forward(httpServletRequest,httpServletResponse);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>HttpRequestHandler</code>适配器的<code>handleRequest</code>方法返回为<code>void</code>,没有返回<code>ModelAndView</code>，可通过response修改响应内容,比如返回json数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">response.getWriter().write(<span class=\"string\">\"json串\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"springmvc的默认加载\"><a href=\"#springmvc的默认加载\" class=\"headerlink\" title=\"springmvc的默认加载\"></a><strong>springmvc的默认加载</strong></h3><p><img src=\"https://i.imgur.com/xKMnFmb.png\" alt=\"\"></p>\n<p><a color=\"red\">前端控制器从上边的文件中加载处理映射器、适配器、视图解析器等组件，如果不在springmvc.xml‘‘’中配置，使用默认加载的。</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"非注解的处理器映射器和适配器\"><a href=\"#非注解的处理器映射器和适配器\" class=\"headerlink\" title=\"非注解的处理器映射器和适配器\"></a>非注解的处理器映射器和适配器</h2><h3 id=\"非注解的处理器映射器\"><a href=\"#非注解的处理器映射器\" class=\"headerlink\" title=\"非注解的处理器映射器\"></a>非注解的处理器映射器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 配置Handler --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"itemsController\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/queryItems.action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.ssm.controller.ItemsController\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 处理器映射器</span></span><br><span class=\"line\"><span class=\"comment\">将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class=\"line\"><span class=\"comment\"> --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 简单url映射--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mappings\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 对 itemsController进行url映射--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"/queryItems1.action\"</span>&gt;</span>itemsController<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">prop</span> <span class=\"attr\">key</span>=<span class=\"string\">\"/queryItems2.action\"</span>&gt;</span>itemsController<span class=\"tag\">&lt;/<span class=\"name\">prop</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">props</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>$$<br>多个映射器可并存，前端控制器判断url能让哪些映射器处理就让正确的映射器处理<br>$$</p>\n<h3 id=\"非注解的处理器适配器\"><a href=\"#非注解的处理器适配器\" class=\"headerlink\" title=\"非注解的处理器适配器\"></a>非注解的处理器适配器</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 处理器适配器</span></span><br><span class=\"line\"><span class=\"comment\">     所有处理器适配器都实现了HandlerAdapter接口</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController1</span> <span class=\"keyword\">implements</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用service查找 数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class=\"line\">        List&lt;Items&gt; itemsList = <span class=\"keyword\">new</span> ArrayList&lt;Items&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//向list中填充静态数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Items items_1 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_1.setName(<span class=\"string\">\"联想笔记本\"</span>);</span><br><span class=\"line\">        items_1.setPrice(<span class=\"number\">6000f</span>);</span><br><span class=\"line\">        items_1.setDetail(<span class=\"string\">\"ThinkPad T430 联想笔记本电脑！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Items items_2 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_2.setName(<span class=\"string\">\"苹果手机\"</span>);</span><br><span class=\"line\">        items_2.setPrice(<span class=\"number\">5000f</span>);</span><br><span class=\"line\">        items_2.setDetail(<span class=\"string\">\"iphone6苹果手机！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        itemsList.add(items_1);</span><br><span class=\"line\">        itemsList.add(items_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView =  <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当 于request的setAttribut，在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>, itemsList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"/WEB-INF/jsp/items/itemsList.jsp\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要求编写的Handler实现<code>Controller</code>接口</p>\n<p><code>&lt;bean class=&quot;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&quot;/&gt;</code></p>\n<p>要求编写的Handler实现<code>HttpRequestHandler</code>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.ssm.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.ssm.po.Items;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.HttpRequestHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by brian on 2016/2/19.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController2</span> <span class=\"keyword\">implements</span> <span class=\"title\">HttpRequestHandler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleRequest</span><span class=\"params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class=\"line\">        List&lt;Items&gt; itemsList = <span class=\"keyword\">new</span> ArrayList&lt;Items&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向list中填充静态数据</span></span><br><span class=\"line\">        Items items_1 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_1.setName(<span class=\"string\">\"联想笔记本\"</span>);</span><br><span class=\"line\">        items_1.setPrice(<span class=\"number\">6000f</span>);</span><br><span class=\"line\">        items_1.setDetail(<span class=\"string\">\"ThinkPad T430 联想笔记本电脑！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Items items_2 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_2.setName(<span class=\"string\">\"苹果手机\"</span>);</span><br><span class=\"line\">        items_2.setPrice(<span class=\"number\">5000f</span>);</span><br><span class=\"line\">        items_2.setDetail(<span class=\"string\">\"iphone6苹果手机！\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        itemsList.add(items_1);</span><br><span class=\"line\">        itemsList.add(items_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置模型数据</span></span><br><span class=\"line\">        httpServletRequest.setAttribute(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置转发的视图</span></span><br><span class=\"line\">        httpServletRequest.getRequestDispatcher(<span class=\"string\">\"/WEB-INF/jsp/items/itemsList.jsp\"</span>).forward(httpServletRequest,httpServletResponse);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>HttpRequestHandler</code>适配器的<code>handleRequest</code>方法返回为<code>void</code>,没有返回<code>ModelAndView</code>，可通过response修改响应内容,比如返回json数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">response.setContentType(<span class=\"string\">\"application/json;charset=utf-8\"</span>);</span><br><span class=\"line\">response.getWriter().write(<span class=\"string\">\"json串\"</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"springmvc的默认加载\"><a href=\"#springmvc的默认加载\" class=\"headerlink\" title=\"springmvc的默认加载\"></a><strong>springmvc的默认加载</strong></h3><p><img src=\"https://i.imgur.com/xKMnFmb.png\" alt=\"\"></p>\n<p><a color=\"red\">前端控制器从上边的文件中加载处理映射器、适配器、视图解析器等组件，如果不在springmvc.xml‘‘’中配置，使用默认加载的。</a></p>\n"},{"title":"SpringMVC笔记（4）","date":"2018-07-12T14:28:27.000Z","_content":"## 注解的处理器映射器和适配器\n\n### 版本配置\n\n在spring3.1之前使用\n\n`org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping`注解映射器。\n\n在spring3.1之后使用`org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping`注解映射器。\n\n在spring3.1之前使用\n\n`org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter`注解适配器。\n\n在spring3.1之后使用`org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter`注解适配器\n\n### 映射器和适配器的配置\n\n```xml\n<!-- 注解的映射器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>\n<!-- 注解的适配器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>\n```\n\n```xml\n<!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置\n     mvc:annotation-driven默认加载很多的参数绑定方法，\n     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter\n     实际开发时使用mvc:annotation-driven\n     -->\n    <mvc:annotation-driven></mvc:annotation-driven>\n```\n\n### 开发注解Handler\n\n使用注解的映射器和注解的适配器。(使用注解的映射器和注解的适配器必须配对使用)\n\n```java\n//使用@Controller来标识它是一个控制器\n@Controller\npublic class ItemsController3 {\n\n    //商品查询列表\n    @RequestMapping(\"/queryItems\")\n    //实现 对queryItems方法和url进行映射，一个方法对应一个url\n    //一般建议将url和方法写成一样\n    public ModelAndView queryItems() throws Exception{\n        //调用service查找数据库，查询商品列表，这里使用静态数据模拟\n        List<Items> itemsList = new ArrayList<Items>();\n        //向list中填充静态数据\n        Items items_1 = new Items();\n        items_1.setName(\"联想笔记本\");\n        items_1.setPrice(6000f);\n        items_1.setDetail(\"ThinkPad T430 c3 联想笔记本电脑！\");\n        Items items_2 = new Items();\n        items_2.setName(\"苹果手机\");\n        items_2.setPrice(5000f);\n        items_2.setDetail(\"iphone6苹果手机！\");\n        itemsList.add(items_1);\n        itemsList.add(items_2);\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //相当于request的setAttribute方法,在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\",itemsList);\n        //指定视图\n        modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n        return modelAndView;\n    }\n}\n```\n\n### 在spring容器中加载Handler\n\n```xml\n <!-- 对于注解的Handler可以单个配置实际开发中加你使用组件扫描-->\n  <!--  <bean  class=\"com.iot.ssm.controller.ItemsController3\"/> -->\n    <!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包-->\n      <context:component-scan base-package=\"com.iot.ssm.controller\"></context:component-scan>\n```\n\n## ","source":"_posts/SpringMVC笔记（4）.md","raw":"---\ntitle: SpringMVC笔记（4）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n## 注解的处理器映射器和适配器\n\n### 版本配置\n\n在spring3.1之前使用\n\n`org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping`注解映射器。\n\n在spring3.1之后使用`org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping`注解映射器。\n\n在spring3.1之前使用\n\n`org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter`注解适配器。\n\n在spring3.1之后使用`org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter`注解适配器\n\n### 映射器和适配器的配置\n\n```xml\n<!-- 注解的映射器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>\n<!-- 注解的适配器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>\n```\n\n```xml\n<!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置\n     mvc:annotation-driven默认加载很多的参数绑定方法，\n     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter\n     实际开发时使用mvc:annotation-driven\n     -->\n    <mvc:annotation-driven></mvc:annotation-driven>\n```\n\n### 开发注解Handler\n\n使用注解的映射器和注解的适配器。(使用注解的映射器和注解的适配器必须配对使用)\n\n```java\n//使用@Controller来标识它是一个控制器\n@Controller\npublic class ItemsController3 {\n\n    //商品查询列表\n    @RequestMapping(\"/queryItems\")\n    //实现 对queryItems方法和url进行映射，一个方法对应一个url\n    //一般建议将url和方法写成一样\n    public ModelAndView queryItems() throws Exception{\n        //调用service查找数据库，查询商品列表，这里使用静态数据模拟\n        List<Items> itemsList = new ArrayList<Items>();\n        //向list中填充静态数据\n        Items items_1 = new Items();\n        items_1.setName(\"联想笔记本\");\n        items_1.setPrice(6000f);\n        items_1.setDetail(\"ThinkPad T430 c3 联想笔记本电脑！\");\n        Items items_2 = new Items();\n        items_2.setName(\"苹果手机\");\n        items_2.setPrice(5000f);\n        items_2.setDetail(\"iphone6苹果手机！\");\n        itemsList.add(items_1);\n        itemsList.add(items_2);\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //相当于request的setAttribute方法,在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\",itemsList);\n        //指定视图\n        modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n        return modelAndView;\n    }\n}\n```\n\n### 在spring容器中加载Handler\n\n```xml\n <!-- 对于注解的Handler可以单个配置实际开发中加你使用组件扫描-->\n  <!--  <bean  class=\"com.iot.ssm.controller.ItemsController3\"/> -->\n    <!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包-->\n      <context:component-scan base-package=\"com.iot.ssm.controller\"></context:component-scan>\n```\n\n## ","slug":"SpringMVC笔记（4）","published":1,"updated":"2018-07-13T12:46:56.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eual0005igqxqdbg2db0","content":"<h2 id=\"注解的处理器映射器和适配器\"><a href=\"#注解的处理器映射器和适配器\" class=\"headerlink\" title=\"注解的处理器映射器和适配器\"></a>注解的处理器映射器和适配器</h2><h3 id=\"版本配置\"><a href=\"#版本配置\" class=\"headerlink\" title=\"版本配置\"></a>版本配置</h3><p>在spring3.1之前使用</p>\n<p><code>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</code>注解映射器。</p>\n<p>在spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code>注解映射器。</p>\n<p>在spring3.1之前使用</p>\n<p><code>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</code>注解适配器。</p>\n<p>在spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</code>注解适配器</p>\n<h3 id=\"映射器和适配器的配置\"><a href=\"#映射器和适配器的配置\" class=\"headerlink\" title=\"映射器和适配器的配置\"></a>映射器和适配器的配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注解的适配器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class=\"line\"><span class=\"comment\">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class=\"line\"><span class=\"comment\">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\">     实际开发时使用mvc:annotation-driven</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"开发注解Handler\"><a href=\"#开发注解Handler\" class=\"headerlink\" title=\"开发注解Handler\"></a>开发注解Handler</h3><p>使用注解的映射器和注解的适配器。(使用注解的映射器和注解的适配器必须配对使用)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/queryItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class=\"line\">    <span class=\"comment\">//一般建议将url和方法写成一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">queryItems</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class=\"line\">        List&lt;Items&gt; itemsList = <span class=\"keyword\">new</span> ArrayList&lt;Items&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//向list中填充静态数据</span></span><br><span class=\"line\">        Items items_1 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_1.setName(<span class=\"string\">\"联想笔记本\"</span>);</span><br><span class=\"line\">        items_1.setPrice(<span class=\"number\">6000f</span>);</span><br><span class=\"line\">        items_1.setDetail(<span class=\"string\">\"ThinkPad T430 c3 联想笔记本电脑！\"</span>);</span><br><span class=\"line\">        Items items_2 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_2.setName(<span class=\"string\">\"苹果手机\"</span>);</span><br><span class=\"line\">        items_2.setPrice(<span class=\"number\">5000f</span>);</span><br><span class=\"line\">        items_2.setDetail(<span class=\"string\">\"iphone6苹果手机！\"</span>);</span><br><span class=\"line\">        itemsList.add(items_1);</span><br><span class=\"line\">        itemsList.add(items_2);</span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"/WEB-INF/jsp/items/itemsList.jsp\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在spring容器中加载Handler\"><a href=\"#在spring容器中加载Handler\" class=\"headerlink\" title=\"在spring容器中加载Handler\"></a>在spring容器中加载Handler</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 对于注解的Handler可以单个配置实际开发中加你使用组件扫描--&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--  &lt;bean  class=\"com.iot.ssm.controller.ItemsController3\"/&gt; --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iot.ssm.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注解的处理器映射器和适配器\"><a href=\"#注解的处理器映射器和适配器\" class=\"headerlink\" title=\"注解的处理器映射器和适配器\"></a>注解的处理器映射器和适配器</h2><h3 id=\"版本配置\"><a href=\"#版本配置\" class=\"headerlink\" title=\"版本配置\"></a>版本配置</h3><p>在spring3.1之前使用</p>\n<p><code>org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</code>注解映射器。</p>\n<p>在spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping</code>注解映射器。</p>\n<p>在spring3.1之前使用</p>\n<p><code>org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</code>注解适配器。</p>\n<p>在spring3.1之后使用<code>org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</code>注解适配器</p>\n<h3 id=\"映射器和适配器的配置\"><a href=\"#映射器和适配器的配置\" class=\"headerlink\" title=\"映射器和适配器的配置\"></a>映射器和适配器的配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 注解的适配器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class=\"line\"><span class=\"comment\">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class=\"line\"><span class=\"comment\">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\">     实际开发时使用mvc:annotation-driven</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"开发注解Handler\"><a href=\"#开发注解Handler\" class=\"headerlink\" title=\"开发注解Handler\"></a>开发注解Handler</h3><p>使用注解的映射器和注解的适配器。(使用注解的映射器和注解的适配器必须配对使用)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController3</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/queryItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class=\"line\">    <span class=\"comment\">//一般建议将url和方法写成一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">queryItems</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表，这里使用静态数据模拟</span></span><br><span class=\"line\">        List&lt;Items&gt; itemsList = <span class=\"keyword\">new</span> ArrayList&lt;Items&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//向list中填充静态数据</span></span><br><span class=\"line\">        Items items_1 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_1.setName(<span class=\"string\">\"联想笔记本\"</span>);</span><br><span class=\"line\">        items_1.setPrice(<span class=\"number\">6000f</span>);</span><br><span class=\"line\">        items_1.setDetail(<span class=\"string\">\"ThinkPad T430 c3 联想笔记本电脑！\"</span>);</span><br><span class=\"line\">        Items items_2 = <span class=\"keyword\">new</span> Items();</span><br><span class=\"line\">        items_2.setName(<span class=\"string\">\"苹果手机\"</span>);</span><br><span class=\"line\">        items_2.setPrice(<span class=\"number\">5000f</span>);</span><br><span class=\"line\">        items_2.setDetail(<span class=\"string\">\"iphone6苹果手机！\"</span>);</span><br><span class=\"line\">        itemsList.add(items_1);</span><br><span class=\"line\">        itemsList.add(items_2);</span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"/WEB-INF/jsp/items/itemsList.jsp\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在spring容器中加载Handler\"><a href=\"#在spring容器中加载Handler\" class=\"headerlink\" title=\"在spring容器中加载Handler\"></a>在spring容器中加载Handler</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 对于注解的Handler可以单个配置实际开发中加你使用组件扫描--&gt;</span></span><br><span class=\"line\"> <span class=\"comment\">&lt;!--  &lt;bean  class=\"com.iot.ssm.controller.ItemsController3\"/&gt; --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 可以扫描controller、service、...这里让扫描controller，指定controller的包--&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iot.ssm.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>## </p>\n"},{"title":"SpringMVC笔记（5）","date":"2018-07-12T14:28:27.000Z","_content":"## 前端控制器\n\n1.前端控制器接收请求\n\n调用`doDispatch`方法\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpServletRequest processedRequest = request;\n        HandlerExecutionChain mappedHandler = null;\n        boolean multipartRequestParsed = false;\n}\n```\n\n2.前端控制器调用`HandlerMapping`（处理器映射器）根据url查找Handler\n\n```\n// Determine handler for the current request.\nmappedHandler = getHandler(processedRequest);\n```\n\n```java\n/**\n\n- Return the HandlerExecutionChain for this request.\n- <p>Tries all handler mappings in order.\n- @param request current HTTP request\n- @return the HandlerExecutionChain, or {@code null} if no handler could be found\n  **/\n      protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n          for (HandlerMapping hm : this.handlerMappings) {\n              if (logger.isTraceEnabled()) {\n     logger.trace(\n             \"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n              }\n              HandlerExecutionChain handler = hm.getHandler(request);\n              if (handler != null) {\n     return handler;\n              }\n          }\n          return null;\n      }\n\n```\n\n3.调用处理器适配器执行Handler,得到执行的结果`ModelAndView mv`\n\n在`doDispatch`方法中\n\n```java\n// Actually invoke the handler.\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\n4.视图渲染，将model数据填充到request域\n\n`doDispatch`->`processDispatchResult`->`render`\n\n在`render`方法中,视图解析得到view\n\n```java\n// We need to resolve the view name.\nview = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);\n123\n```\n\n5.调用view的渲染方法，将model数据填充到request域\n\n在`render`方法中,调用`View`接口的`render`方法\n\n```java\nview.render(mv.getModelInternal(), request, response);\n```\n\n## ","source":"_posts/SpringMVC笔记（5）.md","raw":"---\ntitle: SpringMVC笔记（5）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n## 前端控制器\n\n1.前端控制器接收请求\n\n调用`doDispatch`方法\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpServletRequest processedRequest = request;\n        HandlerExecutionChain mappedHandler = null;\n        boolean multipartRequestParsed = false;\n}\n```\n\n2.前端控制器调用`HandlerMapping`（处理器映射器）根据url查找Handler\n\n```\n// Determine handler for the current request.\nmappedHandler = getHandler(processedRequest);\n```\n\n```java\n/**\n\n- Return the HandlerExecutionChain for this request.\n- <p>Tries all handler mappings in order.\n- @param request current HTTP request\n- @return the HandlerExecutionChain, or {@code null} if no handler could be found\n  **/\n      protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n          for (HandlerMapping hm : this.handlerMappings) {\n              if (logger.isTraceEnabled()) {\n     logger.trace(\n             \"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n              }\n              HandlerExecutionChain handler = hm.getHandler(request);\n              if (handler != null) {\n     return handler;\n              }\n          }\n          return null;\n      }\n\n```\n\n3.调用处理器适配器执行Handler,得到执行的结果`ModelAndView mv`\n\n在`doDispatch`方法中\n\n```java\n// Actually invoke the handler.\nmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n```\n\n4.视图渲染，将model数据填充到request域\n\n`doDispatch`->`processDispatchResult`->`render`\n\n在`render`方法中,视图解析得到view\n\n```java\n// We need to resolve the view name.\nview = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);\n123\n```\n\n5.调用view的渲染方法，将model数据填充到request域\n\n在`render`方法中,调用`View`接口的`render`方法\n\n```java\nview.render(mv.getModelInternal(), request, response);\n```\n\n## ","slug":"SpringMVC笔记（5）","published":1,"updated":"2018-07-13T12:46:57.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0euat0006igqxvmevw2d7","content":"<h2 id=\"前端控制器\"><a href=\"#前端控制器\" class=\"headerlink\" title=\"前端控制器\"></a>前端控制器</h2><p>1.前端控制器接收请求</p>\n<p>调用<code>doDispatch</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest processedRequest = request;</span><br><span class=\"line\">        HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.前端控制器调用<code>HandlerMapping</code>（处理器映射器）根据url查找Handler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Determine handler for the current request.</span><br><span class=\"line\">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">- Return the HandlerExecutionChain for this request.</span></span><br><span class=\"line\"><span class=\"comment\">- &lt;p&gt;Tries all handler mappings in order.</span></span><br><span class=\"line\"><span class=\"comment\">- <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\">- <span class=\"doctag\">@return</span> the HandlerExecutionChain, or &#123;<span class=\"doctag\">@code</span> null&#125; if no handler could be found</span></span><br><span class=\"line\"><span class=\"comment\">  **/</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (HandlerMapping hm : <span class=\"keyword\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">     logger.trace(</span><br><span class=\"line\">             <span class=\"string\">\"Testing handler map [\"</span> + hm + <span class=\"string\">\"] in DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>3.调用处理器适配器执行Handler,得到执行的结果<code>ModelAndView mv</code></p>\n<p>在<code>doDispatch</code>方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n<p>4.视图渲染，将model数据填充到request域</p>\n<p><code>doDispatch</code>-&gt;<code>processDispatchResult</code>-&gt;<code>render</code></p>\n<p>在<code>render</code>方法中,视图解析得到view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We need to resolve the view name.</span></span><br><span class=\"line\">view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br><span class=\"line\"><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>5.调用view的渲染方法，将model数据填充到request域</p>\n<p>在<code>render</code>方法中,调用<code>View</code>接口的<code>render</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.render(mv.getModelInternal(), request, response);</span><br></pre></td></tr></table></figure>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前端控制器\"><a href=\"#前端控制器\" class=\"headerlink\" title=\"前端控制器\"></a>前端控制器</h2><p>1.前端控制器接收请求</p>\n<p>调用<code>doDispatch</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest processedRequest = request;</span><br><span class=\"line\">        HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.前端控制器调用<code>HandlerMapping</code>（处理器映射器）根据url查找Handler</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Determine handler for the current request.</span><br><span class=\"line\">mappedHandler = getHandler(processedRequest);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">- Return the HandlerExecutionChain for this request.</span></span><br><span class=\"line\"><span class=\"comment\">- &lt;p&gt;Tries all handler mappings in order.</span></span><br><span class=\"line\"><span class=\"comment\">- <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\">- <span class=\"doctag\">@return</span> the HandlerExecutionChain, or &#123;<span class=\"doctag\">@code</span> null&#125; if no handler could be found</span></span><br><span class=\"line\"><span class=\"comment\">  **/</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (HandlerMapping hm : <span class=\"keyword\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">     logger.trace(</span><br><span class=\"line\">             <span class=\"string\">\"Testing handler map [\"</span> + hm + <span class=\"string\">\"] in DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>3.调用处理器适配器执行Handler,得到执行的结果<code>ModelAndView mv</code></p>\n<p>在<code>doDispatch</code>方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n<p>4.视图渲染，将model数据填充到request域</p>\n<p><code>doDispatch</code>-&gt;<code>processDispatchResult</code>-&gt;<code>render</code></p>\n<p>在<code>render</code>方法中,视图解析得到view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We need to resolve the view name.</span></span><br><span class=\"line\">view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br><span class=\"line\"><span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n<p>5.调用view的渲染方法，将model数据填充到request域</p>\n<p>在<code>render</code>方法中,调用<code>View</code>接口的<code>render</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.render(mv.getModelInternal(), request, response);</span><br></pre></td></tr></table></figure>\n<p>## </p>\n"},{"title":"SpringMVC笔记（6）","date":"2018-07-12T14:28:27.000Z","_content":"## 入门程序配置小结\n\n通过入门程序理解**springmvc**前端控制器、处理器映射器、处理器适配器、视图解析器用法。并附上入门程序的非注解的完整的配置文件，注解的完整配置文件。\n\n### 前端控制器配置：\n\n- 第一种：`*.action`，访问以`.action`结尾 由`DispatcherServlet`进行解析\n- 第二种：`/`，所以访问的地址都由`DispatcherServlet`进行解析，对于静态文件的解析需要配置不让`DispatcherServlet`进行解析,使用此种方式可以实现RESTful风格的url\n\n### 处理器映射器：\n\n- 非注解处理器映射器（了解）\n- 注解的处理器映射器（掌握）\n\n对标记`@Controller`类中标识有`@RequestMapping`的方法进行映射。在`@RequestMapping`里边定义映射的url。使用注解的映射器不用在xml中配置url和Handler的映射关系。\n\n### 处理器适配器：\n\n非注解处理器适配器（了解） \n注解的处理器适配器（掌握） \n注解处理器适配器和注解的处理器映射器是**配对使用**。理解为不能使用非注解映射器进行映射。\n\n```xml\n<mvc:annotation-driven></mvc:annotation-driven> \n```\n\n可以代替下边的配置：\n\n```xml\n<!--注解映射器 -->  \n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>  \n    <!--注解适配器 -->  \n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>  \n```\n\n## 非注解的完整的配置文件\n\n文件：`src/main/resources/springmvc.xml`\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 配置Handler -->\n    <bean name=\"/queryItems.action\" class=\"com.iot.ssm.controller.ItemsController\"/>\n\n    <!-- 处理器映射器\n    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)\n     -->\n    <bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n\n    <!-- 处理器适配器\n     所有处理器适配器都实现了HandlerAdapter接口\n     -->\n    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/>\n\n    <!-- 视图解析器\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n    -->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"/>\n\n</beans>\n```\n\n## 注解的完整的配置文件\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n   <!-- 对于注解的Handler 可以单个配置\n    实际开发中加你使用组件扫描\n    -->\n    <!--  <bean  class=\"com.iot.ssm.controller.ItemsController3\"/> -->\n    <!-- 可以扫描controller、service、...\n    这里让扫描controller，指定controller的包\n     -->\n    <context:component-scan base-package=\"com.iot.ssm.controller\"></context:component-scan>\n\n\n\n\n    <!-- 注解的映射器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>\n\n    <!-- 注解的适配器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>\n\n    <!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置\n     mvc:annotation-driven默认加载很多的参数绑定方法，\n     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter\n     实际开发时使用mvc:annotation-driven\n     -->\n    <mvc:annotation-driven></mvc:annotation-driven>\n\n    <!-- 视图解析器\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n    -->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <!-- 配置jsp路径的前缀 -->\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n        <!-- 配置jsp路径的后缀 -->\n        <property name=\"suffix\" value=\".jsp\"/>\n    </bean>\n\n</beans>\n```\n\n","source":"_posts/SpringMVC笔记（6）.md","raw":"---\ntitle: SpringMVC笔记（6）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n## 入门程序配置小结\n\n通过入门程序理解**springmvc**前端控制器、处理器映射器、处理器适配器、视图解析器用法。并附上入门程序的非注解的完整的配置文件，注解的完整配置文件。\n\n### 前端控制器配置：\n\n- 第一种：`*.action`，访问以`.action`结尾 由`DispatcherServlet`进行解析\n- 第二种：`/`，所以访问的地址都由`DispatcherServlet`进行解析，对于静态文件的解析需要配置不让`DispatcherServlet`进行解析,使用此种方式可以实现RESTful风格的url\n\n### 处理器映射器：\n\n- 非注解处理器映射器（了解）\n- 注解的处理器映射器（掌握）\n\n对标记`@Controller`类中标识有`@RequestMapping`的方法进行映射。在`@RequestMapping`里边定义映射的url。使用注解的映射器不用在xml中配置url和Handler的映射关系。\n\n### 处理器适配器：\n\n非注解处理器适配器（了解） \n注解的处理器适配器（掌握） \n注解处理器适配器和注解的处理器映射器是**配对使用**。理解为不能使用非注解映射器进行映射。\n\n```xml\n<mvc:annotation-driven></mvc:annotation-driven> \n```\n\n可以代替下边的配置：\n\n```xml\n<!--注解映射器 -->  \n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>  \n    <!--注解适配器 -->  \n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>  \n```\n\n## 非注解的完整的配置文件\n\n文件：`src/main/resources/springmvc.xml`\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 配置Handler -->\n    <bean name=\"/queryItems.action\" class=\"com.iot.ssm.controller.ItemsController\"/>\n\n    <!-- 处理器映射器\n    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)\n     -->\n    <bean class=\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"/>\n\n    <!-- 处理器适配器\n     所有处理器适配器都实现了HandlerAdapter接口\n     -->\n    <bean class=\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"/>\n\n    <!-- 视图解析器\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n    -->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"/>\n\n</beans>\n```\n\n## 注解的完整的配置文件\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n   <!-- 对于注解的Handler 可以单个配置\n    实际开发中加你使用组件扫描\n    -->\n    <!--  <bean  class=\"com.iot.ssm.controller.ItemsController3\"/> -->\n    <!-- 可以扫描controller、service、...\n    这里让扫描controller，指定controller的包\n     -->\n    <context:component-scan base-package=\"com.iot.ssm.controller\"></context:component-scan>\n\n\n\n\n    <!-- 注解的映射器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/>\n\n    <!-- 注解的适配器 -->\n    <bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/>\n\n    <!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置\n     mvc:annotation-driven默认加载很多的参数绑定方法，\n     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter\n     实际开发时使用mvc:annotation-driven\n     -->\n    <mvc:annotation-driven></mvc:annotation-driven>\n\n    <!-- 视图解析器\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n    -->\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n        <!-- 配置jsp路径的前缀 -->\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n        <!-- 配置jsp路径的后缀 -->\n        <property name=\"suffix\" value=\".jsp\"/>\n    </bean>\n\n</beans>\n```\n\n","slug":"SpringMVC笔记（6）","published":1,"updated":"2018-07-13T12:46:57.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eub0000aigqxr6vaa446","content":"<h2 id=\"入门程序配置小结\"><a href=\"#入门程序配置小结\" class=\"headerlink\" title=\"入门程序配置小结\"></a>入门程序配置小结</h2><p>通过入门程序理解<strong>springmvc</strong>前端控制器、处理器映射器、处理器适配器、视图解析器用法。并附上入门程序的非注解的完整的配置文件，注解的完整配置文件。</p>\n<h3 id=\"前端控制器配置：\"><a href=\"#前端控制器配置：\" class=\"headerlink\" title=\"前端控制器配置：\"></a>前端控制器配置：</h3><ul>\n<li>第一种：<code>*.action</code>，访问以<code>.action</code>结尾 由<code>DispatcherServlet</code>进行解析</li>\n<li>第二种：<code>/</code>，所以访问的地址都由<code>DispatcherServlet</code>进行解析，对于静态文件的解析需要配置不让<code>DispatcherServlet</code>进行解析,使用此种方式可以实现RESTful风格的url</li>\n</ul>\n<h3 id=\"处理器映射器：\"><a href=\"#处理器映射器：\" class=\"headerlink\" title=\"处理器映射器：\"></a>处理器映射器：</h3><ul>\n<li>非注解处理器映射器（了解）</li>\n<li>注解的处理器映射器（掌握）</li>\n</ul>\n<p>对标记<code>@Controller</code>类中标识有<code>@RequestMapping</code>的方法进行映射。在<code>@RequestMapping</code>里边定义映射的url。使用注解的映射器不用在xml中配置url和Handler的映射关系。</p>\n<h3 id=\"处理器适配器：\"><a href=\"#处理器适配器：\" class=\"headerlink\" title=\"处理器适配器：\"></a>处理器适配器：</h3><p>非注解处理器适配器（了解）<br>注解的处理器适配器（掌握）<br>注解处理器适配器和注解的处理器映射器是<strong>配对使用</strong>。理解为不能使用非注解映射器进行映射。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以代替下边的配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注解映射器 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--注解适配器 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"非注解的完整的配置文件\"><a href=\"#非注解的完整的配置文件\" class=\"headerlink\" title=\"非注解的完整的配置文件\"></a>非注解的完整的配置文件</h2><p>文件：<code>src/main/resources/springmvc.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置Handler --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/queryItems.action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.ssm.controller.ItemsController\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 处理器映射器</span></span><br><span class=\"line\"><span class=\"comment\">    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 处理器适配器</span></span><br><span class=\"line\"><span class=\"comment\">     所有处理器适配器都实现了HandlerAdapter接口</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"注解的完整的配置文件\"><a href=\"#注解的完整的配置文件\" class=\"headerlink\" title=\"注解的完整的配置文件\"></a>注解的完整的配置文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 对于注解的Handler 可以单个配置</span></span><br><span class=\"line\"><span class=\"comment\">    实际开发中加你使用组件扫描</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  &lt;bean  class=\"com.iot.ssm.controller.ItemsController3\"/&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以扫描controller、service、...</span></span><br><span class=\"line\"><span class=\"comment\">    这里让扫描controller，指定controller的包</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iot.ssm.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注解的适配器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class=\"line\"><span class=\"comment\">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class=\"line\"><span class=\"comment\">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\">     实际开发时使用mvc:annotation-driven</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"入门程序配置小结\"><a href=\"#入门程序配置小结\" class=\"headerlink\" title=\"入门程序配置小结\"></a>入门程序配置小结</h2><p>通过入门程序理解<strong>springmvc</strong>前端控制器、处理器映射器、处理器适配器、视图解析器用法。并附上入门程序的非注解的完整的配置文件，注解的完整配置文件。</p>\n<h3 id=\"前端控制器配置：\"><a href=\"#前端控制器配置：\" class=\"headerlink\" title=\"前端控制器配置：\"></a>前端控制器配置：</h3><ul>\n<li>第一种：<code>*.action</code>，访问以<code>.action</code>结尾 由<code>DispatcherServlet</code>进行解析</li>\n<li>第二种：<code>/</code>，所以访问的地址都由<code>DispatcherServlet</code>进行解析，对于静态文件的解析需要配置不让<code>DispatcherServlet</code>进行解析,使用此种方式可以实现RESTful风格的url</li>\n</ul>\n<h3 id=\"处理器映射器：\"><a href=\"#处理器映射器：\" class=\"headerlink\" title=\"处理器映射器：\"></a>处理器映射器：</h3><ul>\n<li>非注解处理器映射器（了解）</li>\n<li>注解的处理器映射器（掌握）</li>\n</ul>\n<p>对标记<code>@Controller</code>类中标识有<code>@RequestMapping</code>的方法进行映射。在<code>@RequestMapping</code>里边定义映射的url。使用注解的映射器不用在xml中配置url和Handler的映射关系。</p>\n<h3 id=\"处理器适配器：\"><a href=\"#处理器适配器：\" class=\"headerlink\" title=\"处理器适配器：\"></a>处理器适配器：</h3><p>非注解处理器适配器（了解）<br>注解的处理器适配器（掌握）<br>注解处理器适配器和注解的处理器映射器是<strong>配对使用</strong>。理解为不能使用非注解映射器进行映射。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以代替下边的配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注解映射器 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--注解适配器 --&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"非注解的完整的配置文件\"><a href=\"#非注解的完整的配置文件\" class=\"headerlink\" title=\"非注解的完整的配置文件\"></a>非注解的完整的配置文件</h2><p>文件：<code>src/main/resources/springmvc.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置Handler --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"/queryItems.action\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.ssm.controller.ItemsController\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 处理器映射器</span></span><br><span class=\"line\"><span class=\"comment\">    将bean的name作为url进行查找，需要在配置Handler时指定beanname(就是url)</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 处理器适配器</span></span><br><span class=\"line\"><span class=\"comment\">     所有处理器适配器都实现了HandlerAdapter接口</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"注解的完整的配置文件\"><a href=\"#注解的完整的配置文件\" class=\"headerlink\" title=\"注解的完整的配置文件\"></a>注解的完整的配置文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 对于注解的Handler 可以单个配置</span></span><br><span class=\"line\"><span class=\"comment\">    实际开发中加你使用组件扫描</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--  &lt;bean  class=\"com.iot.ssm.controller.ItemsController3\"/&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以扫描controller、service、...</span></span><br><span class=\"line\"><span class=\"comment\">    这里让扫描controller，指定controller的包</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iot.ssm.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注解的映射器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 注解的适配器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class=\"line\"><span class=\"comment\">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class=\"line\"><span class=\"comment\">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\">     实际开发时使用mvc:annotation-driven</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"SpringMVC笔记（7）","date":"2018-07-12T14:28:27.000Z","_content":"## springmvc整合mybatis(IDEA中通过maven构建)\n\n### 构建思路\n\n![](https://i.imgur.com/iFcS3QY.png)\n\n- 第一步：整合dao层\n  - mybatis和spring整合，通过spring管理mapper接口。\n  - 使用mapper的扫描器自动扫描mapper接口在spring中进行注册。\n- 第二步：整合service层\n  - 通过spring管理service接口。\n  - 使用配置方式将service接口配置在spring配置文件中。\n  - 实现事务控制。\n- 第三步：整合springmvc\n  - 由于springmvc是spring的模块，不需要整合。\n\n不同于***spring和mybatis整合***中的示例demo,**本文的整合采用maven构建**。\n\n`new->project->maven`，建一个裸的maven工程，手动建webapp的目录\n\n在`src/main`下新建文件夹`webapp`\n\n### 添加依赖\n\npom.xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.iot.learnssm</groupId>\n    <artifactId>learnssm-firstssm</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <!-- jar 版本设置 -->\n        <spring.version>4.2.4.RELEASE</spring.version>\n    </properties>\n\n\n    <dependencies>\n\n        <!-- spring框架-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aspects</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.38</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>1.2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.17</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.18</version>\n        </dependency>\n\n        <dependency>\n            <groupId>commons-dbcp</groupId>\n            <artifactId>commons-dbcp</artifactId>\n            <version>1.4</version>\n        </dependency>\n\n        <!-- JSP tag -->\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>taglibs</groupId>\n            <artifactId>standard</artifactId>\n            <version>1.1.2</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n这里添加的依赖可能有多的,但总比少包好，我开始就是引少了依赖(springframework的依赖只引用了<u>spring-mvc</u>,连<u>spring-core</u>都没引)，导致报错,以后会出一篇博客专门讲这个系列笔记中debug相关问题。\n\n### 建包\n\n在java目录下建各个package,按照maven的明明习惯:\n\n`com.公司名.项目名.模块名`\n\n这里我的包为：\n\n`com.iot.learnssm.firstssm`\n\n包含几个子包：\n\n- controller\n- mapper\n- po\n- service\n  - impl\n\n项目结构如图：\n\n![](https://i.imgur.com/hgqNyKW.png)\n\n","source":"_posts/SpringMVC笔记（7）.md","raw":"---\ntitle: SpringMVC笔记（7）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n## springmvc整合mybatis(IDEA中通过maven构建)\n\n### 构建思路\n\n![](https://i.imgur.com/iFcS3QY.png)\n\n- 第一步：整合dao层\n  - mybatis和spring整合，通过spring管理mapper接口。\n  - 使用mapper的扫描器自动扫描mapper接口在spring中进行注册。\n- 第二步：整合service层\n  - 通过spring管理service接口。\n  - 使用配置方式将service接口配置在spring配置文件中。\n  - 实现事务控制。\n- 第三步：整合springmvc\n  - 由于springmvc是spring的模块，不需要整合。\n\n不同于***spring和mybatis整合***中的示例demo,**本文的整合采用maven构建**。\n\n`new->project->maven`，建一个裸的maven工程，手动建webapp的目录\n\n在`src/main`下新建文件夹`webapp`\n\n### 添加依赖\n\npom.xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.iot.learnssm</groupId>\n    <artifactId>learnssm-firstssm</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <!-- jar 版本设置 -->\n        <spring.version>4.2.4.RELEASE</spring.version>\n    </properties>\n\n\n    <dependencies>\n\n        <!-- spring框架-->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-webmvc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-orm</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-aspects</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-test</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-jdbc</artifactId>\n            <version>${spring.version}</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>5.1.38</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis-spring</artifactId>\n            <version>1.2.4</version>\n        </dependency>\n        <dependency>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n            <version>1.2.17</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.18</version>\n        </dependency>\n\n        <dependency>\n            <groupId>commons-dbcp</groupId>\n            <artifactId>commons-dbcp</artifactId>\n            <version>1.4</version>\n        </dependency>\n\n        <!-- JSP tag -->\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n            <version>1.2</version>\n        </dependency>\n        <dependency>\n            <groupId>taglibs</groupId>\n            <artifactId>standard</artifactId>\n            <version>1.1.2</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n这里添加的依赖可能有多的,但总比少包好，我开始就是引少了依赖(springframework的依赖只引用了<u>spring-mvc</u>,连<u>spring-core</u>都没引)，导致报错,以后会出一篇博客专门讲这个系列笔记中debug相关问题。\n\n### 建包\n\n在java目录下建各个package,按照maven的明明习惯:\n\n`com.公司名.项目名.模块名`\n\n这里我的包为：\n\n`com.iot.learnssm.firstssm`\n\n包含几个子包：\n\n- controller\n- mapper\n- po\n- service\n  - impl\n\n项目结构如图：\n\n![](https://i.imgur.com/hgqNyKW.png)\n\n","slug":"SpringMVC笔记（7）","published":1,"updated":"2018-07-13T12:47:28.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eub4000cigqxfbg5ng9i","content":"<h2 id=\"springmvc整合mybatis-IDEA中通过maven构建\"><a href=\"#springmvc整合mybatis-IDEA中通过maven构建\" class=\"headerlink\" title=\"springmvc整合mybatis(IDEA中通过maven构建)\"></a>springmvc整合mybatis(IDEA中通过maven构建)</h2><h3 id=\"构建思路\"><a href=\"#构建思路\" class=\"headerlink\" title=\"构建思路\"></a>构建思路</h3><p><img src=\"https://i.imgur.com/iFcS3QY.png\" alt=\"\"></p>\n<ul>\n<li>第一步：整合dao层<ul>\n<li>mybatis和spring整合，通过spring管理mapper接口。</li>\n<li>使用mapper的扫描器自动扫描mapper接口在spring中进行注册。</li>\n</ul>\n</li>\n<li>第二步：整合service层<ul>\n<li>通过spring管理service接口。</li>\n<li>使用配置方式将service接口配置在spring配置文件中。</li>\n<li>实现事务控制。</li>\n</ul>\n</li>\n<li>第三步：整合springmvc<ul>\n<li>由于springmvc是spring的模块，不需要整合。</li>\n</ul>\n</li>\n</ul>\n<p>不同于<strong><em>spring和mybatis整合</em></strong>中的示例demo,<strong>本文的整合采用maven构建</strong>。</p>\n<p><code>new-&gt;project-&gt;maven</code>，建一个裸的maven工程，手动建webapp的目录</p>\n<p>在<code>src/main</code>下新建文件夹<code>webapp</code></p>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>pom.xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.iot.learnssm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>learnssm-firstssm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- jar 版本设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- spring框架--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.18<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- JSP tag --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里添加的依赖可能有多的,但总比少包好，我开始就是引少了依赖(springframework的依赖只引用了<u>spring-mvc</u>,连<u>spring-core</u>都没引)，导致报错,以后会出一篇博客专门讲这个系列笔记中debug相关问题。</p>\n<h3 id=\"建包\"><a href=\"#建包\" class=\"headerlink\" title=\"建包\"></a>建包</h3><p>在java目录下建各个package,按照maven的明明习惯:</p>\n<p><code>com.公司名.项目名.模块名</code></p>\n<p>这里我的包为：</p>\n<p><code>com.iot.learnssm.firstssm</code></p>\n<p>包含几个子包：</p>\n<ul>\n<li>controller</li>\n<li>mapper</li>\n<li>po</li>\n<li>service<ul>\n<li>impl</li>\n</ul>\n</li>\n</ul>\n<p>项目结构如图：</p>\n<p><img src=\"https://i.imgur.com/hgqNyKW.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"springmvc整合mybatis-IDEA中通过maven构建\"><a href=\"#springmvc整合mybatis-IDEA中通过maven构建\" class=\"headerlink\" title=\"springmvc整合mybatis(IDEA中通过maven构建)\"></a>springmvc整合mybatis(IDEA中通过maven构建)</h2><h3 id=\"构建思路\"><a href=\"#构建思路\" class=\"headerlink\" title=\"构建思路\"></a>构建思路</h3><p><img src=\"https://i.imgur.com/iFcS3QY.png\" alt=\"\"></p>\n<ul>\n<li>第一步：整合dao层<ul>\n<li>mybatis和spring整合，通过spring管理mapper接口。</li>\n<li>使用mapper的扫描器自动扫描mapper接口在spring中进行注册。</li>\n</ul>\n</li>\n<li>第二步：整合service层<ul>\n<li>通过spring管理service接口。</li>\n<li>使用配置方式将service接口配置在spring配置文件中。</li>\n<li>实现事务控制。</li>\n</ul>\n</li>\n<li>第三步：整合springmvc<ul>\n<li>由于springmvc是spring的模块，不需要整合。</li>\n</ul>\n</li>\n</ul>\n<p>不同于<strong><em>spring和mybatis整合</em></strong>中的示例demo,<strong>本文的整合采用maven构建</strong>。</p>\n<p><code>new-&gt;project-&gt;maven</code>，建一个裸的maven工程，手动建webapp的目录</p>\n<p>在<code>src/main</code>下新建文件夹<code>webapp</code></p>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>pom.xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.iot.learnssm<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>learnssm-firstssm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- jar 版本设置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>4.2.4.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- spring框架--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aspects<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.18<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- JSP tag --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jstl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>taglibs<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>standard<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里添加的依赖可能有多的,但总比少包好，我开始就是引少了依赖(springframework的依赖只引用了<u>spring-mvc</u>,连<u>spring-core</u>都没引)，导致报错,以后会出一篇博客专门讲这个系列笔记中debug相关问题。</p>\n<h3 id=\"建包\"><a href=\"#建包\" class=\"headerlink\" title=\"建包\"></a>建包</h3><p>在java目录下建各个package,按照maven的明明习惯:</p>\n<p><code>com.公司名.项目名.模块名</code></p>\n<p>这里我的包为：</p>\n<p><code>com.iot.learnssm.firstssm</code></p>\n<p>包含几个子包：</p>\n<ul>\n<li>controller</li>\n<li>mapper</li>\n<li>po</li>\n<li>service<ul>\n<li>impl</li>\n</ul>\n</li>\n</ul>\n<p>项目结构如图：</p>\n<p><img src=\"https://i.imgur.com/hgqNyKW.png\" alt=\"\"></p>\n"},{"title":"SpringMVC笔记（8）","date":"2018-07-12T14:28:27.000Z","_content":"\n## 整合dao\n首先在resource文件夹下添加两个文件：数据库配置文件和日志配置文件\n\n- 数据库配置文件db.properties\n\n```properties\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8\njdbc.username=root\njdbc.password=1231234\n```\n\n- 日志配置文件log4j.properties\n\n```properties\n# Global logging configuration\nlog4j.rootLogger=DEBUG, stdout\n# Console output...\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\n```\n\n### sqlMapConfig.xml\n\nmybatis自己的配置文件\n\n在resources目录下新建mybatis文件夹，并新建sqlMapConfig.xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\n    <!-- 全局setting配置，根据需要添加 -->\n\n    <!-- 配置别名 -->\n    <typeAliases>\n        <!-- 批量扫描别名 -->\n        <package name=\"com.iot.learnssm.firstssm.po\"/>\n    </typeAliases>\n\n    <!-- 配置mapper\n    由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。\n    必须遵循：mapper.xml和mapper.java文件同名且在一个目录\n     -->\n\n    <!-- <mappers>\n\n    </mappers> -->\n</configuration>\n```\n\n### applicationContext-dao.xml\n\n在resources目录下新建spring文件夹，并新建applicationContext-dao.xml文件\n\n配置：\n\n- 数据源\n- SqlSessionFactory\n- mapper扫描器\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 -->\n    <context:property-placeholder location=\"classpath:db.properties\" />\n    <!-- 配置数据源 ，dbcp -->\n\n    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <property name=\"maxActive\" value=\"30\" />\n        <property name=\"maxIdle\" value=\"5\" />\n    </bean>\n\n    <!-- 从整合包里找，org.mybatis:mybatis-spring:1.2.4 -->\n    <!-- sqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!-- 数据库连接池 -->\n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <!-- 加载mybatis的全局配置文件 -->\n        <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n    </bean>\n    <!-- mapper扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->\n        <property name=\"basePackage\" value=\"com.iot.learnssm.firstssm.mapper\"/>\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n       <!-- <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n       会导致数据源配置不管用，数据库连接不上。\n       且spring 4弃用\n       -->\n    </bean>\n\n</beans>\n\n```\n\n### 逆向工程生成po类及mapper(单表增删改查)\n\n### 手动定义商品查询mapper\n\n针对综合查询mapper，一般情况会有关联查询，建议自定义mapper\n\n- ItemsMapperCustom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.iot.learnssm.firstssm.mapper.ItemsMapperCustom\" >\n\n   <!-- 定义商品查询的sql片段，就是商品查询条件 -->\n   <sql id=\"query_items_where\">\n    <!-- 使用动态sql，通过if判断，满足条件进行sql拼接 -->\n    <!-- 商品查询条件通过ItemsQueryVo包装对象 中itemsCustom属性传递 -->\n        <if test=\"itemsCustom!=null\">\n            <if test=\"itemsCustom.name!=null and itemsCustom.name!=''\">\n                items.name LIKE '%${itemsCustom.name}%'\n            </if>\n        </if>\n\n   </sql>\n\n    <!-- 商品列表查询 -->\n    <!-- parameterType传入包装对象(包装了查询条件)\n        resultType建议使用扩展对象\n     -->\n    <select id=\"findItemsList\" parameterType=\"com.iot.learnssm.firstssm.po.ItemsQueryVo\"\n         resultType=\"com.iot.learnssm.firstssm.po.ItemsCustom\">\n        SELECT items.* FROM items  \n        <where>\n            <include refid=\"query_items_where\"></include>\n        </where>\n    </select>\n\n</mapper>\n```\n\n- ItemsMapperCustom.java\n\n```java\npublic interface ItemsMapperCustom {\n    //商品查询列表\n    List<ItemsCustom> findItemsList(ItemsQueryVo itemsQueryVo)throws Exception;\n}\n```\n\n- po类`ItemsCustom`\n\n```java\npackage com.iot.learnssm.firstssm.po;\n\n/**\n * Created by Brian on 2016/3/2.\n * 商品信息的扩展类\n */\npublic class ItemsCustom extends Items{\n    //添加商品信息的扩展属性\n}\n```\n\n- 输入pojo的包装类\n\n```java\npackage com.iot.learnssm.firstssm.po;\n\n/**\n * Created by Brian on 2016/3/2.\n */\npublic class ItemsQueryVo {\n\n    //商品信息\n    private Items items;\n\n    //为了系统 可扩展性，对原始生成的po进行扩展\n    private ItemsCustom itemsCustom;\n\n    public Items getItems() {\n        return items;\n    }\n\n    public void setItems(Items items) {\n        this.items = items;\n    }\n\n    public ItemsCustom getItemsCustom() {\n        return itemsCustom;\n    }\n\n    public void setItemsCustom(ItemsCustom itemsCustom) {\n        this.itemsCustom = itemsCustom;\n    }\n}\n```\n\n整合好dao后的工程目录如图\n\n\n![](https://i.imgur.com/asZVG7e.png)","source":"_posts/SpringMVC笔记（8）.md","raw":"---\ntitle: SpringMVC笔记（8）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n\n## 整合dao\n首先在resource文件夹下添加两个文件：数据库配置文件和日志配置文件\n\n- 数据库配置文件db.properties\n\n```properties\njdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8\njdbc.username=root\njdbc.password=1231234\n```\n\n- 日志配置文件log4j.properties\n\n```properties\n# Global logging configuration\nlog4j.rootLogger=DEBUG, stdout\n# Console output...\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n\n```\n\n### sqlMapConfig.xml\n\nmybatis自己的配置文件\n\n在resources目录下新建mybatis文件夹，并新建sqlMapConfig.xml文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\n    <!-- 全局setting配置，根据需要添加 -->\n\n    <!-- 配置别名 -->\n    <typeAliases>\n        <!-- 批量扫描别名 -->\n        <package name=\"com.iot.learnssm.firstssm.po\"/>\n    </typeAliases>\n\n    <!-- 配置mapper\n    由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。\n    必须遵循：mapper.xml和mapper.java文件同名且在一个目录\n     -->\n\n    <!-- <mappers>\n\n    </mappers> -->\n</configuration>\n```\n\n### applicationContext-dao.xml\n\n在resources目录下新建spring文件夹，并新建applicationContext-dao.xml文件\n\n配置：\n\n- 数据源\n- SqlSessionFactory\n- mapper扫描器\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n    <!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 -->\n    <context:property-placeholder location=\"classpath:db.properties\" />\n    <!-- 配置数据源 ，dbcp -->\n\n    <bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n        <property name=\"driverClassName\" value=\"${jdbc.driver}\"/>\n        <property name=\"url\" value=\"${jdbc.url}\"/>\n        <property name=\"username\" value=\"${jdbc.username}\" />\n        <property name=\"password\" value=\"${jdbc.password}\" />\n        <property name=\"maxActive\" value=\"30\" />\n        <property name=\"maxIdle\" value=\"5\" />\n    </bean>\n\n    <!-- 从整合包里找，org.mybatis:mybatis-spring:1.2.4 -->\n    <!-- sqlSessionFactory -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <!-- 数据库连接池 -->\n        <property name=\"dataSource\" ref=\"dataSource\" />\n        <!-- 加载mybatis的全局配置文件 -->\n        <property name=\"configLocation\" value=\"classpath:mybatis/sqlMapConfig.xml\" />\n    </bean>\n    <!-- mapper扫描器 -->\n    <bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->\n        <property name=\"basePackage\" value=\"com.iot.learnssm.firstssm.mapper\"/>\n        <property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\" />\n       <!-- <property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" />\n       会导致数据源配置不管用，数据库连接不上。\n       且spring 4弃用\n       -->\n    </bean>\n\n</beans>\n\n```\n\n### 逆向工程生成po类及mapper(单表增删改查)\n\n### 手动定义商品查询mapper\n\n针对综合查询mapper，一般情况会有关联查询，建议自定义mapper\n\n- ItemsMapperCustom.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.iot.learnssm.firstssm.mapper.ItemsMapperCustom\" >\n\n   <!-- 定义商品查询的sql片段，就是商品查询条件 -->\n   <sql id=\"query_items_where\">\n    <!-- 使用动态sql，通过if判断，满足条件进行sql拼接 -->\n    <!-- 商品查询条件通过ItemsQueryVo包装对象 中itemsCustom属性传递 -->\n        <if test=\"itemsCustom!=null\">\n            <if test=\"itemsCustom.name!=null and itemsCustom.name!=''\">\n                items.name LIKE '%${itemsCustom.name}%'\n            </if>\n        </if>\n\n   </sql>\n\n    <!-- 商品列表查询 -->\n    <!-- parameterType传入包装对象(包装了查询条件)\n        resultType建议使用扩展对象\n     -->\n    <select id=\"findItemsList\" parameterType=\"com.iot.learnssm.firstssm.po.ItemsQueryVo\"\n         resultType=\"com.iot.learnssm.firstssm.po.ItemsCustom\">\n        SELECT items.* FROM items  \n        <where>\n            <include refid=\"query_items_where\"></include>\n        </where>\n    </select>\n\n</mapper>\n```\n\n- ItemsMapperCustom.java\n\n```java\npublic interface ItemsMapperCustom {\n    //商品查询列表\n    List<ItemsCustom> findItemsList(ItemsQueryVo itemsQueryVo)throws Exception;\n}\n```\n\n- po类`ItemsCustom`\n\n```java\npackage com.iot.learnssm.firstssm.po;\n\n/**\n * Created by Brian on 2016/3/2.\n * 商品信息的扩展类\n */\npublic class ItemsCustom extends Items{\n    //添加商品信息的扩展属性\n}\n```\n\n- 输入pojo的包装类\n\n```java\npackage com.iot.learnssm.firstssm.po;\n\n/**\n * Created by Brian on 2016/3/2.\n */\npublic class ItemsQueryVo {\n\n    //商品信息\n    private Items items;\n\n    //为了系统 可扩展性，对原始生成的po进行扩展\n    private ItemsCustom itemsCustom;\n\n    public Items getItems() {\n        return items;\n    }\n\n    public void setItems(Items items) {\n        this.items = items;\n    }\n\n    public ItemsCustom getItemsCustom() {\n        return itemsCustom;\n    }\n\n    public void setItemsCustom(ItemsCustom itemsCustom) {\n        this.itemsCustom = itemsCustom;\n    }\n}\n```\n\n整合好dao后的工程目录如图\n\n\n![](https://i.imgur.com/asZVG7e.png)","slug":"SpringMVC笔记（8）","published":1,"updated":"2018-07-13T12:47:28.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eub9000higqx8oox23oe","content":"<h2 id=\"整合dao\"><a href=\"#整合dao\" class=\"headerlink\" title=\"整合dao\"></a>整合dao</h2><p>首先在resource文件夹下添加两个文件：数据库配置文件和日志配置文件</p>\n<ul>\n<li>数据库配置文件db.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=1231234</span><br></pre></td></tr></table></figure>\n<ul>\n<li>日志配置文件log4j.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Global logging configuration</span><br><span class=\"line\">log4j.rootLogger=DEBUG, stdout</span><br><span class=\"line\"># Console output...</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>\n<h3 id=\"sqlMapConfig-xml\"><a href=\"#sqlMapConfig-xml\" class=\"headerlink\" title=\"sqlMapConfig.xml\"></a>sqlMapConfig.xml</h3><p>mybatis自己的配置文件</p>\n<p>在resources目录下新建mybatis文件夹，并新建sqlMapConfig.xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 全局setting配置，根据需要添加 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置别名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 批量扫描别名 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.po\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置mapper</span></span><br><span class=\"line\"><span class=\"comment\">    由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。</span></span><br><span class=\"line\"><span class=\"comment\">    必须遵循：mapper.xml和mapper.java文件同名且在一个目录</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;mappers&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/mappers&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"applicationContext-dao-xml\"><a href=\"#applicationContext-dao-xml\" class=\"headerlink\" title=\"applicationContext-dao.xml\"></a>applicationContext-dao.xml</h3><p>在resources目录下新建spring文件夹，并新建applicationContext-dao.xml文件</p>\n<p>配置：</p>\n<ul>\n<li>数据源</li>\n<li>SqlSessionFactory</li>\n<li>mapper扫描器</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:db.properties\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据源 ，dbcp --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"30\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 从整合包里找，org.mybatis:mybatis-spring:1.2.4 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- sqlSessionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:mybatis/sqlMapConfig.xml\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">       会导致数据源配置不管用，数据库连接不上。</span></span><br><span class=\"line\"><span class=\"comment\">       且spring 4弃用</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"逆向工程生成po类及mapper-单表增删改查\"><a href=\"#逆向工程生成po类及mapper-单表增删改查\" class=\"headerlink\" title=\"逆向工程生成po类及mapper(单表增删改查)\"></a>逆向工程生成po类及mapper(单表增删改查)</h3><h3 id=\"手动定义商品查询mapper\"><a href=\"#手动定义商品查询mapper\" class=\"headerlink\" title=\"手动定义商品查询mapper\"></a>手动定义商品查询mapper</h3><p>针对综合查询mapper，一般情况会有关联查询，建议自定义mapper</p>\n<ul>\n<li>ItemsMapperCustom.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.mapper.ItemsMapperCustom\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 定义商品查询的sql片段，就是商品查询条件 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"query_items_where\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用动态sql，通过if判断，满足条件进行sql拼接 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 商品查询条件通过ItemsQueryVo包装对象 中itemsCustom属性传递 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"itemsCustom!=null\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"itemsCustom.name!=null and itemsCustom.name!=''\"</span>&gt;</span></span><br><span class=\"line\">                items.name LIKE '%$&#123;itemsCustom.name&#125;%'</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 商品列表查询 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- parameterType传入包装对象(包装了查询条件)</span></span><br><span class=\"line\"><span class=\"comment\">        resultType建议使用扩展对象</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findItemsList\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.po.ItemsQueryVo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.po.ItemsCustom\"</span>&gt;</span></span><br><span class=\"line\">        SELECT items.* FROM items  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"query_items_where\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>ItemsMapperCustom.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ItemsMapperCustom</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;ItemsCustom&gt; <span class=\"title\">findItemsList</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span><span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>po类<code>ItemsCustom</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.po;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Brian on 2016/3/2.</span></span><br><span class=\"line\"><span class=\"comment\"> * 商品信息的扩展类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsCustom</span> <span class=\"keyword\">extends</span> <span class=\"title\">Items</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加商品信息的扩展属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入pojo的包装类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.po;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Brian on 2016/3/2.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsQueryVo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Items items;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了系统 可扩展性，对原始生成的po进行扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsCustom itemsCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Items <span class=\"title\">getItems</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItems</span><span class=\"params\">(Items items)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ItemsCustom <span class=\"title\">getItemsCustom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItemsCustom</span><span class=\"params\">(ItemsCustom itemsCustom)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemsCustom = itemsCustom;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整合好dao后的工程目录如图</p>\n<p><img src=\"https://i.imgur.com/asZVG7e.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"整合dao\"><a href=\"#整合dao\" class=\"headerlink\" title=\"整合dao\"></a>整合dao</h2><p>首先在resource文件夹下添加两个文件：数据库配置文件和日志配置文件</p>\n<ul>\n<li>数据库配置文件db.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class=\"line\">jdbc.url=jdbc:mysql://120.25.162.238:3306/mybatis001?characterEncoding=utf-8</span><br><span class=\"line\">jdbc.username=root</span><br><span class=\"line\">jdbc.password=1231234</span><br></pre></td></tr></table></figure>\n<ul>\n<li>日志配置文件log4j.properties</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Global logging configuration</span><br><span class=\"line\">log4j.rootLogger=DEBUG, stdout</span><br><span class=\"line\"># Console output...</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>\n<h3 id=\"sqlMapConfig-xml\"><a href=\"#sqlMapConfig-xml\" class=\"headerlink\" title=\"sqlMapConfig.xml\"></a>sqlMapConfig.xml</h3><p>mybatis自己的配置文件</p>\n<p>在resources目录下新建mybatis文件夹，并新建sqlMapConfig.xml文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">        \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 全局setting配置，根据需要添加 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置别名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 批量扫描别名 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.po\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置mapper</span></span><br><span class=\"line\"><span class=\"comment\">    由于使用spring和mybatis的整合包进行mapper扫描，这里不需要配置了。</span></span><br><span class=\"line\"><span class=\"comment\">    必须遵循：mapper.xml和mapper.java文件同名且在一个目录</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;mappers&gt;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/mappers&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"applicationContext-dao-xml\"><a href=\"#applicationContext-dao-xml\" class=\"headerlink\" title=\"applicationContext-dao.xml\"></a>applicationContext-dao.xml</h3><p>在resources目录下新建spring文件夹，并新建applicationContext-dao.xml文件</p>\n<p>配置：</p>\n<ul>\n<li>数据源</li>\n<li>SqlSessionFactory</li>\n<li>mapper扫描器</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载db.properties文件中的内容，db.properties文件中key命名要有一定的特殊规则 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:db.properties\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 配置数据源 ，dbcp --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.driver&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.url&#125;\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.username&#125;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;jdbc.password&#125;\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxActive\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"30\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 从整合包里找，org.mybatis:mybatis-spring:1.2.4 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- sqlSessionFactory --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:mybatis/sqlMapConfig.xml\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.mapper\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sqlSessionFactoryBeanName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"sqlSessionFactory\"</span> /&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">       会导致数据源配置不管用，数据库连接不上。</span></span><br><span class=\"line\"><span class=\"comment\">       且spring 4弃用</span></span><br><span class=\"line\"><span class=\"comment\">       --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"逆向工程生成po类及mapper-单表增删改查\"><a href=\"#逆向工程生成po类及mapper-单表增删改查\" class=\"headerlink\" title=\"逆向工程生成po类及mapper(单表增删改查)\"></a>逆向工程生成po类及mapper(单表增删改查)</h3><h3 id=\"手动定义商品查询mapper\"><a href=\"#手动定义商品查询mapper\" class=\"headerlink\" title=\"手动定义商品查询mapper\"></a>手动定义商品查询mapper</h3><p>针对综合查询mapper，一般情况会有关联查询，建议自定义mapper</p>\n<ul>\n<li>ItemsMapperCustom.xml</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.mapper.ItemsMapperCustom\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 定义商品查询的sql片段，就是商品查询条件 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">sql</span> <span class=\"attr\">id</span>=<span class=\"string\">\"query_items_where\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用动态sql，通过if判断，满足条件进行sql拼接 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 商品查询条件通过ItemsQueryVo包装对象 中itemsCustom属性传递 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"itemsCustom!=null\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"itemsCustom.name!=null and itemsCustom.name!=''\"</span>&gt;</span></span><br><span class=\"line\">                items.name LIKE '%$&#123;itemsCustom.name&#125;%'</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">if</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">sql</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 商品列表查询 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- parameterType传入包装对象(包装了查询条件)</span></span><br><span class=\"line\"><span class=\"comment\">        resultType建议使用扩展对象</span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findItemsList\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.po.ItemsQueryVo\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.po.ItemsCustom\"</span>&gt;</span></span><br><span class=\"line\">        SELECT items.* FROM items  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">refid</span>=<span class=\"string\">\"query_items_where\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">where</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>ItemsMapperCustom.java</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ItemsMapperCustom</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;ItemsCustom&gt; <span class=\"title\">findItemsList</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span><span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>po类<code>ItemsCustom</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.po;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Brian on 2016/3/2.</span></span><br><span class=\"line\"><span class=\"comment\"> * 商品信息的扩展类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsCustom</span> <span class=\"keyword\">extends</span> <span class=\"title\">Items</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//添加商品信息的扩展属性</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>输入pojo的包装类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.po;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Brian on 2016/3/2.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsQueryVo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//商品信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Items items;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了系统 可扩展性，对原始生成的po进行扩展</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsCustom itemsCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Items <span class=\"title\">getItems</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItems</span><span class=\"params\">(Items items)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = items;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ItemsCustom <span class=\"title\">getItemsCustom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemsCustom;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setItemsCustom</span><span class=\"params\">(ItemsCustom itemsCustom)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemsCustom = itemsCustom;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整合好dao后的工程目录如图</p>\n<p><img src=\"https://i.imgur.com/asZVG7e.png\" alt=\"\"></p>\n"},{"title":"SpringMVC笔记（9）","date":"2018-07-12T14:28:27.000Z","_content":"\n## 定义service接口\n\n```java\npublic interface ItemsService {\n    //商品查询列表\n    List<ItemsCustom> findItemsList(ItemsQueryVo itemsQueryVo) throws Exception;\n\n}\n```\n\n```java\npublic class ItemsServiceImpl implements ItemsService {\n\n    @Autowired\n    private ItemsMapperCustom itemsMapperCustom;\n\n    public List<ItemsCustom> findItemsList(ItemsQueryVo itemsQueryVo) throws Exception {\n        return itemsMapperCustom.findItemsList(itemsQueryVo);\n    }\n}\n```\n\n### 在spring容器配置service\n\n在`resources/spring`下创建applicationContext-service.xml，文件中配置service。\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\">\n\n    <!-- 商品管理的service -->\n    <bean id=\"itemsService\" class=\"com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl\"/>\n\n</beans>\n```\n\n### 事务控制\n\n在`resources/spring`下创建applicationContext-transaction.xml，在applicationContext-transaction.xml中使用spring声明式事务控制方法。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n\n<!-- 事务管理器\n        对mybatis操作数据库事务控制，spring使用jdbc的事务控制类\n    -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <!-- 数据源\n        dataSource在applicationContext-dao.xml中配置了\n         -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!-- 通知 -->\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <!-- 传播行为 -->\n            <tx:method name=\"save*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"delete*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"insert*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"update*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"find*\" propagation=\"SUPPORTS\" read-only=\"true\"/>\n            <tx:method name=\"get*\" propagation=\"SUPPORTS\" read-only=\"true\"/>\n            <tx:method name=\"select*\" propagation=\"SUPPORTS\" read-only=\"true\"/>\n        </tx:attributes>\n    </tx:advice>\n    <!-- aop -->\n    <aop:config>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.iot.learnssm.firstssm.service.impl.*.*(..))\"/>\n    </aop:config>\n</beans>\n```\n\n## 定义controller\n\n### springmvc.xml\n\n在`resources/spring`文件下下创建springmvc.xml文件，配置处理器映射器、适配器、视图解析器。\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n   <!-- 对于注解的Handler 可以单个配置\n\n    实际开发中加你使用组件扫描\n\n    -->\n\n    <!-- 可以扫描controller、service、...\n\n    这里让扫描controller，指定controller的包\n\n     -->\n\n    <context:component-scan base-package=\"com.iot.learnssm.firstssm.controller\">/context:component-scan\n\n    <!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置\n\n     mvc:annotation-driven默认加载很多的参数绑定方法，\n\n     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter\n\n     实际开发时使用mvc:annotation-driven\n\n     -->\n\n  <mvc:annotation-driven></mvc:annotation-driven>\n\n    <!-- 视图解析器\n\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n\n    -->\n\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\n        <!-- 配置jsp路径的前缀 -->\n\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n\n        <!-- 配置jsp路径的后缀 -->\n\n        <property name=\"suffix\" value=\".jsp\"/>\n\n    </bean>\n\n</beans>\n\n```\n\n### 配置web.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         id=\"WebApp_ID\" version=\"3.0\">\n    <display-name>firstssm</display-name>\n\n    <!-- 加载spring容器 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>WEB-INF/classes/spring/applicationContext-*.xml</param-value>\n        <!--  <param-value>classpath:spring/applicationContext-*.xml</param-value>-->\n      </context-param>\n    <listener>\n      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n\n<!-- springmvc 前端控制器  -->\n    <servlet>\n        <servlet-name>springmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)\n          若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)\n        -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:spring/springmvc.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>springmvc</servlet-name>\n        <!--\n        第一种:*.action,访问以.action三结尾，由DispatcherServlet进行解析\n        第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，\n                使用此种方式和实现RESTful风格的url\n        第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，\n                不能根据jsp页面找到handler，会报错\n        -->\n        <url-pattern>*.action</url-pattern>\n    </servlet-mapping>\n\n\n    <welcome-file-list>\n        <welcome-file>index.html</welcome-file>\n        <welcome-file>index.htm</welcome-file>\n        <welcome-file>index.jsp</welcome-file>\n        <welcome-file>default.html</welcome-file>\n        <welcome-file>default.htm</welcome-file>\n        <welcome-file>default.jsp</welcome-file>\n    </welcome-file-list>\n</web-app>\n```\n\n这个文件有两个作用：\n\n- 配置前端控制器(`DispatcherServlet`)\n\n- 加载spring容器：添加spring容器监听器，加载spring容器，使用通配符加载<u>spring/</u>\n\n  下的配置文件：\n\n  **applicationContext-dao.xml**\n\n  **applicationContext-service.xml**\n\n  **applicationContext-transaction.xml**\n\n### 编写Controller(就是Handler)\n\n```java\npackage com.iot.learnssm.firstssm.controller;\nimport com.iot.learnssm.firstssm.po.Items;\nimport com.iot.learnssm.firstssm.po.ItemsCustom;\nimport com.iot.learnssm.firstssm.service.ItemsService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * Created by brian on 2016/3/2.\n */\n//使用@Controller来标识它是一个控制器\n@Controller\n//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径\n//比如：商品列表：/items/queryItems.action\npublic class ItemsController {\n    @Autowired\n    private ItemsService itemsService;\n    //商品查询列表\n    @RequestMapping(\"/queryItems\")\n    //实现 对queryItems方法和url进行映射，一个方法对应一个url\n    //一般建议将url和方法写成一样\n    public ModelAndView queryItems() throws Exception{\n        //调用service查找数据库，查询商品列表\n        List<ItemsCustom> itemsList = itemsService.findItemsList(null);\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //相当于request的setAttribute方法,在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\",itemsList);\n        //指定视图\n        //下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList\n        //modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n        //下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀\n        modelAndView.setViewName(\"items/itemsList\");\n        return modelAndView;\n    }\n}\n```\n\n### 编写jsp\n\n服务器路径为`WEB-INF/jsp/items/itemsList.jsp`\n\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\"  prefix=\"fmt\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>查询商品列表</title>\n</head>\n<body> \n<form action=\"${pageContext.request.contextPath }/item/queryItem.action\" method=\"post\">\n查询条件：\n<table width=\"100%\" border=1>\n<tr>\n<td><input type=\"submit\" value=\"查询\"/></td>\n</tr>\n</table>\n商品列表：\n<table width=\"100%\" border=1>\n<tr>\n    <td>商品名称</td>\n    <td>商品价格</td>\n    <td>生产日期</td>\n    <td>商品描述</td>\n    <td>操作</td>\n</tr>\n<c:forEach items=\"${itemsList }\" var=\"item\">\n<tr>\n    <td>${item.name }</td>\n    <td>${item.price }</td>\n    <td><fmt:formatDate value=\"${item.createtime}\" pattern=\"yyyy-MM-dd HH:mm:ss\"/></td>\n    <td>${item.detail }</td>\n    <td><a href=\"${pageContext.request.contextPath }/item/editItem.action?id=${item.id}\">修改</a></td>\n</tr>\n</c:forEach>\n</table>\n</form>\n</body>\n</html>\n```\n\n## ","source":"_posts/SpringMVC笔记（9）.md","raw":"---\ntitle: SpringMVC笔记（9）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n\n## 定义service接口\n\n```java\npublic interface ItemsService {\n    //商品查询列表\n    List<ItemsCustom> findItemsList(ItemsQueryVo itemsQueryVo) throws Exception;\n\n}\n```\n\n```java\npublic class ItemsServiceImpl implements ItemsService {\n\n    @Autowired\n    private ItemsMapperCustom itemsMapperCustom;\n\n    public List<ItemsCustom> findItemsList(ItemsQueryVo itemsQueryVo) throws Exception {\n        return itemsMapperCustom.findItemsList(itemsQueryVo);\n    }\n}\n```\n\n### 在spring容器配置service\n\n在`resources/spring`下创建applicationContext-service.xml，文件中配置service。\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\">\n\n    <!-- 商品管理的service -->\n    <bean id=\"itemsService\" class=\"com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl\"/>\n\n</beans>\n```\n\n### 事务控制\n\n在`resources/spring`下创建applicationContext-transaction.xml，在applicationContext-transaction.xml中使用spring声明式事务控制方法。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n\n<!-- 事务管理器\n        对mybatis操作数据库事务控制，spring使用jdbc的事务控制类\n    -->\n    <bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n        <!-- 数据源\n        dataSource在applicationContext-dao.xml中配置了\n         -->\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>\n\n    <!-- 通知 -->\n    <tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\">\n        <tx:attributes>\n            <!-- 传播行为 -->\n            <tx:method name=\"save*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"delete*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"insert*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"update*\" propagation=\"REQUIRED\"/>\n            <tx:method name=\"find*\" propagation=\"SUPPORTS\" read-only=\"true\"/>\n            <tx:method name=\"get*\" propagation=\"SUPPORTS\" read-only=\"true\"/>\n            <tx:method name=\"select*\" propagation=\"SUPPORTS\" read-only=\"true\"/>\n        </tx:attributes>\n    </tx:advice>\n    <!-- aop -->\n    <aop:config>\n        <aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* com.iot.learnssm.firstssm.service.impl.*.*(..))\"/>\n    </aop:config>\n</beans>\n```\n\n## 定义controller\n\n### springmvc.xml\n\n在`resources/spring`文件下下创建springmvc.xml文件，配置处理器映射器、适配器、视图解析器。\n\n```xml\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n\n       xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\n\n    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd\n\n    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\">\n\n   <!-- 对于注解的Handler 可以单个配置\n\n    实际开发中加你使用组件扫描\n\n    -->\n\n    <!-- 可以扫描controller、service、...\n\n    这里让扫描controller，指定controller的包\n\n     -->\n\n    <context:component-scan base-package=\"com.iot.learnssm.firstssm.controller\">/context:component-scan\n\n    <!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置\n\n     mvc:annotation-driven默认加载很多的参数绑定方法，\n\n     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter\n\n     实际开发时使用mvc:annotation-driven\n\n     -->\n\n  <mvc:annotation-driven></mvc:annotation-driven>\n\n    <!-- 视图解析器\n\n    解析jsp,默认使用jstl,classpath下要有jstl的包\n\n    -->\n\n    <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\n        <!-- 配置jsp路径的前缀 -->\n\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\n\n        <!-- 配置jsp路径的后缀 -->\n\n        <property name=\"suffix\" value=\".jsp\"/>\n\n    </bean>\n\n</beans>\n\n```\n\n### 配置web.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         id=\"WebApp_ID\" version=\"3.0\">\n    <display-name>firstssm</display-name>\n\n    <!-- 加载spring容器 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>WEB-INF/classes/spring/applicationContext-*.xml</param-value>\n        <!--  <param-value>classpath:spring/applicationContext-*.xml</param-value>-->\n      </context-param>\n    <listener>\n      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n\n<!-- springmvc 前端控制器  -->\n    <servlet>\n        <servlet-name>springmvc</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)\n          若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)\n        -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:spring/springmvc.xml</param-value>\n        </init-param>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>springmvc</servlet-name>\n        <!--\n        第一种:*.action,访问以.action三结尾，由DispatcherServlet进行解析\n        第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，\n                使用此种方式和实现RESTful风格的url\n        第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，\n                不能根据jsp页面找到handler，会报错\n        -->\n        <url-pattern>*.action</url-pattern>\n    </servlet-mapping>\n\n\n    <welcome-file-list>\n        <welcome-file>index.html</welcome-file>\n        <welcome-file>index.htm</welcome-file>\n        <welcome-file>index.jsp</welcome-file>\n        <welcome-file>default.html</welcome-file>\n        <welcome-file>default.htm</welcome-file>\n        <welcome-file>default.jsp</welcome-file>\n    </welcome-file-list>\n</web-app>\n```\n\n这个文件有两个作用：\n\n- 配置前端控制器(`DispatcherServlet`)\n\n- 加载spring容器：添加spring容器监听器，加载spring容器，使用通配符加载<u>spring/</u>\n\n  下的配置文件：\n\n  **applicationContext-dao.xml**\n\n  **applicationContext-service.xml**\n\n  **applicationContext-transaction.xml**\n\n### 编写Controller(就是Handler)\n\n```java\npackage com.iot.learnssm.firstssm.controller;\nimport com.iot.learnssm.firstssm.po.Items;\nimport com.iot.learnssm.firstssm.po.ItemsCustom;\nimport com.iot.learnssm.firstssm.service.ItemsService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.servlet.ModelAndView;\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * Created by brian on 2016/3/2.\n */\n//使用@Controller来标识它是一个控制器\n@Controller\n//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径\n//比如：商品列表：/items/queryItems.action\npublic class ItemsController {\n    @Autowired\n    private ItemsService itemsService;\n    //商品查询列表\n    @RequestMapping(\"/queryItems\")\n    //实现 对queryItems方法和url进行映射，一个方法对应一个url\n    //一般建议将url和方法写成一样\n    public ModelAndView queryItems() throws Exception{\n        //调用service查找数据库，查询商品列表\n        List<ItemsCustom> itemsList = itemsService.findItemsList(null);\n        //返回ModelAndView\n        ModelAndView modelAndView = new ModelAndView();\n        //相当于request的setAttribute方法,在jsp页面中通过itemsList取数据\n        modelAndView.addObject(\"itemsList\",itemsList);\n        //指定视图\n        //下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList\n        //modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");\n        //下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀\n        modelAndView.setViewName(\"items/itemsList\");\n        return modelAndView;\n    }\n}\n```\n\n### 编写jsp\n\n服务器路径为`WEB-INF/jsp/items/itemsList.jsp`\n\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\"  prefix=\"fmt\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>查询商品列表</title>\n</head>\n<body> \n<form action=\"${pageContext.request.contextPath }/item/queryItem.action\" method=\"post\">\n查询条件：\n<table width=\"100%\" border=1>\n<tr>\n<td><input type=\"submit\" value=\"查询\"/></td>\n</tr>\n</table>\n商品列表：\n<table width=\"100%\" border=1>\n<tr>\n    <td>商品名称</td>\n    <td>商品价格</td>\n    <td>生产日期</td>\n    <td>商品描述</td>\n    <td>操作</td>\n</tr>\n<c:forEach items=\"${itemsList }\" var=\"item\">\n<tr>\n    <td>${item.name }</td>\n    <td>${item.price }</td>\n    <td><fmt:formatDate value=\"${item.createtime}\" pattern=\"yyyy-MM-dd HH:mm:ss\"/></td>\n    <td>${item.detail }</td>\n    <td><a href=\"${pageContext.request.contextPath }/item/editItem.action?id=${item.id}\">修改</a></td>\n</tr>\n</c:forEach>\n</table>\n</form>\n</body>\n</html>\n```\n\n## ","slug":"SpringMVC笔记（9）","published":1,"updated":"2018-07-13T12:47:29.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eubh000kigqx4f6v1ast","content":"<h2 id=\"定义service接口\"><a href=\"#定义service接口\" class=\"headerlink\" title=\"定义service接口\"></a>定义service接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ItemsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;ItemsCustom&gt; <span class=\"title\">findItemsList</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ItemsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsMapperCustom itemsMapperCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ItemsCustom&gt; <span class=\"title\">findItemsList</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemsMapperCustom.findItemsList(itemsQueryVo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在spring容器配置service\"><a href=\"#在spring容器配置service\" class=\"headerlink\" title=\"在spring容器配置service\"></a>在spring容器配置service</h3><p>在<code>resources/spring</code>下创建applicationContext-service.xml，文件中配置service。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 商品管理的service --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"itemsService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"事务控制\"><a href=\"#事务控制\" class=\"headerlink\" title=\"事务控制\"></a>事务控制</h3><p>在<code>resources/spring</code>下创建applicationContext-transaction.xml，在applicationContext-transaction.xml中使用spring声明式事务控制方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器</span></span><br><span class=\"line\"><span class=\"comment\">        对mybatis操作数据库事务控制，spring使用jdbc的事务控制类</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 数据源</span></span><br><span class=\"line\"><span class=\"comment\">        dataSource在applicationContext-dao.xml中配置了</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通知 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 传播行为 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"insert*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- aop --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">\"execution(* com.iot.learnssm.firstssm.service.impl.*.*(..))\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义controller\"><a href=\"#定义controller\" class=\"headerlink\" title=\"定义controller\"></a>定义controller</h2><h3 id=\"springmvc-xml\"><a href=\"#springmvc-xml\" class=\"headerlink\" title=\"springmvc.xml\"></a>springmvc.xml</h3><p>在<code>resources/spring</code>文件下下创建springmvc.xml文件，配置处理器映射器、适配器、视图解析器。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\"></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\"></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 对于注解的Handler 可以单个配置</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    实际开发中加你使用组件扫描</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以扫描controller、service、...</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    这里让扫描controller，指定controller的包</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.controller\"</span>&gt;</span>/context:component-scan</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     实际开发时使用mvc:annotation-driven</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置web-xml\"><a href=\"#配置web-xml\" class=\"headerlink\" title=\"配置web.xml\"></a>配置web.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>firstssm<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/classes/spring/applicationContext-*.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- springmvc 前端控制器  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)</span></span><br><span class=\"line\"><span class=\"comment\">          若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        第一种:*.action,访问以.action三结尾，由DispatcherServlet进行解析</span></span><br><span class=\"line\"><span class=\"comment\">        第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，</span></span><br><span class=\"line\"><span class=\"comment\">                使用此种方式和实现RESTful风格的url</span></span><br><span class=\"line\"><span class=\"comment\">        第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，</span></span><br><span class=\"line\"><span class=\"comment\">                不能根据jsp页面找到handler，会报错</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个文件有两个作用：</p>\n<ul>\n<li><p>配置前端控制器(<code>DispatcherServlet</code>)</p>\n</li>\n<li><p>加载spring容器：添加spring容器监听器，加载spring容器，使用通配符加载<u>spring/</u></p>\n<p>下的配置文件：</p>\n<p><strong>applicationContext-dao.xml</strong></p>\n<p><strong>applicationContext-service.xml</strong></p>\n<p><strong>applicationContext-transaction.xml</strong></p>\n</li>\n</ul>\n<h3 id=\"编写Controller-就是Handler\"><a href=\"#编写Controller-就是Handler\" class=\"headerlink\" title=\"编写Controller(就是Handler)\"></a>编写Controller(就是Handler)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.learnssm.firstssm.po.Items;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.learnssm.firstssm.po.ItemsCustom;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.learnssm.firstssm.service.ItemsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by brian on 2016/3/2.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"comment\">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class=\"line\"><span class=\"comment\">//比如：商品列表：/items/queryItems.action</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsService itemsService;</span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/queryItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class=\"line\">    <span class=\"comment\">//一般建议将url和方法写成一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">queryItems</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表</span></span><br><span class=\"line\">        List&lt;ItemsCustom&gt; itemsList = itemsService.findItemsList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class=\"line\">        <span class=\"comment\">//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"items/itemsList\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写jsp\"><a href=\"#编写jsp\" class=\"headerlink\" title=\"编写jsp\"></a>编写jsp</h3><p>服务器路径为<code>WEB-INF/jsp/items/itemsList.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span> %&gt;</span><br><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/fmt\"</span>  prefix=<span class=\"string\">\"fmt\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;查询商品列表&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt; </span><br><span class=\"line\">&lt;form action=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/item/queryItem.action\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">查询条件：</span><br><span class=\"line\">&lt;table width=<span class=\"string\">\"100%\"</span> border=<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">&lt;td&gt;&lt;input type=\"submit\" value=\"查询\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\">商品列表：</span><br><span class=\"line\">&lt;table width=<span class=\"string\">\"100%\"</span> border=<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;商品名称&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;商品价格&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;生产日期&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;商品描述&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;操作&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;itemsList &#125;\"</span> var=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.name &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.price &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/item/editItem.action?id=$&#123;item.id&#125;\"&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>## </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定义service接口\"><a href=\"#定义service接口\" class=\"headerlink\" title=\"定义service接口\"></a>定义service接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ItemsService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"function\">List&lt;ItemsCustom&gt; <span class=\"title\">findItemsList</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">ItemsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsMapperCustom itemsMapperCustom;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;ItemsCustom&gt; <span class=\"title\">findItemsList</span><span class=\"params\">(ItemsQueryVo itemsQueryVo)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itemsMapperCustom.findItemsList(itemsQueryVo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在spring容器配置service\"><a href=\"#在spring容器配置service\" class=\"headerlink\" title=\"在spring容器配置service\"></a>在spring容器配置service</h3><p>在<code>resources/spring</code>下创建applicationContext-service.xml，文件中配置service。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 商品管理的service --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"itemsService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.service.impl.ItemsServiceImpl\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"事务控制\"><a href=\"#事务控制\" class=\"headerlink\" title=\"事务控制\"></a>事务控制</h3><p>在<code>resources/spring</code>下创建applicationContext-transaction.xml，在applicationContext-transaction.xml中使用spring声明式事务控制方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 事务管理器</span></span><br><span class=\"line\"><span class=\"comment\">        对mybatis操作数据库事务控制，spring使用jdbc的事务控制类</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"transactionManager\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 数据源</span></span><br><span class=\"line\"><span class=\"comment\">        dataSource在applicationContext-dao.xml中配置了</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通知 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">\"transactionManager\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 传播行为 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"save*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"delete*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"insert*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"update*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"REQUIRED\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"find*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"get*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">\"select*\"</span> <span class=\"attr\">propagation</span>=<span class=\"string\">\"SUPPORTS\"</span> <span class=\"attr\">read-only</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- aop --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:advisor</span> <span class=\"attr\">advice-ref</span>=<span class=\"string\">\"txAdvice\"</span> <span class=\"attr\">pointcut</span>=<span class=\"string\">\"execution(* com.iot.learnssm.firstssm.service.impl.*.*(..))\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义controller\"><a href=\"#定义controller\" class=\"headerlink\" title=\"定义controller\"></a>定义controller</h2><h3 id=\"springmvc-xml\"><a href=\"#springmvc-xml\" class=\"headerlink\" title=\"springmvc.xml\"></a>springmvc.xml</h3><p>在<code>resources/spring</code>文件下下创建springmvc.xml文件，配置处理器映射器、适配器、视图解析器。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\"></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\"></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 对于注解的Handler 可以单个配置</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    实际开发中加你使用组件扫描</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 可以扫描controller、service、...</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    这里让扫描controller，指定controller的包</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.iot.learnssm.firstssm.controller\"</span>&gt;</span>/context:component-scan</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用mvc:annotation-driven代替上面两个注解映射器和注解适配的配置</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     mvc:annotation-driven默认加载很多的参数绑定方法，</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     比如json转换解析器默认加载了，如果使用mvc:annotation-driven则不用配置上面的RequestMappingHandlerMapping和RequestMappingHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     实际开发时使用mvc:annotation-driven</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 视图解析器</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    解析jsp,默认使用jstl,classpath下要有jstl的包</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的前缀 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/jsp/\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 配置jsp路径的后缀 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置web-xml\"><a href=\"#配置web-xml\" class=\"headerlink\" title=\"配置web.xml\"></a>配置web.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">id</span>=<span class=\"string\">\"WebApp_ID\"</span> <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>firstssm<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>WEB-INF/classes/spring/applicationContext-*.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--  &lt;param-value&gt;classpath:spring/applicationContext-*.xml&lt;/param-value&gt;--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- springmvc 前端控制器  --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- contextConfigLocation配置springmvc加载的配置文件(配置处理器映射器、适配器等等)</span></span><br><span class=\"line\"><span class=\"comment\">          若不配置，默认加载WEB-INF/servlet名称-servlet(springmvc-servlet.xml)</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springmvc<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">        第一种:*.action,访问以.action三结尾，由DispatcherServlet进行解析</span></span><br><span class=\"line\"><span class=\"comment\">        第二种:/,所有访问的地址由DispatcherServlet进行解析，对静态文件的解析需要配置不让DispatcherServlet进行解析，</span></span><br><span class=\"line\"><span class=\"comment\">                使用此种方式和实现RESTful风格的url</span></span><br><span class=\"line\"><span class=\"comment\">        第三种:/*,这样配置不对，使用这种配置，最终要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址，</span></span><br><span class=\"line\"><span class=\"comment\">                不能根据jsp页面找到handler，会报错</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>index.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.html<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.htm<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">welcome-file</span>&gt;</span>default.jsp<span class=\"tag\">&lt;/<span class=\"name\">welcome-file</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">welcome-file-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这个文件有两个作用：</p>\n<ul>\n<li><p>配置前端控制器(<code>DispatcherServlet</code>)</p>\n</li>\n<li><p>加载spring容器：添加spring容器监听器，加载spring容器，使用通配符加载<u>spring/</u></p>\n<p>下的配置文件：</p>\n<p><strong>applicationContext-dao.xml</strong></p>\n<p><strong>applicationContext-service.xml</strong></p>\n<p><strong>applicationContext-transaction.xml</strong></p>\n</li>\n</ul>\n<h3 id=\"编写Controller-就是Handler\"><a href=\"#编写Controller-就是Handler\" class=\"headerlink\" title=\"编写Controller(就是Handler)\"></a>编写Controller(就是Handler)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.iot.learnssm.firstssm.controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.learnssm.firstssm.po.Items;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.learnssm.firstssm.po.ItemsCustom;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.iot.learnssm.firstssm.service.ItemsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by brian on 2016/3/2.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//使用@Controller来标识它是一个控制器</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"comment\">//为了对url进行分类管理 ，可以在这里定义根路径，最终访问url是根路径+子路径</span></span><br><span class=\"line\"><span class=\"comment\">//比如：商品列表：/items/queryItems.action</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemsController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ItemsService itemsService;</span><br><span class=\"line\">    <span class=\"comment\">//商品查询列表</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/queryItems\"</span>)</span><br><span class=\"line\">    <span class=\"comment\">//实现 对queryItems方法和url进行映射，一个方法对应一个url</span></span><br><span class=\"line\">    <span class=\"comment\">//一般建议将url和方法写成一样</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">queryItems</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用service查找数据库，查询商品列表</span></span><br><span class=\"line\">        List&lt;ItemsCustom&gt; itemsList = itemsService.findItemsList(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">//返回ModelAndView</span></span><br><span class=\"line\">        ModelAndView modelAndView = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        <span class=\"comment\">//相当于request的setAttribute方法,在jsp页面中通过itemsList取数据</span></span><br><span class=\"line\">        modelAndView.addObject(<span class=\"string\">\"itemsList\"</span>,itemsList);</span><br><span class=\"line\">        <span class=\"comment\">//指定视图</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径，如果在视图解析器中配置jsp的路径前缀和后缀，修改为items/itemsList</span></span><br><span class=\"line\">        <span class=\"comment\">//modelAndView.setViewName(\"/WEB-INF/jsp/items/itemsList.jsp\");</span></span><br><span class=\"line\">        <span class=\"comment\">//下边的路径配置就可以不在程序中指定jsp路径的前缀和后缀</span></span><br><span class=\"line\">        modelAndView.setViewName(<span class=\"string\">\"items/itemsList\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> modelAndView;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写jsp\"><a href=\"#编写jsp\" class=\"headerlink\" title=\"编写jsp\"></a>编写jsp</h3><p>服务器路径为<code>WEB-INF/jsp/items/itemsList.jsp</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span> %&gt;</span><br><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/fmt\"</span>  prefix=<span class=\"string\">\"fmt\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;查询商品列表&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt; </span><br><span class=\"line\">&lt;form action=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/item/queryItem.action\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">查询条件：</span><br><span class=\"line\">&lt;table width=<span class=\"string\">\"100%\"</span> border=<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">&lt;td&gt;&lt;input type=\"submit\" value=\"查询\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\">商品列表：</span><br><span class=\"line\">&lt;table width=<span class=\"string\">\"100%\"</span> border=<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;商品名称&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;商品价格&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;生产日期&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;商品描述&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;操作&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;itemsList &#125;\"</span> var=<span class=\"string\">\"item\"</span>&gt;</span><br><span class=\"line\">&lt;tr&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.name &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.price &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt;</span><br><span class=\"line\">    &lt;td&gt;&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/item/editItem.action?id=$&#123;item.id&#125;\"&gt;修改&lt;/a&gt;&lt;/td&gt;</span><br><span class=\"line\">&lt;/tr&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>## </p>\n"},{"title":"SpringMVC笔记（1）","date":"2018-07-12T14:28:27.000Z","_content":"# SpringMVC操作笔记\n\n## SpringMVC基础知识介绍\n\n###SpringMVC功能部件\n\n<!--springmvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。-->\n\n\n\n\n\n![](https://i.imgur.com/e7v40XO.jpg)\n\n组件及其作用\n\n- 前端控制器(DispatcherServlet)：接收请求，响应结果，相当于转发器，中央处理器。减少了其他组件之间的耦合度\n- 处理器映射器(HandlerMapping)：根据请求的url查找Handler\n- **Handler处理器**：按照HandlerAdapter的要求编写\n- 处理器适配器(HandlerAdapter)：按照特定规则(HandlerAdapter要求的规则)执行Handler。\n- 视图解析器(ViewResolver)：进行视图解析，根据逻辑视图解析成真正的视图(View)\n- **视图(View)**：View是一个接口实现类试吃不同的View类型（jsp,pdf等等）\n\n<!--*其中加粗的为需要程序员开发的，没加粗的为不需要程序员开发的*-->\n\n### Spring工作流程\n\n![](https://i.imgur.com/FriXTPC.png)\n\n- 1.发起请求到前端控制器(`DispatcherServlet`)\n- 2.前端控制器请求处理器映射器(`HandlerMapping`)查找`Handler`(可根据xml配置、注解进行查找)\n- 3.处理器映射器(`HandlerMapping`)向前端控制器返回`Handler`\n- 4.前端控制器调用处理器适配器(`HandlerAdapter`)执行`Handler`\n- 5.处理器适配器(HandlerAdapter)去执行Handler\n- 6.Handler执行完，给适配器返回ModelAndView(Springmvc框架的一个底层对象)\n- 7.处理器适配器(`HandlerAdapter`)向前端控制器返回`ModelAndView`\n- 8.前端控制器(`DispatcherServlet`)请求视图解析器(`ViewResolver`)进行视图解析，根据逻辑视图名解析成真正的视图(jsp)\n- 9.视图解析器(ViewResolver)向前端控制器(`DispatcherServlet`)返回View\n- 10.前端控制器进行视图渲染，即将模型数据(在`ModelAndView`对象中)填充到request域\n- 11.前端控制器向用户响应结果\n","source":"_posts/SpringMVC笔记（1）.md","raw":"---\ntitle: SpringMVC笔记（1）\ndate: 2018-07-12 22:28:27\ntags: SpringMVC笔记\ncategories: back-end\n---\n# SpringMVC操作笔记\n\n## SpringMVC基础知识介绍\n\n###SpringMVC功能部件\n\n<!--springmvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。-->\n\n\n\n\n\n![](https://i.imgur.com/e7v40XO.jpg)\n\n组件及其作用\n\n- 前端控制器(DispatcherServlet)：接收请求，响应结果，相当于转发器，中央处理器。减少了其他组件之间的耦合度\n- 处理器映射器(HandlerMapping)：根据请求的url查找Handler\n- **Handler处理器**：按照HandlerAdapter的要求编写\n- 处理器适配器(HandlerAdapter)：按照特定规则(HandlerAdapter要求的规则)执行Handler。\n- 视图解析器(ViewResolver)：进行视图解析，根据逻辑视图解析成真正的视图(View)\n- **视图(View)**：View是一个接口实现类试吃不同的View类型（jsp,pdf等等）\n\n<!--*其中加粗的为需要程序员开发的，没加粗的为不需要程序员开发的*-->\n\n### Spring工作流程\n\n![](https://i.imgur.com/FriXTPC.png)\n\n- 1.发起请求到前端控制器(`DispatcherServlet`)\n- 2.前端控制器请求处理器映射器(`HandlerMapping`)查找`Handler`(可根据xml配置、注解进行查找)\n- 3.处理器映射器(`HandlerMapping`)向前端控制器返回`Handler`\n- 4.前端控制器调用处理器适配器(`HandlerAdapter`)执行`Handler`\n- 5.处理器适配器(HandlerAdapter)去执行Handler\n- 6.Handler执行完，给适配器返回ModelAndView(Springmvc框架的一个底层对象)\n- 7.处理器适配器(`HandlerAdapter`)向前端控制器返回`ModelAndView`\n- 8.前端控制器(`DispatcherServlet`)请求视图解析器(`ViewResolver`)进行视图解析，根据逻辑视图名解析成真正的视图(jsp)\n- 9.视图解析器(ViewResolver)向前端控制器(`DispatcherServlet`)返回View\n- 10.前端控制器进行视图渲染，即将模型数据(在`ModelAndView`对象中)填充到request域\n- 11.前端控制器向用户响应结果\n","slug":"SpringMVC笔记（1）","published":1,"updated":"2018-07-13T12:46:56.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjk0eubo000nigqxx9s1vs9d","content":"<h1 id=\"SpringMVC操作笔记\"><a href=\"#SpringMVC操作笔记\" class=\"headerlink\" title=\"SpringMVC操作笔记\"></a>SpringMVC操作笔记</h1><h2 id=\"SpringMVC基础知识介绍\"><a href=\"#SpringMVC基础知识介绍\" class=\"headerlink\" title=\"SpringMVC基础知识介绍\"></a>SpringMVC基础知识介绍</h2><p>###SpringMVC功能部件</p>\n<!--springmvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。-->\n<p><img src=\"https://i.imgur.com/e7v40XO.jpg\" alt=\"\"></p>\n<p>组件及其作用</p>\n<ul>\n<li>前端控制器(DispatcherServlet)：接收请求，响应结果，相当于转发器，中央处理器。减少了其他组件之间的耦合度</li>\n<li>处理器映射器(HandlerMapping)：根据请求的url查找Handler</li>\n<li><strong>Handler处理器</strong>：按照HandlerAdapter的要求编写</li>\n<li>处理器适配器(HandlerAdapter)：按照特定规则(HandlerAdapter要求的规则)执行Handler。</li>\n<li>视图解析器(ViewResolver)：进行视图解析，根据逻辑视图解析成真正的视图(View)</li>\n<li><strong>视图(View)</strong>：View是一个接口实现类试吃不同的View类型（jsp,pdf等等）</li>\n</ul>\n<!--*其中加粗的为需要程序员开发的，没加粗的为不需要程序员开发的*-->\n<h3 id=\"Spring工作流程\"><a href=\"#Spring工作流程\" class=\"headerlink\" title=\"Spring工作流程\"></a>Spring工作流程</h3><p><img src=\"https://i.imgur.com/FriXTPC.png\" alt=\"\"></p>\n<ul>\n<li>1.发起请求到前端控制器(<code>DispatcherServlet</code>)</li>\n<li>2.前端控制器请求处理器映射器(<code>HandlerMapping</code>)查找<code>Handler</code>(可根据xml配置、注解进行查找)</li>\n<li>3.处理器映射器(<code>HandlerMapping</code>)向前端控制器返回<code>Handler</code></li>\n<li>4.前端控制器调用处理器适配器(<code>HandlerAdapter</code>)执行<code>Handler</code></li>\n<li>5.处理器适配器(HandlerAdapter)去执行Handler</li>\n<li>6.Handler执行完，给适配器返回ModelAndView(Springmvc框架的一个底层对象)</li>\n<li>7.处理器适配器(<code>HandlerAdapter</code>)向前端控制器返回<code>ModelAndView</code></li>\n<li>8.前端控制器(<code>DispatcherServlet</code>)请求视图解析器(<code>ViewResolver</code>)进行视图解析，根据逻辑视图名解析成真正的视图(jsp)</li>\n<li>9.视图解析器(ViewResolver)向前端控制器(<code>DispatcherServlet</code>)返回View</li>\n<li>10.前端控制器进行视图渲染，即将模型数据(在<code>ModelAndView</code>对象中)填充到request域</li>\n<li>11.前端控制器向用户响应结果</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SpringMVC操作笔记\"><a href=\"#SpringMVC操作笔记\" class=\"headerlink\" title=\"SpringMVC操作笔记\"></a>SpringMVC操作笔记</h1><h2 id=\"SpringMVC基础知识介绍\"><a href=\"#SpringMVC基础知识介绍\" class=\"headerlink\" title=\"SpringMVC基础知识介绍\"></a>SpringMVC基础知识介绍</h2><p>###SpringMVC功能部件</p>\n<!--springmvc是spring框架的一个模块，springmvc和spring无需通过中间整合层进行整合。-->\n<p><img src=\"https://i.imgur.com/e7v40XO.jpg\" alt=\"\"></p>\n<p>组件及其作用</p>\n<ul>\n<li>前端控制器(DispatcherServlet)：接收请求，响应结果，相当于转发器，中央处理器。减少了其他组件之间的耦合度</li>\n<li>处理器映射器(HandlerMapping)：根据请求的url查找Handler</li>\n<li><strong>Handler处理器</strong>：按照HandlerAdapter的要求编写</li>\n<li>处理器适配器(HandlerAdapter)：按照特定规则(HandlerAdapter要求的规则)执行Handler。</li>\n<li>视图解析器(ViewResolver)：进行视图解析，根据逻辑视图解析成真正的视图(View)</li>\n<li><strong>视图(View)</strong>：View是一个接口实现类试吃不同的View类型（jsp,pdf等等）</li>\n</ul>\n<!--*其中加粗的为需要程序员开发的，没加粗的为不需要程序员开发的*-->\n<h3 id=\"Spring工作流程\"><a href=\"#Spring工作流程\" class=\"headerlink\" title=\"Spring工作流程\"></a>Spring工作流程</h3><p><img src=\"https://i.imgur.com/FriXTPC.png\" alt=\"\"></p>\n<ul>\n<li>1.发起请求到前端控制器(<code>DispatcherServlet</code>)</li>\n<li>2.前端控制器请求处理器映射器(<code>HandlerMapping</code>)查找<code>Handler</code>(可根据xml配置、注解进行查找)</li>\n<li>3.处理器映射器(<code>HandlerMapping</code>)向前端控制器返回<code>Handler</code></li>\n<li>4.前端控制器调用处理器适配器(<code>HandlerAdapter</code>)执行<code>Handler</code></li>\n<li>5.处理器适配器(HandlerAdapter)去执行Handler</li>\n<li>6.Handler执行完，给适配器返回ModelAndView(Springmvc框架的一个底层对象)</li>\n<li>7.处理器适配器(<code>HandlerAdapter</code>)向前端控制器返回<code>ModelAndView</code></li>\n<li>8.前端控制器(<code>DispatcherServlet</code>)请求视图解析器(<code>ViewResolver</code>)进行视图解析，根据逻辑视图名解析成真正的视图(jsp)</li>\n<li>9.视图解析器(ViewResolver)向前端控制器(<code>DispatcherServlet</code>)返回View</li>\n<li>10.前端控制器进行视图渲染，即将模型数据(在<code>ModelAndView</code>对象中)填充到request域</li>\n<li>11.前端控制器向用户响应结果</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjk0eual0005igqxqdbg2db0","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0eub6000digqx769zr6vz"},{"post_id":"cjjk0eu9l0000igqxmihrp12i","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0eubd000iigqx9gu3gjbr"},{"post_id":"cjjk0euat0006igqxvmevw2d7","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0eubk000ligqx7cli1oo9"},{"post_id":"cjjk0eub0000aigqxr6vaa446","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0eubr000oigqx4t5xd24k"},{"post_id":"cjjk0eu9x0001igqxxvi3bs88","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0eubv000qigqx7o0cp6po"},{"post_id":"cjjk0eub4000cigqxfbg5ng9i","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0euc0000sigqxp3q586bb"},{"post_id":"cjjk0eub9000higqx8oox23oe","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0euc0000uigqxdnlz2kzq"},{"post_id":"cjjk0euad0004igqxuywub2wi","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0euc2000wigqxgqqsvae4"},{"post_id":"cjjk0eubh000kigqx4f6v1ast","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0euc2000yigqxwcj85jdw"},{"post_id":"cjjk0eubo000nigqxx9s1vs9d","category_id":"cjjk0eua70002igqxjzrcdiq5","_id":"cjjk0euc4000zigqxa5ty8xdg"}],"PostTag":[{"post_id":"cjjk0eual0005igqxqdbg2db0","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0euaz0009igqx014qpm6k"},{"post_id":"cjjk0eu9l0000igqxmihrp12i","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0eub2000bigqx5rdlk0a3"},{"post_id":"cjjk0euat0006igqxvmevw2d7","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0eub9000gigqxzbon8w7y"},{"post_id":"cjjk0eub0000aigqxr6vaa446","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0eubg000jigqxgly0ldgd"},{"post_id":"cjjk0eu9x0001igqxxvi3bs88","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0eubm000migqx01je0dch"},{"post_id":"cjjk0eub4000cigqxfbg5ng9i","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0eubu000pigqxto9uccgw"},{"post_id":"cjjk0eub9000higqx8oox23oe","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0eubz000rigqxod22sd2d"},{"post_id":"cjjk0euad0004igqxuywub2wi","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0euc0000tigqx36vql2y2"},{"post_id":"cjjk0eubh000kigqx4f6v1ast","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0euc1000vigqx8jldw1o8"},{"post_id":"cjjk0eubo000nigqxx9s1vs9d","tag_id":"cjjk0euac0003igqxvlq4evbz","_id":"cjjk0euc2000xigqxq4jz4alb"}],"Tag":[{"name":"SpringMVC笔记","_id":"cjjk0euac0003igqxvlq4evbz"}]}}